syntax = "proto3";

package stroppy;

import "common.proto";
import "descriptor.proto";
import "gen/validate/validate.proto";
import "k6.proto";

option go_package = "github.com/stroppy-io/stroppy/pkg/core/proto";


/**
 * DriverConfig contains configuration for connecting to a database driver.
 * It includes the driver plugin path, connection URL, and database-specific settings.
*/
message DriverConfig {
    /** Database connection URL */
    string url = 3 [(validate.rules).string.uri_ref = true];
    /** Database-specific configuration options */
    optional Value.Struct db_specific = 4;

    enum DriverType {
        DRIVER_TYPE_UNSPECIFIED = 0;
        DRIVER_TYPE_POSTGRES = 1;
    }

    /** Name of chosen driver */
    DriverType driver_type = 5 [(validate.rules).enum.defined_only = true];
}

/**
 * LoggerConfig contains configuration for the logging system.
 * It controls log levels and output formatting.
 */
message LoggerConfig {
    enum LogLevel {
        LOG_LEVEL_DEBUG = 0;
        LOG_LEVEL_INFO = 1;
        LOG_LEVEL_WARN = 2;
        LOG_LEVEL_ERROR = 3;
        LOG_LEVEL_FATAL = 4;
    }
    enum LogMode {
        LOG_MODE_DEVELOPMENT = 0;
        LOG_MODE_PRODUCTION = 1;
    }
    /** Minimum log level to output */
    LogLevel log_level = 1 [(validate.rules).enum.defined_only = true];
    /** Logging mode (development or production) */
    LogMode log_mode = 2 [(validate.rules).enum.defined_only = true];
}

/**
 * OtlpExporterConfig contains named configuration for an OTLP exporter.
 */
message ExporterConfig {
    /** Name of the OTLP exporter */
    string name = 1 [(validate.rules).string.min_len = 1];
    /** Configuration for the OTLP exporter */
    OtlpExport otlp_export = 2 [(validate.rules).message.required = true];
}

/**
 * ExecutorConfig contains configuration for an executor.
 */
message ExecutorConfig {
    /** Name of the executor */
    string name = 1 [(validate.rules).string.min_len = 1];
    /** Configuration for the executor */
    K6Options k6 = 2;
}

/**
 * StepExecutorMappingConfig contains configuration for mapping steps to executors.
 */
message StepExecutionMapping {
    /** Name of the step */
    string step_name = 1 [(validate.rules).string.min_len = 1];
    /** Name of the executor */
    string executor_name = 2 [(validate.rules).string.min_len = 1];
    /** Name of the exporter */
    string exporter_name = 3 [(validate.rules).string.min_len = 1];
    /** Whether to execute all operations in this step asynchronously */
    bool async = 4;
}

/**
 * SideCar contains configuration for plugins.
 */
message SideCarConfig {
    /** Url to connect the plugin instance */
    string url = 2 [(validate.rules).string.uri_ref = true];
    /** Additional plugin settings */
    optional Value.Struct settings = 3;
}


// TODO: use it later
/**
 * CloudConfig contains configuration for stroppy cloud backend.
 */
message CloudConfig {}

/**
 * Config contains the complete configuration for a benchmark run.
 */
message Config {
    /**
     * Version of the configuration format e.g. proto files version.
     * This is used for backward compatibility of configs
     * and will be set automatically from binary run if not present.
     */
    string version = 1;
    /** Run identifier for reproducible test runs or debugging */
    string run_id = 2;
    /** Random seed for reproducible test runs */
    uint64 seed = 3 [(validate.rules).uint64.gte = 0];
    /** Arbitrary metadata, may be passed to result labels and json output */
    map<string, string> metadata = 4;
    /** Database driver configuration */
    DriverConfig driver = 5 [(validate.rules).message.required = true];
    /** Logging configuration */
    LoggerConfig logger = 6;
    /** Exporters configuration */
    repeated ExporterConfig exporters = 7;
    /** Executors configuration */
    repeated ExecutorConfig executors = 8;
    /** Step to executor mapping configuration */
    StepExecutionMapping step_executor_mappings = 9;
    /** Plugins configuration */
    repeated SideCarConfig side_cars = 10;
    /** BenchmarkDescriptor defines a complete benchmark consisting of multiple steps. */
    BenchmarkDescriptor benchmark = 11 [(validate.rules).message.required = true];
}
