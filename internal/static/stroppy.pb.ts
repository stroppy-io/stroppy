// @generated by protobuf-ts 2.11.1 with parameter force_disable_services,force_client_none,force_exclude_all_options,keep_enum_prefix,add_pb_suffix,long_type_string
// @generated from protobuf file "common.proto" (package "stroppy", syntax proto3)
// tslint:disable
import type { BinaryReadOptions, BinaryWriteOptions, IBinaryReader, IBinaryWriter, PartialMessage } from "@protobuf-ts/runtime";
import { MessageType, reflectionMergePartial, UnknownFieldHandler, WireType } from "@protobuf-ts/runtime";

/**
 * *
 * OtlpExport contains configuration for exporting metrics via OpenTelemetry
 * Protocol (OTLP). It specifies the endpoint and metrics prefix for telemetry
 * data export.
 *
 * @generated from protobuf message stroppy.OtlpExport
 */
export interface OtlpExport {
    /**
     * * gRPC endpoint for OpenTelemetry collector
     *
     * @generated from protobuf field: optional string otlp_grpc_endpoint = 1
     */
    otlpGrpcEndpoint?: string;
    /**
     * * HTTP endpoint for the OpenTelemetry collector
     *
     * @generated from protobuf field: optional string otlp_http_endpoint = 3
     */
    otlpHttpEndpoint?: string;
    /**
     * * HTTP exporter path. Default is '/v1/metrics'
     *
     * @generated from protobuf field: optional string otlp_http_exporter_url_path = 4
     */
    otlpHttpExporterUrlPath?: string;
    /**
     * * Disable transport security for the exporter
     *
     * @generated from protobuf field: optional bool otlp_endpoint_insecure = 5
     */
    otlpEndpointInsecure?: boolean;
    /**
     * * Headers for otlp requests e.g. Authorization=...
     *
     * @generated from protobuf field: optional string otlp_headers = 6
     */
    otlpHeaders?: string;
    /**
     * * Prefix to be added to all exported metrics
     *
     * @generated from protobuf field: optional string otlp_metrics_prefix = 2
     */
    otlpMetricsPrefix?: string;
}
/**
 * *
 * Decimal represents an arbitrary-precision decimal number.
 *
 * @generated from protobuf message stroppy.Decimal
 */
export interface Decimal {
    /**
     * * String representation of the decimal number
     *
     * @generated from protobuf field: string value = 1
     */
    value: string;
}
/**
 * *
 * Uuid represents a universally unique identifier (UUID).
 *
 * @generated from protobuf message stroppy.Uuid
 */
export interface Uuid {
    /**
     * * String representation of UUID (e.g.,
     * "123e4567-e89b-12d3-a456-426614174000")
     *
     * @generated from protobuf field: string value = 1
     */
    value: string;
}
/**
 * *
 * DateTime represents a point in time, independent of any time zone or
 * calendar.
 *
 * @generated from protobuf message stroppy.DateTime
 */
export interface DateTime {
    /**
     * * Timestamp in UTC
     *
     * @generated from protobuf field: google.protobuf.Timestamp value = 1
     */
    value?: Timestamp;
}
/**
 * *
 * Value is a variant type that can represent different types of values.
 * It's used to represent values that can be of multiple types in a type-safe
 * way.
 *
 * @generated from protobuf message stroppy.Value
 */
export interface Value {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "null";
        /**
         * * Null value
         *
         * @generated from protobuf field: stroppy.Value.NullValue null = 1
         */
        null: Value_NullValue;
    } | {
        oneofKind: "int32";
        /**
         * * 32-bit signed integer
         *
         * @generated from protobuf field: int32 int32 = 2
         */
        int32: number;
    } | {
        oneofKind: "uint32";
        /**
         * * 32-bit unsigned integer
         *
         * @generated from protobuf field: uint32 uint32 = 3
         */
        uint32: number;
    } | {
        oneofKind: "int64";
        /**
         * * 64-bit signed integer
         *
         * @generated from protobuf field: int64 int64 = 4
         */
        int64: string;
    } | {
        oneofKind: "uint64";
        /**
         * * 64-bit unsigned integer
         *
         * @generated from protobuf field: uint64 uint64 = 5
         */
        uint64: string;
    } | {
        oneofKind: "float";
        /**
         * * 32-bit floating point number
         *
         * @generated from protobuf field: float float = 6
         */
        float: number;
    } | {
        oneofKind: "double";
        /**
         * * 64-bit floating point number
         *
         * @generated from protobuf field: double double = 7
         */
        double: number;
    } | {
        oneofKind: "string";
        /**
         * * UTF-8 encoded string
         *
         * @generated from protobuf field: string string = 8
         */
        string: string;
    } | {
        oneofKind: "bool";
        /**
         * * Boolean value
         *
         * @generated from protobuf field: bool bool = 9
         */
        bool: boolean;
    } | {
        oneofKind: "decimal";
        /**
         * * Arbitrary-precision decimal
         *
         * @generated from protobuf field: stroppy.Decimal decimal = 10
         */
        decimal: Decimal;
    } | {
        oneofKind: "uuid";
        /**
         * * Universally unique identifier
         *
         * @generated from protobuf field: stroppy.Uuid uuid = 11
         */
        uuid: Uuid;
    } | {
        oneofKind: "datetime";
        /**
         * * Date and time
         *
         * @generated from protobuf field: stroppy.DateTime datetime = 12
         */
        datetime: DateTime;
    } | {
        oneofKind: "struct";
        /**
         * * Nested structure
         *
         * @generated from protobuf field: stroppy.Value.Struct struct = 13
         */
        struct: Value_Struct;
    } | {
        oneofKind: "list";
        /**
         * * List of values
         *
         * @generated from protobuf field: stroppy.Value.List list = 14
         */
        list: Value_List;
    } | {
        oneofKind: undefined;
    };
    /**
     * * Field name (used in structs)
     *
     * @generated from protobuf field: string key = 101
     */
    key: string;
}
/**
 * @generated from protobuf message stroppy.Value.List
 */
export interface Value_List {
    /**
     * * List of values
     *
     * @generated from protobuf field: repeated stroppy.Value values = 1
     */
    values: Value[];
}
/**
 * @generated from protobuf message stroppy.Value.Struct
 */
export interface Value_Struct {
    /**
     * * Map of field names to values
     *
     * @generated from protobuf field: repeated stroppy.Value fields = 1
     */
    fields: Value[];
}
/**
 * @generated from protobuf enum stroppy.Value.NullValue
 */
export enum Value_NullValue {
    /**
     * * Null value
     *
     * @generated from protobuf enum value: NULL_VALUE = 0;
     */
    NULL_VALUE = 0
}
/**
 * *
 * Generation contains configuration for generating test data.
 * It provides rules and constraints for generating various types of data.
 *
 * UTF-8 character ranges for different languages
 * Example: {"en": {{65, 90}, {97, 122}}}
 *
 * @generated from protobuf message stroppy.Generation
 */
export interface Generation {
}
/**
 * *
 * Alphabet defines character ranges for string generation.
 *
 * @generated from protobuf message stroppy.Generation.Alphabet
 */
export interface Generation_Alphabet {
    /**
     * * List of character ranges for this alphabet
     *
     * @generated from protobuf field: repeated stroppy.Generation.Range.UInt32Range ranges = 1
     */
    ranges: Generation_Range_UInt32Range[];
}
/**
 * *
 * Distribution defines the statistical distribution for value generation.
 *
 * @generated from protobuf message stroppy.Generation.Distribution
 */
export interface Generation_Distribution {
    /**
     * * Type of distribution to use
     *
     * @generated from protobuf field: stroppy.Generation.Distribution.DistributionType type = 1
     */
    type: Generation_Distribution_DistributionType;
    /**
     * * Distribution parameter (e.g., standard deviation for normal
     * distribution)
     *
     * @generated from protobuf field: double screw = 2
     */
    screw: number;
}
/**
 * @generated from protobuf enum stroppy.Generation.Distribution.DistributionType
 */
export enum Generation_Distribution_DistributionType {
    /**
     * * Normal (Gaussian) distribution
     *
     * @generated from protobuf enum value: NORMAL = 0;
     */
    NORMAL = 0,
    /**
     * * Uniform distribution
     *
     * @generated from protobuf enum value: UNIFORM = 1;
     */
    UNIFORM = 1,
    /**
     * * Zipfian distribution
     *
     * @generated from protobuf enum value: ZIPF = 2;
     */
    ZIPF = 2
}
/**
 * *
 * Range defines value constraints for generation.
 *
 * @generated from protobuf message stroppy.Generation.Range
 */
export interface Generation_Range {
}
/**
 * * Range for string values that can be parsed into other types
 *
 * @generated from protobuf message stroppy.Generation.Range.AnyStringRange
 */
export interface Generation_Range_AnyStringRange {
    /**
     * * Minimum value (inclusive)
     *
     * @generated from protobuf field: string min = 1
     */
    min: string;
    /**
     * * Maximum value (inclusive)
     *
     * @generated from protobuf field: string max = 2
     */
    max: string;
}
/**
 * * Range for 32-bit floating point numbers
 *
 * @generated from protobuf message stroppy.Generation.Range.FloatRange
 */
export interface Generation_Range_FloatRange {
    /**
     * * Minimum value (inclusive)
     *
     * @generated from protobuf field: float min = 1
     */
    min: number;
    /**
     * * Maximum value (inclusive)
     *
     * @generated from protobuf field: float max = 2
     */
    max: number;
}
/**
 * * Range for 64-bit floating point numbers
 *
 * @generated from protobuf message stroppy.Generation.Range.DoubleRange
 */
export interface Generation_Range_DoubleRange {
    /**
     * * Minimum value (inclusive)
     *
     * @generated from protobuf field: double min = 1
     */
    min: number;
    /**
     * * Maximum value (inclusive)
     *
     * @generated from protobuf field: double max = 2
     */
    max: number;
}
/**
 * * Range for 32-bit signed integers
 *
 * @generated from protobuf message stroppy.Generation.Range.Int32Range
 */
export interface Generation_Range_Int32Range {
    /**
     * * Minimum value (inclusive)
     *
     * @generated from protobuf field: int32 min = 1
     */
    min: number;
    /**
     * * Maximum value (inclusive)
     *
     * @generated from protobuf field: int32 max = 2
     */
    max: number;
}
/**
 * * Range for 64-bit signed integers
 *
 * @generated from protobuf message stroppy.Generation.Range.Int64Range
 */
export interface Generation_Range_Int64Range {
    /**
     * * Minimum value (inclusive)
     *
     * @generated from protobuf field: int64 min = 1
     */
    min: string;
    /**
     * * Maximum value (inclusive)
     *
     * @generated from protobuf field: int64 max = 2
     */
    max: string;
}
/**
 * * Range for 32-bit unsigned integers
 *
 * @generated from protobuf message stroppy.Generation.Range.UInt32Range
 */
export interface Generation_Range_UInt32Range {
    /**
     * * Minimum value (inclusive)
     *
     * @generated from protobuf field: uint32 min = 1
     */
    min: number;
    /**
     * * Maximum value (inclusive)
     *
     * @generated from protobuf field: uint32 max = 2
     */
    max: number;
}
/**
 * * Range for 64-bit unsigned integers
 *
 * @generated from protobuf message stroppy.Generation.Range.UInt64Range
 */
export interface Generation_Range_UInt64Range {
    /**
     * * Minimum value (inclusive)
     *
     * @generated from protobuf field: uint64 min = 1
     */
    min: string;
    /**
     * * Maximum value (inclusive)
     *
     * @generated from protobuf field: uint64 max = 2
     */
    max: string;
}
/**
 * * Range for decimal numbers
 *
 * @generated from protobuf message stroppy.Generation.Range.DecimalRange
 */
export interface Generation_Range_DecimalRange {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "default";
        /**
         * * Exact decimal range
         *
         * @generated from protobuf field: stroppy.Generation.Range.DecimalRange.Default default = 1
         */
        default: Generation_Range_DecimalRange_Default;
    } | {
        oneofKind: "float";
        /**
         * * Float-based range
         *
         * @generated from protobuf field: stroppy.Generation.Range.FloatRange float = 2
         */
        float: Generation_Range_FloatRange;
    } | {
        oneofKind: "double";
        /**
         * * Double-based range
         *
         * @generated from protobuf field: stroppy.Generation.Range.DoubleRange double = 3
         */
        double: Generation_Range_DoubleRange;
    } | {
        oneofKind: "string";
        /**
         * * String-based range (supports scientific notation)
         *
         * @generated from protobuf field: stroppy.Generation.Range.AnyStringRange string = 4
         */
        string: Generation_Range_AnyStringRange;
    } | {
        oneofKind: undefined;
    };
}
/**
 * * Default decimal range
 *
 * @generated from protobuf message stroppy.Generation.Range.DecimalRange.Default
 */
export interface Generation_Range_DecimalRange_Default {
    /**
     * * Minimum value (inclusive)
     *
     * @generated from protobuf field: stroppy.Decimal min = 1
     */
    min?: Decimal;
    /**
     * * Maximum value (inclusive)
     *
     * @generated from protobuf field: stroppy.Decimal max = 2
     */
    max?: Decimal;
}
/**
 * * Range for date/time values
 *
 * @generated from protobuf message stroppy.Generation.Range.DateTimeRange
 */
export interface Generation_Range_DateTimeRange {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "default";
        /**
         * * Exact date/time range
         *
         * @generated from protobuf field: stroppy.Generation.Range.DateTimeRange.Default default = 1
         */
        default: Generation_Range_DateTimeRange_Default;
    } | {
        oneofKind: "string";
        /**
         * * String-based range (ISO 8601 format)
         *
         * @generated from protobuf field: stroppy.Generation.Range.AnyStringRange string = 2
         */
        string: Generation_Range_AnyStringRange;
    } | {
        oneofKind: "timestampPb";
        /**
         * * Protocol Buffers timestamp range
         *
         * @generated from protobuf field: stroppy.Generation.Range.DateTimeRange.TimestampPb timestamp_pb = 3
         */
        timestampPb: Generation_Range_DateTimeRange_TimestampPb;
    } | {
        oneofKind: "timestamp";
        /**
         * * Unix timestamp range
         *
         * @generated from protobuf field: stroppy.Generation.Range.DateTimeRange.Timestamp timestamp = 4
         */
        timestamp: Generation_Range_DateTimeRange_Timestamp;
    } | {
        oneofKind: undefined;
    };
}
/**
 * * Default date/time range
 *
 * @generated from protobuf message stroppy.Generation.Range.DateTimeRange.Default
 */
export interface Generation_Range_DateTimeRange_Default {
    /**
     * * Minimum timestamp (inclusive)
     *
     * @generated from protobuf field: stroppy.DateTime min = 1
     */
    min?: DateTime;
    /**
     * * Maximum timestamp (inclusive)
     *
     * @generated from protobuf field: stroppy.DateTime max = 2
     */
    max?: DateTime;
}
/**
 * * Protocol Buffers timestamp range
 *
 * @generated from protobuf message stroppy.Generation.Range.DateTimeRange.TimestampPb
 */
export interface Generation_Range_DateTimeRange_TimestampPb {
    /**
     * * Minimum timestamp (inclusive)
     *
     * @generated from protobuf field: google.protobuf.Timestamp min = 1
     */
    min?: Timestamp;
    /**
     * * Maximum timestamp (inclusive)
     *
     * @generated from protobuf field: google.protobuf.Timestamp max = 2
     */
    max?: Timestamp;
}
/**
 * * Unix timestamp range
 *
 * @generated from protobuf message stroppy.Generation.Range.DateTimeRange.Timestamp
 */
export interface Generation_Range_DateTimeRange_Timestamp {
    /**
     * * Minimum Unix timestamp (inclusive)
     *
     * @generated from protobuf field: uint32 min = 1
     */
    min: number;
    /**
     * * Maximum Unix timestamp (inclusive)
     *
     * @generated from protobuf field: uint32 max = 2
     */
    max: number;
}
/**
 * *
 * Rules contains type-specific generation configurations.
 *
 * @generated from protobuf message stroppy.Generation.Rules
 */
export interface Generation_Rules {
}
/**
 * * Rules for generating 32-bit floating point numbers
 *
 * @generated from protobuf message stroppy.Generation.Rules.FloatRule
 */
export interface Generation_Rules_FloatRule {
    /**
     * * Valid value range
     *
     * @generated from protobuf field: stroppy.Generation.Range.FloatRange range = 1
     */
    range?: Generation_Range_FloatRange;
    /**
     * * Fixed value (if specified, overrides range)
     *
     * @generated from protobuf field: optional float constant = 2
     */
    constant?: number;
}
/**
 * * Rules for generating 64-bit floating point numbers
 *
 * @generated from protobuf message stroppy.Generation.Rules.DoubleRule
 */
export interface Generation_Rules_DoubleRule {
    /**
     * * Valid value range
     *
     * @generated from protobuf field: stroppy.Generation.Range.DoubleRange range = 1
     */
    range?: Generation_Range_DoubleRange;
    /**
     * * Fixed value (if specified, overrides range)
     *
     * @generated from protobuf field: optional double constant = 2
     */
    constant?: number;
}
/**
 * * Rules for generating 32-bit signed integers
 *
 * @generated from protobuf message stroppy.Generation.Rules.Int32Rule
 */
export interface Generation_Rules_Int32Rule {
    /**
     * * Valid value range
     *
     * @generated from protobuf field: stroppy.Generation.Range.Int32Range range = 1
     */
    range?: Generation_Range_Int32Range;
    /**
     * * Fixed value (if specified, overrides range)
     *
     * @generated from protobuf field: optional int32 constant = 2
     */
    constant?: number;
}
/**
 * * Rules for generating 64-bit signed integers
 *
 * @generated from protobuf message stroppy.Generation.Rules.Int64Rule
 */
export interface Generation_Rules_Int64Rule {
    /**
     * * Valid value range
     *
     * @generated from protobuf field: stroppy.Generation.Range.Int64Range range = 1
     */
    range?: Generation_Range_Int64Range;
    /**
     * * Fixed value (if specified, overrides range)
     *
     * @generated from protobuf field: optional int64 constant = 2
     */
    constant?: string;
}
/**
 * * Rules for generating 32-bit unsigned integers
 *
 * @generated from protobuf message stroppy.Generation.Rules.UInt32Rule
 */
export interface Generation_Rules_UInt32Rule {
    /**
     * * Valid value range
     *
     * @generated from protobuf field: stroppy.Generation.Range.UInt32Range range = 1
     */
    range?: Generation_Range_UInt32Range;
    /**
     * * Fixed value (if specified, overrides range)
     *
     * @generated from protobuf field: optional uint32 constant = 2
     */
    constant?: number;
}
/**
 * * Rules for generating 64-bit unsigned integers
 *
 * @generated from protobuf message stroppy.Generation.Rules.UInt64Rule
 */
export interface Generation_Rules_UInt64Rule {
    /**
     * * Valid value range
     *
     * @generated from protobuf field: stroppy.Generation.Range.UInt64Range range = 1
     */
    range?: Generation_Range_UInt64Range;
    /**
     * * Fixed value (if specified, overrides range)
     *
     * @generated from protobuf field: optional uint64 constant = 2
     */
    constant?: string;
}
/**
 * * Rules for generating boolean values
 *
 * @generated from protobuf message stroppy.Generation.Rules.BoolRule
 */
export interface Generation_Rules_BoolRule {
    /**
     * * Fixed value (if not specified, generates random booleans)
     *
     * @generated from protobuf field: optional bool constant = 1
     */
    constant?: boolean;
}
/**
 * * Rules for generating string values
 *
 * @generated from protobuf message stroppy.Generation.Rules.StringRule
 */
export interface Generation_Rules_StringRule {
    /**
     * * Character set to use for generation
     *
     * @generated from protobuf field: optional stroppy.Generation.Alphabet alphabet = 1
     */
    alphabet?: Generation_Alphabet;
    /**
     * * Valid length range for the string
     *
     * @generated from protobuf field: stroppy.Generation.Range.UInt64Range len_range = 2
     */
    lenRange?: Generation_Range_UInt64Range;
    /**
     * * Fixed value (if specified, overrides generation)
     *
     * @generated from protobuf field: optional string constant = 3
     */
    constant?: string;
}
/**
 * * Rules for generating date/time values
 *
 * @generated from protobuf message stroppy.Generation.Rules.DateTimeRule
 */
export interface Generation_Rules_DateTimeRule {
    /**
     * * Valid time range
     *
     * @generated from protobuf field: stroppy.Generation.Range.DateTimeRange range = 1
     */
    range?: Generation_Range_DateTimeRange;
    /**
     * * Fixed value (if specified, overrides range)
     *
     * @generated from protobuf field: optional stroppy.DateTime constant = 2
     */
    constant?: DateTime;
}
/**
 * * Rules for generating UUIDs
 *
 * @generated from protobuf message stroppy.Generation.Rules.UuidRule
 */
export interface Generation_Rules_UuidRule {
    /**
     * * Fixed UUID (if not specified, generates random UUIDs)
     *
     * @generated from protobuf field: optional stroppy.Uuid constant = 1
     */
    constant?: Uuid;
}
/**
 * * Rules for generating decimal numbers
 *
 * @generated from protobuf message stroppy.Generation.Rules.DecimalRule
 */
export interface Generation_Rules_DecimalRule {
    /**
     * * Valid value range
     *
     * @generated from protobuf field: stroppy.Generation.Range.DecimalRange range = 1
     */
    range?: Generation_Range_DecimalRange;
    /**
     * * Fixed value (if specified, overrides range)
     *
     * @generated from protobuf field: optional stroppy.Decimal constant = 2
     */
    constant?: Decimal;
}
/**
 * *
 * Rule defines generation rules for a specific data type.
 *
 * @generated from protobuf message stroppy.Generation.Rule
 */
export interface Generation_Rule {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "floatRules";
        /**
         * * Rules for 32-bit floating point numbers
         *
         * @generated from protobuf field: stroppy.Generation.Rules.FloatRule float_rules = 1
         */
        floatRules: Generation_Rules_FloatRule;
    } | {
        oneofKind: "doubleRules";
        /**
         * * Rules for 64-bit floating point numbers
         *
         * @generated from protobuf field: stroppy.Generation.Rules.DoubleRule double_rules = 2
         */
        doubleRules: Generation_Rules_DoubleRule;
    } | {
        oneofKind: "int32Rules";
        /**
         * * Rules for 32-bit signed integers
         *
         * @generated from protobuf field: stroppy.Generation.Rules.Int32Rule int32_rules = 3
         */
        int32Rules: Generation_Rules_Int32Rule;
    } | {
        oneofKind: "int64Rules";
        /**
         * * Rules for 64-bit signed integers
         *
         * @generated from protobuf field: stroppy.Generation.Rules.Int64Rule int64_rules = 4
         */
        int64Rules: Generation_Rules_Int64Rule;
    } | {
        oneofKind: "uint32Rules";
        /**
         * * Rules for 32-bit unsigned integers
         *
         * @generated from protobuf field: stroppy.Generation.Rules.UInt32Rule uint32_rules = 5
         */
        uint32Rules: Generation_Rules_UInt32Rule;
    } | {
        oneofKind: "uint64Rules";
        /**
         * * Rules for 64-bit unsigned integers
         *
         * @generated from protobuf field: stroppy.Generation.Rules.UInt64Rule uint64_rules = 6
         */
        uint64Rules: Generation_Rules_UInt64Rule;
    } | {
        oneofKind: "boolRules";
        /**
         * * Rules for boolean values
         *
         * @generated from protobuf field: stroppy.Generation.Rules.BoolRule bool_rules = 13
         */
        boolRules: Generation_Rules_BoolRule;
    } | {
        oneofKind: "stringRules";
        /**
         * * Rules for string values
         *
         * @generated from protobuf field: stroppy.Generation.Rules.StringRule string_rules = 14
         */
        stringRules: Generation_Rules_StringRule;
    } | {
        oneofKind: "datetimeRules";
        /**
         * * Rules for date/time values
         *
         * @generated from protobuf field: stroppy.Generation.Rules.DateTimeRule datetime_rules = 101
         */
        datetimeRules: Generation_Rules_DateTimeRule;
    } | {
        oneofKind: "uuidRules";
        /**
         * * Rules for UUIDs
         *
         * @generated from protobuf field: stroppy.Generation.Rules.UuidRule uuid_rules = 102
         */
        uuidRules: Generation_Rules_UuidRule;
    } | {
        oneofKind: "decimalRules";
        /**
         * * Rules for decimal numbers
         *
         * @generated from protobuf field: stroppy.Generation.Rules.DecimalRule decimal_rules = 103
         */
        decimalRules: Generation_Rules_DecimalRule;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: optional stroppy.Generation.Distribution distribution = 1000
     */
    distribution?: Generation_Distribution;
    /**
     * @generated from protobuf field: optional uint32 null_percentage = 1001
     */
    nullPercentage?: number;
    /**
     * @generated from protobuf field: optional bool unique = 1002
     */
    unique?: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class OtlpExport$Type extends MessageType<OtlpExport> {
    constructor() {
        super("stroppy.OtlpExport", [
            { no: 1, name: "otlp_grpc_endpoint", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "otlp_http_endpoint", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "otlp_http_exporter_url_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "otlp_endpoint_insecure", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "otlp_headers", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "otlp_metrics_prefix", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OtlpExport>): OtlpExport {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<OtlpExport>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OtlpExport): OtlpExport {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string otlp_grpc_endpoint */ 1:
                    message.otlpGrpcEndpoint = reader.string();
                    break;
                case /* optional string otlp_http_endpoint */ 3:
                    message.otlpHttpEndpoint = reader.string();
                    break;
                case /* optional string otlp_http_exporter_url_path */ 4:
                    message.otlpHttpExporterUrlPath = reader.string();
                    break;
                case /* optional bool otlp_endpoint_insecure */ 5:
                    message.otlpEndpointInsecure = reader.bool();
                    break;
                case /* optional string otlp_headers */ 6:
                    message.otlpHeaders = reader.string();
                    break;
                case /* optional string otlp_metrics_prefix */ 2:
                    message.otlpMetricsPrefix = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OtlpExport, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string otlp_grpc_endpoint = 1; */
        if (message.otlpGrpcEndpoint !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.otlpGrpcEndpoint);
        /* optional string otlp_metrics_prefix = 2; */
        if (message.otlpMetricsPrefix !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.otlpMetricsPrefix);
        /* optional string otlp_http_endpoint = 3; */
        if (message.otlpHttpEndpoint !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.otlpHttpEndpoint);
        /* optional string otlp_http_exporter_url_path = 4; */
        if (message.otlpHttpExporterUrlPath !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.otlpHttpExporterUrlPath);
        /* optional bool otlp_endpoint_insecure = 5; */
        if (message.otlpEndpointInsecure !== undefined)
            writer.tag(5, WireType.Varint).bool(message.otlpEndpointInsecure);
        /* optional string otlp_headers = 6; */
        if (message.otlpHeaders !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.otlpHeaders);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.OtlpExport
 */
export const OtlpExport = new OtlpExport$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Decimal$Type extends MessageType<Decimal> {
    constructor() {
        super("stroppy.Decimal", [
            { no: 1, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Decimal>): Decimal {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<Decimal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Decimal): Decimal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string value */ 1:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Decimal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string value = 1; */
        if (message.value !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Decimal
 */
export const Decimal = new Decimal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Uuid$Type extends MessageType<Uuid> {
    constructor() {
        super("stroppy.Uuid", [
            { no: 1, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Uuid>): Uuid {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<Uuid>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Uuid): Uuid {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string value */ 1:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Uuid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string value = 1; */
        if (message.value !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Uuid
 */
export const Uuid = new Uuid$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DateTime$Type extends MessageType<DateTime> {
    constructor() {
        super("stroppy.DateTime", [
            { no: 1, name: "value", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<DateTime>): DateTime {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DateTime>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DateTime): DateTime {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp value */ 1:
                    message.value = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.value);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DateTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp value = 1; */
        if (message.value)
            Timestamp.internalBinaryWrite(message.value, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.DateTime
 */
export const DateTime = new DateTime$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Value$Type extends MessageType<Value> {
    constructor() {
        super("stroppy.Value", [
            { no: 1, name: "null", kind: "enum", oneof: "type", T: () => ["stroppy.Value.NullValue", Value_NullValue] },
            { no: 2, name: "int32", kind: "scalar", oneof: "type", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "uint32", kind: "scalar", oneof: "type", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "int64", kind: "scalar", oneof: "type", T: 3 /*ScalarType.INT64*/ },
            { no: 5, name: "uint64", kind: "scalar", oneof: "type", T: 4 /*ScalarType.UINT64*/ },
            { no: 6, name: "float", kind: "scalar", oneof: "type", T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "double", kind: "scalar", oneof: "type", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 8, name: "string", kind: "scalar", oneof: "type", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "bool", kind: "scalar", oneof: "type", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "decimal", kind: "message", oneof: "type", T: () => Decimal },
            { no: 11, name: "uuid", kind: "message", oneof: "type", T: () => Uuid },
            { no: 12, name: "datetime", kind: "message", oneof: "type", T: () => DateTime },
            { no: 13, name: "struct", kind: "message", oneof: "type", T: () => Value_Struct },
            { no: 14, name: "list", kind: "message", oneof: "type", T: () => Value_List },
            { no: 101, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Value>): Value {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        message.key = "";
        if (value !== undefined)
            reflectionMergePartial<Value>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Value): Value {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stroppy.Value.NullValue null */ 1:
                    message.type = {
                        oneofKind: "null",
                        null: reader.int32()
                    };
                    break;
                case /* int32 int32 */ 2:
                    message.type = {
                        oneofKind: "int32",
                        int32: reader.int32()
                    };
                    break;
                case /* uint32 uint32 */ 3:
                    message.type = {
                        oneofKind: "uint32",
                        uint32: reader.uint32()
                    };
                    break;
                case /* int64 int64 */ 4:
                    message.type = {
                        oneofKind: "int64",
                        int64: reader.int64().toString()
                    };
                    break;
                case /* uint64 uint64 */ 5:
                    message.type = {
                        oneofKind: "uint64",
                        uint64: reader.uint64().toString()
                    };
                    break;
                case /* float float */ 6:
                    message.type = {
                        oneofKind: "float",
                        float: reader.float()
                    };
                    break;
                case /* double double */ 7:
                    message.type = {
                        oneofKind: "double",
                        double: reader.double()
                    };
                    break;
                case /* string string */ 8:
                    message.type = {
                        oneofKind: "string",
                        string: reader.string()
                    };
                    break;
                case /* bool bool */ 9:
                    message.type = {
                        oneofKind: "bool",
                        bool: reader.bool()
                    };
                    break;
                case /* stroppy.Decimal decimal */ 10:
                    message.type = {
                        oneofKind: "decimal",
                        decimal: Decimal.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).decimal)
                    };
                    break;
                case /* stroppy.Uuid uuid */ 11:
                    message.type = {
                        oneofKind: "uuid",
                        uuid: Uuid.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).uuid)
                    };
                    break;
                case /* stroppy.DateTime datetime */ 12:
                    message.type = {
                        oneofKind: "datetime",
                        datetime: DateTime.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).datetime)
                    };
                    break;
                case /* stroppy.Value.Struct struct */ 13:
                    message.type = {
                        oneofKind: "struct",
                        struct: Value_Struct.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).struct)
                    };
                    break;
                case /* stroppy.Value.List list */ 14:
                    message.type = {
                        oneofKind: "list",
                        list: Value_List.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).list)
                    };
                    break;
                case /* string key */ 101:
                    message.key = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Value, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stroppy.Value.NullValue null = 1; */
        if (message.type.oneofKind === "null")
            writer.tag(1, WireType.Varint).int32(message.type.null);
        /* int32 int32 = 2; */
        if (message.type.oneofKind === "int32")
            writer.tag(2, WireType.Varint).int32(message.type.int32);
        /* uint32 uint32 = 3; */
        if (message.type.oneofKind === "uint32")
            writer.tag(3, WireType.Varint).uint32(message.type.uint32);
        /* int64 int64 = 4; */
        if (message.type.oneofKind === "int64")
            writer.tag(4, WireType.Varint).int64(message.type.int64);
        /* uint64 uint64 = 5; */
        if (message.type.oneofKind === "uint64")
            writer.tag(5, WireType.Varint).uint64(message.type.uint64);
        /* float float = 6; */
        if (message.type.oneofKind === "float")
            writer.tag(6, WireType.Bit32).float(message.type.float);
        /* double double = 7; */
        if (message.type.oneofKind === "double")
            writer.tag(7, WireType.Bit64).double(message.type.double);
        /* string string = 8; */
        if (message.type.oneofKind === "string")
            writer.tag(8, WireType.LengthDelimited).string(message.type.string);
        /* bool bool = 9; */
        if (message.type.oneofKind === "bool")
            writer.tag(9, WireType.Varint).bool(message.type.bool);
        /* stroppy.Decimal decimal = 10; */
        if (message.type.oneofKind === "decimal")
            Decimal.internalBinaryWrite(message.type.decimal, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.Uuid uuid = 11; */
        if (message.type.oneofKind === "uuid")
            Uuid.internalBinaryWrite(message.type.uuid, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.DateTime datetime = 12; */
        if (message.type.oneofKind === "datetime")
            DateTime.internalBinaryWrite(message.type.datetime, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.Value.Struct struct = 13; */
        if (message.type.oneofKind === "struct")
            Value_Struct.internalBinaryWrite(message.type.struct, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.Value.List list = 14; */
        if (message.type.oneofKind === "list")
            Value_List.internalBinaryWrite(message.type.list, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* string key = 101; */
        if (message.key !== "")
            writer.tag(101, WireType.LengthDelimited).string(message.key);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Value
 */
export const Value = new Value$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Value_List$Type extends MessageType<Value_List> {
    constructor() {
        super("stroppy.Value.List", [
            { no: 1, name: "values", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Value }
        ]);
    }
    create(value?: PartialMessage<Value_List>): Value_List {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.values = [];
        if (value !== undefined)
            reflectionMergePartial<Value_List>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Value_List): Value_List {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated stroppy.Value values */ 1:
                    message.values.push(Value.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Value_List, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated stroppy.Value values = 1; */
        for (let i = 0; i < message.values.length; i++)
            Value.internalBinaryWrite(message.values[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Value.List
 */
export const Value_List = new Value_List$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Value_Struct$Type extends MessageType<Value_Struct> {
    constructor() {
        super("stroppy.Value.Struct", [
            { no: 1, name: "fields", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Value }
        ]);
    }
    create(value?: PartialMessage<Value_Struct>): Value_Struct {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fields = [];
        if (value !== undefined)
            reflectionMergePartial<Value_Struct>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Value_Struct): Value_Struct {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated stroppy.Value fields */ 1:
                    message.fields.push(Value.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Value_Struct, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated stroppy.Value fields = 1; */
        for (let i = 0; i < message.fields.length; i++)
            Value.internalBinaryWrite(message.fields[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Value.Struct
 */
export const Value_Struct = new Value_Struct$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation$Type extends MessageType<Generation> {
    constructor() {
        super("stroppy.Generation", []);
    }
    create(value?: PartialMessage<Generation>): Generation {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Generation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation): Generation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation
 */
export const Generation = new Generation$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Alphabet$Type extends MessageType<Generation_Alphabet> {
    constructor() {
        super("stroppy.Generation.Alphabet", [
            { no: 1, name: "ranges", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Generation_Range_UInt32Range }
        ]);
    }
    create(value?: PartialMessage<Generation_Alphabet>): Generation_Alphabet {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ranges = [];
        if (value !== undefined)
            reflectionMergePartial<Generation_Alphabet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Alphabet): Generation_Alphabet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated stroppy.Generation.Range.UInt32Range ranges */ 1:
                    message.ranges.push(Generation_Range_UInt32Range.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Alphabet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated stroppy.Generation.Range.UInt32Range ranges = 1; */
        for (let i = 0; i < message.ranges.length; i++)
            Generation_Range_UInt32Range.internalBinaryWrite(message.ranges[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Alphabet
 */
export const Generation_Alphabet = new Generation_Alphabet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Distribution$Type extends MessageType<Generation_Distribution> {
    constructor() {
        super("stroppy.Generation.Distribution", [
            { no: 1, name: "type", kind: "enum", T: () => ["stroppy.Generation.Distribution.DistributionType", Generation_Distribution_DistributionType] },
            { no: 2, name: "screw", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<Generation_Distribution>): Generation_Distribution {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.screw = 0;
        if (value !== undefined)
            reflectionMergePartial<Generation_Distribution>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Distribution): Generation_Distribution {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stroppy.Generation.Distribution.DistributionType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* double screw */ 2:
                    message.screw = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Distribution, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stroppy.Generation.Distribution.DistributionType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* double screw = 2; */
        if (message.screw !== 0)
            writer.tag(2, WireType.Bit64).double(message.screw);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Distribution
 */
export const Generation_Distribution = new Generation_Distribution$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Range$Type extends MessageType<Generation_Range> {
    constructor() {
        super("stroppy.Generation.Range", []);
    }
    create(value?: PartialMessage<Generation_Range>): Generation_Range {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Generation_Range>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Range): Generation_Range {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Range, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Range
 */
export const Generation_Range = new Generation_Range$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Range_AnyStringRange$Type extends MessageType<Generation_Range_AnyStringRange> {
    constructor() {
        super("stroppy.Generation.Range.AnyStringRange", [
            { no: 1, name: "min", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "max", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Generation_Range_AnyStringRange>): Generation_Range_AnyStringRange {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.min = "";
        message.max = "";
        if (value !== undefined)
            reflectionMergePartial<Generation_Range_AnyStringRange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Range_AnyStringRange): Generation_Range_AnyStringRange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string min */ 1:
                    message.min = reader.string();
                    break;
                case /* string max */ 2:
                    message.max = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Range_AnyStringRange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string min = 1; */
        if (message.min !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.min);
        /* string max = 2; */
        if (message.max !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.max);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Range.AnyStringRange
 */
export const Generation_Range_AnyStringRange = new Generation_Range_AnyStringRange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Range_FloatRange$Type extends MessageType<Generation_Range_FloatRange> {
    constructor() {
        super("stroppy.Generation.Range.FloatRange", [
            { no: 1, name: "min", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 2, name: "max", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<Generation_Range_FloatRange>): Generation_Range_FloatRange {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.min = 0;
        message.max = 0;
        if (value !== undefined)
            reflectionMergePartial<Generation_Range_FloatRange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Range_FloatRange): Generation_Range_FloatRange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* float min */ 1:
                    message.min = reader.float();
                    break;
                case /* float max */ 2:
                    message.max = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Range_FloatRange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* float min = 1; */
        if (message.min !== 0)
            writer.tag(1, WireType.Bit32).float(message.min);
        /* float max = 2; */
        if (message.max !== 0)
            writer.tag(2, WireType.Bit32).float(message.max);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Range.FloatRange
 */
export const Generation_Range_FloatRange = new Generation_Range_FloatRange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Range_DoubleRange$Type extends MessageType<Generation_Range_DoubleRange> {
    constructor() {
        super("stroppy.Generation.Range.DoubleRange", [
            { no: 1, name: "min", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 2, name: "max", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<Generation_Range_DoubleRange>): Generation_Range_DoubleRange {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.min = 0;
        message.max = 0;
        if (value !== undefined)
            reflectionMergePartial<Generation_Range_DoubleRange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Range_DoubleRange): Generation_Range_DoubleRange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* double min */ 1:
                    message.min = reader.double();
                    break;
                case /* double max */ 2:
                    message.max = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Range_DoubleRange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* double min = 1; */
        if (message.min !== 0)
            writer.tag(1, WireType.Bit64).double(message.min);
        /* double max = 2; */
        if (message.max !== 0)
            writer.tag(2, WireType.Bit64).double(message.max);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Range.DoubleRange
 */
export const Generation_Range_DoubleRange = new Generation_Range_DoubleRange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Range_Int32Range$Type extends MessageType<Generation_Range_Int32Range> {
    constructor() {
        super("stroppy.Generation.Range.Int32Range", [
            { no: 1, name: "min", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "max", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Generation_Range_Int32Range>): Generation_Range_Int32Range {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.min = 0;
        message.max = 0;
        if (value !== undefined)
            reflectionMergePartial<Generation_Range_Int32Range>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Range_Int32Range): Generation_Range_Int32Range {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 min */ 1:
                    message.min = reader.int32();
                    break;
                case /* int32 max */ 2:
                    message.max = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Range_Int32Range, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 min = 1; */
        if (message.min !== 0)
            writer.tag(1, WireType.Varint).int32(message.min);
        /* int32 max = 2; */
        if (message.max !== 0)
            writer.tag(2, WireType.Varint).int32(message.max);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Range.Int32Range
 */
export const Generation_Range_Int32Range = new Generation_Range_Int32Range$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Range_Int64Range$Type extends MessageType<Generation_Range_Int64Range> {
    constructor() {
        super("stroppy.Generation.Range.Int64Range", [
            { no: 1, name: "min", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 2, name: "max", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<Generation_Range_Int64Range>): Generation_Range_Int64Range {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.min = "0";
        message.max = "0";
        if (value !== undefined)
            reflectionMergePartial<Generation_Range_Int64Range>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Range_Int64Range): Generation_Range_Int64Range {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 min */ 1:
                    message.min = reader.int64().toString();
                    break;
                case /* int64 max */ 2:
                    message.max = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Range_Int64Range, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 min = 1; */
        if (message.min !== "0")
            writer.tag(1, WireType.Varint).int64(message.min);
        /* int64 max = 2; */
        if (message.max !== "0")
            writer.tag(2, WireType.Varint).int64(message.max);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Range.Int64Range
 */
export const Generation_Range_Int64Range = new Generation_Range_Int64Range$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Range_UInt32Range$Type extends MessageType<Generation_Range_UInt32Range> {
    constructor() {
        super("stroppy.Generation.Range.UInt32Range", [
            { no: 1, name: "min", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "max", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Generation_Range_UInt32Range>): Generation_Range_UInt32Range {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.min = 0;
        message.max = 0;
        if (value !== undefined)
            reflectionMergePartial<Generation_Range_UInt32Range>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Range_UInt32Range): Generation_Range_UInt32Range {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 min */ 1:
                    message.min = reader.uint32();
                    break;
                case /* uint32 max */ 2:
                    message.max = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Range_UInt32Range, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 min = 1; */
        if (message.min !== 0)
            writer.tag(1, WireType.Varint).uint32(message.min);
        /* uint32 max = 2; */
        if (message.max !== 0)
            writer.tag(2, WireType.Varint).uint32(message.max);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Range.UInt32Range
 */
export const Generation_Range_UInt32Range = new Generation_Range_UInt32Range$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Range_UInt64Range$Type extends MessageType<Generation_Range_UInt64Range> {
    constructor() {
        super("stroppy.Generation.Range.UInt64Range", [
            { no: 1, name: "min", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 2, name: "max", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<Generation_Range_UInt64Range>): Generation_Range_UInt64Range {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.min = "0";
        message.max = "0";
        if (value !== undefined)
            reflectionMergePartial<Generation_Range_UInt64Range>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Range_UInt64Range): Generation_Range_UInt64Range {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 min */ 1:
                    message.min = reader.uint64().toString();
                    break;
                case /* uint64 max */ 2:
                    message.max = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Range_UInt64Range, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 min = 1; */
        if (message.min !== "0")
            writer.tag(1, WireType.Varint).uint64(message.min);
        /* uint64 max = 2; */
        if (message.max !== "0")
            writer.tag(2, WireType.Varint).uint64(message.max);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Range.UInt64Range
 */
export const Generation_Range_UInt64Range = new Generation_Range_UInt64Range$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Range_DecimalRange$Type extends MessageType<Generation_Range_DecimalRange> {
    constructor() {
        super("stroppy.Generation.Range.DecimalRange", [
            { no: 1, name: "default", kind: "message", oneof: "type", T: () => Generation_Range_DecimalRange_Default },
            { no: 2, name: "float", kind: "message", oneof: "type", T: () => Generation_Range_FloatRange },
            { no: 3, name: "double", kind: "message", oneof: "type", T: () => Generation_Range_DoubleRange },
            { no: 4, name: "string", kind: "message", oneof: "type", T: () => Generation_Range_AnyStringRange }
        ]);
    }
    create(value?: PartialMessage<Generation_Range_DecimalRange>): Generation_Range_DecimalRange {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Generation_Range_DecimalRange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Range_DecimalRange): Generation_Range_DecimalRange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stroppy.Generation.Range.DecimalRange.Default default */ 1:
                    message.type = {
                        oneofKind: "default",
                        default: Generation_Range_DecimalRange_Default.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).default)
                    };
                    break;
                case /* stroppy.Generation.Range.FloatRange float */ 2:
                    message.type = {
                        oneofKind: "float",
                        float: Generation_Range_FloatRange.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).float)
                    };
                    break;
                case /* stroppy.Generation.Range.DoubleRange double */ 3:
                    message.type = {
                        oneofKind: "double",
                        double: Generation_Range_DoubleRange.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).double)
                    };
                    break;
                case /* stroppy.Generation.Range.AnyStringRange string */ 4:
                    message.type = {
                        oneofKind: "string",
                        string: Generation_Range_AnyStringRange.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).string)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Range_DecimalRange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stroppy.Generation.Range.DecimalRange.Default default = 1; */
        if (message.type.oneofKind === "default")
            Generation_Range_DecimalRange_Default.internalBinaryWrite(message.type.default, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.Generation.Range.FloatRange float = 2; */
        if (message.type.oneofKind === "float")
            Generation_Range_FloatRange.internalBinaryWrite(message.type.float, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.Generation.Range.DoubleRange double = 3; */
        if (message.type.oneofKind === "double")
            Generation_Range_DoubleRange.internalBinaryWrite(message.type.double, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.Generation.Range.AnyStringRange string = 4; */
        if (message.type.oneofKind === "string")
            Generation_Range_AnyStringRange.internalBinaryWrite(message.type.string, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Range.DecimalRange
 */
export const Generation_Range_DecimalRange = new Generation_Range_DecimalRange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Range_DecimalRange_Default$Type extends MessageType<Generation_Range_DecimalRange_Default> {
    constructor() {
        super("stroppy.Generation.Range.DecimalRange.Default", [
            { no: 1, name: "min", kind: "message", T: () => Decimal },
            { no: 2, name: "max", kind: "message", T: () => Decimal }
        ]);
    }
    create(value?: PartialMessage<Generation_Range_DecimalRange_Default>): Generation_Range_DecimalRange_Default {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Generation_Range_DecimalRange_Default>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Range_DecimalRange_Default): Generation_Range_DecimalRange_Default {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stroppy.Decimal min */ 1:
                    message.min = Decimal.internalBinaryRead(reader, reader.uint32(), options, message.min);
                    break;
                case /* stroppy.Decimal max */ 2:
                    message.max = Decimal.internalBinaryRead(reader, reader.uint32(), options, message.max);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Range_DecimalRange_Default, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stroppy.Decimal min = 1; */
        if (message.min)
            Decimal.internalBinaryWrite(message.min, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.Decimal max = 2; */
        if (message.max)
            Decimal.internalBinaryWrite(message.max, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Range.DecimalRange.Default
 */
export const Generation_Range_DecimalRange_Default = new Generation_Range_DecimalRange_Default$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Range_DateTimeRange$Type extends MessageType<Generation_Range_DateTimeRange> {
    constructor() {
        super("stroppy.Generation.Range.DateTimeRange", [
            { no: 1, name: "default", kind: "message", oneof: "type", T: () => Generation_Range_DateTimeRange_Default },
            { no: 2, name: "string", kind: "message", oneof: "type", T: () => Generation_Range_AnyStringRange },
            { no: 3, name: "timestamp_pb", kind: "message", oneof: "type", T: () => Generation_Range_DateTimeRange_TimestampPb },
            { no: 4, name: "timestamp", kind: "message", oneof: "type", T: () => Generation_Range_DateTimeRange_Timestamp }
        ]);
    }
    create(value?: PartialMessage<Generation_Range_DateTimeRange>): Generation_Range_DateTimeRange {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Generation_Range_DateTimeRange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Range_DateTimeRange): Generation_Range_DateTimeRange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stroppy.Generation.Range.DateTimeRange.Default default */ 1:
                    message.type = {
                        oneofKind: "default",
                        default: Generation_Range_DateTimeRange_Default.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).default)
                    };
                    break;
                case /* stroppy.Generation.Range.AnyStringRange string */ 2:
                    message.type = {
                        oneofKind: "string",
                        string: Generation_Range_AnyStringRange.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).string)
                    };
                    break;
                case /* stroppy.Generation.Range.DateTimeRange.TimestampPb timestamp_pb */ 3:
                    message.type = {
                        oneofKind: "timestampPb",
                        timestampPb: Generation_Range_DateTimeRange_TimestampPb.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).timestampPb)
                    };
                    break;
                case /* stroppy.Generation.Range.DateTimeRange.Timestamp timestamp */ 4:
                    message.type = {
                        oneofKind: "timestamp",
                        timestamp: Generation_Range_DateTimeRange_Timestamp.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).timestamp)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Range_DateTimeRange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stroppy.Generation.Range.DateTimeRange.Default default = 1; */
        if (message.type.oneofKind === "default")
            Generation_Range_DateTimeRange_Default.internalBinaryWrite(message.type.default, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.Generation.Range.AnyStringRange string = 2; */
        if (message.type.oneofKind === "string")
            Generation_Range_AnyStringRange.internalBinaryWrite(message.type.string, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.Generation.Range.DateTimeRange.TimestampPb timestamp_pb = 3; */
        if (message.type.oneofKind === "timestampPb")
            Generation_Range_DateTimeRange_TimestampPb.internalBinaryWrite(message.type.timestampPb, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.Generation.Range.DateTimeRange.Timestamp timestamp = 4; */
        if (message.type.oneofKind === "timestamp")
            Generation_Range_DateTimeRange_Timestamp.internalBinaryWrite(message.type.timestamp, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Range.DateTimeRange
 */
export const Generation_Range_DateTimeRange = new Generation_Range_DateTimeRange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Range_DateTimeRange_Default$Type extends MessageType<Generation_Range_DateTimeRange_Default> {
    constructor() {
        super("stroppy.Generation.Range.DateTimeRange.Default", [
            { no: 1, name: "min", kind: "message", T: () => DateTime },
            { no: 2, name: "max", kind: "message", T: () => DateTime }
        ]);
    }
    create(value?: PartialMessage<Generation_Range_DateTimeRange_Default>): Generation_Range_DateTimeRange_Default {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Generation_Range_DateTimeRange_Default>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Range_DateTimeRange_Default): Generation_Range_DateTimeRange_Default {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stroppy.DateTime min */ 1:
                    message.min = DateTime.internalBinaryRead(reader, reader.uint32(), options, message.min);
                    break;
                case /* stroppy.DateTime max */ 2:
                    message.max = DateTime.internalBinaryRead(reader, reader.uint32(), options, message.max);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Range_DateTimeRange_Default, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stroppy.DateTime min = 1; */
        if (message.min)
            DateTime.internalBinaryWrite(message.min, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.DateTime max = 2; */
        if (message.max)
            DateTime.internalBinaryWrite(message.max, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Range.DateTimeRange.Default
 */
export const Generation_Range_DateTimeRange_Default = new Generation_Range_DateTimeRange_Default$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Range_DateTimeRange_TimestampPb$Type extends MessageType<Generation_Range_DateTimeRange_TimestampPb> {
    constructor() {
        super("stroppy.Generation.Range.DateTimeRange.TimestampPb", [
            { no: 1, name: "min", kind: "message", T: () => Timestamp },
            { no: 2, name: "max", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Generation_Range_DateTimeRange_TimestampPb>): Generation_Range_DateTimeRange_TimestampPb {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Generation_Range_DateTimeRange_TimestampPb>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Range_DateTimeRange_TimestampPb): Generation_Range_DateTimeRange_TimestampPb {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Timestamp min */ 1:
                    message.min = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.min);
                    break;
                case /* google.protobuf.Timestamp max */ 2:
                    message.max = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.max);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Range_DateTimeRange_TimestampPb, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Timestamp min = 1; */
        if (message.min)
            Timestamp.internalBinaryWrite(message.min, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp max = 2; */
        if (message.max)
            Timestamp.internalBinaryWrite(message.max, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Range.DateTimeRange.TimestampPb
 */
export const Generation_Range_DateTimeRange_TimestampPb = new Generation_Range_DateTimeRange_TimestampPb$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Range_DateTimeRange_Timestamp$Type extends MessageType<Generation_Range_DateTimeRange_Timestamp> {
    constructor() {
        super("stroppy.Generation.Range.DateTimeRange.Timestamp", [
            { no: 1, name: "min", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "max", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Generation_Range_DateTimeRange_Timestamp>): Generation_Range_DateTimeRange_Timestamp {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.min = 0;
        message.max = 0;
        if (value !== undefined)
            reflectionMergePartial<Generation_Range_DateTimeRange_Timestamp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Range_DateTimeRange_Timestamp): Generation_Range_DateTimeRange_Timestamp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 min */ 1:
                    message.min = reader.uint32();
                    break;
                case /* uint32 max */ 2:
                    message.max = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Range_DateTimeRange_Timestamp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 min = 1; */
        if (message.min !== 0)
            writer.tag(1, WireType.Varint).uint32(message.min);
        /* uint32 max = 2; */
        if (message.max !== 0)
            writer.tag(2, WireType.Varint).uint32(message.max);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Range.DateTimeRange.Timestamp
 */
export const Generation_Range_DateTimeRange_Timestamp = new Generation_Range_DateTimeRange_Timestamp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Rules$Type extends MessageType<Generation_Rules> {
    constructor() {
        super("stroppy.Generation.Rules", []);
    }
    create(value?: PartialMessage<Generation_Rules>): Generation_Rules {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Generation_Rules>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Rules): Generation_Rules {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Rules, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Rules
 */
export const Generation_Rules = new Generation_Rules$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Rules_FloatRule$Type extends MessageType<Generation_Rules_FloatRule> {
    constructor() {
        super("stroppy.Generation.Rules.FloatRule", [
            { no: 1, name: "range", kind: "message", T: () => Generation_Range_FloatRange },
            { no: 2, name: "constant", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<Generation_Rules_FloatRule>): Generation_Rules_FloatRule {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Generation_Rules_FloatRule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Rules_FloatRule): Generation_Rules_FloatRule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stroppy.Generation.Range.FloatRange range */ 1:
                    message.range = Generation_Range_FloatRange.internalBinaryRead(reader, reader.uint32(), options, message.range);
                    break;
                case /* optional float constant */ 2:
                    message.constant = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Rules_FloatRule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stroppy.Generation.Range.FloatRange range = 1; */
        if (message.range)
            Generation_Range_FloatRange.internalBinaryWrite(message.range, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional float constant = 2; */
        if (message.constant !== undefined)
            writer.tag(2, WireType.Bit32).float(message.constant);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Rules.FloatRule
 */
export const Generation_Rules_FloatRule = new Generation_Rules_FloatRule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Rules_DoubleRule$Type extends MessageType<Generation_Rules_DoubleRule> {
    constructor() {
        super("stroppy.Generation.Rules.DoubleRule", [
            { no: 1, name: "range", kind: "message", T: () => Generation_Range_DoubleRange },
            { no: 2, name: "constant", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ }
        ]);
    }
    create(value?: PartialMessage<Generation_Rules_DoubleRule>): Generation_Rules_DoubleRule {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Generation_Rules_DoubleRule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Rules_DoubleRule): Generation_Rules_DoubleRule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stroppy.Generation.Range.DoubleRange range */ 1:
                    message.range = Generation_Range_DoubleRange.internalBinaryRead(reader, reader.uint32(), options, message.range);
                    break;
                case /* optional double constant */ 2:
                    message.constant = reader.double();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Rules_DoubleRule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stroppy.Generation.Range.DoubleRange range = 1; */
        if (message.range)
            Generation_Range_DoubleRange.internalBinaryWrite(message.range, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional double constant = 2; */
        if (message.constant !== undefined)
            writer.tag(2, WireType.Bit64).double(message.constant);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Rules.DoubleRule
 */
export const Generation_Rules_DoubleRule = new Generation_Rules_DoubleRule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Rules_Int32Rule$Type extends MessageType<Generation_Rules_Int32Rule> {
    constructor() {
        super("stroppy.Generation.Rules.Int32Rule", [
            { no: 1, name: "range", kind: "message", T: () => Generation_Range_Int32Range },
            { no: 2, name: "constant", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Generation_Rules_Int32Rule>): Generation_Rules_Int32Rule {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Generation_Rules_Int32Rule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Rules_Int32Rule): Generation_Rules_Int32Rule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stroppy.Generation.Range.Int32Range range */ 1:
                    message.range = Generation_Range_Int32Range.internalBinaryRead(reader, reader.uint32(), options, message.range);
                    break;
                case /* optional int32 constant */ 2:
                    message.constant = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Rules_Int32Rule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stroppy.Generation.Range.Int32Range range = 1; */
        if (message.range)
            Generation_Range_Int32Range.internalBinaryWrite(message.range, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 constant = 2; */
        if (message.constant !== undefined)
            writer.tag(2, WireType.Varint).int32(message.constant);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Rules.Int32Rule
 */
export const Generation_Rules_Int32Rule = new Generation_Rules_Int32Rule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Rules_Int64Rule$Type extends MessageType<Generation_Rules_Int64Rule> {
    constructor() {
        super("stroppy.Generation.Rules.Int64Rule", [
            { no: 1, name: "range", kind: "message", T: () => Generation_Range_Int64Range },
            { no: 2, name: "constant", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<Generation_Rules_Int64Rule>): Generation_Rules_Int64Rule {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Generation_Rules_Int64Rule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Rules_Int64Rule): Generation_Rules_Int64Rule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stroppy.Generation.Range.Int64Range range */ 1:
                    message.range = Generation_Range_Int64Range.internalBinaryRead(reader, reader.uint32(), options, message.range);
                    break;
                case /* optional int64 constant */ 2:
                    message.constant = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Rules_Int64Rule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stroppy.Generation.Range.Int64Range range = 1; */
        if (message.range)
            Generation_Range_Int64Range.internalBinaryWrite(message.range, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional int64 constant = 2; */
        if (message.constant !== undefined)
            writer.tag(2, WireType.Varint).int64(message.constant);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Rules.Int64Rule
 */
export const Generation_Rules_Int64Rule = new Generation_Rules_Int64Rule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Rules_UInt32Rule$Type extends MessageType<Generation_Rules_UInt32Rule> {
    constructor() {
        super("stroppy.Generation.Rules.UInt32Rule", [
            { no: 1, name: "range", kind: "message", T: () => Generation_Range_UInt32Range },
            { no: 2, name: "constant", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Generation_Rules_UInt32Rule>): Generation_Rules_UInt32Rule {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Generation_Rules_UInt32Rule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Rules_UInt32Rule): Generation_Rules_UInt32Rule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stroppy.Generation.Range.UInt32Range range */ 1:
                    message.range = Generation_Range_UInt32Range.internalBinaryRead(reader, reader.uint32(), options, message.range);
                    break;
                case /* optional uint32 constant */ 2:
                    message.constant = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Rules_UInt32Rule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stroppy.Generation.Range.UInt32Range range = 1; */
        if (message.range)
            Generation_Range_UInt32Range.internalBinaryWrite(message.range, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 constant = 2; */
        if (message.constant !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.constant);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Rules.UInt32Rule
 */
export const Generation_Rules_UInt32Rule = new Generation_Rules_UInt32Rule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Rules_UInt64Rule$Type extends MessageType<Generation_Rules_UInt64Rule> {
    constructor() {
        super("stroppy.Generation.Rules.UInt64Rule", [
            { no: 1, name: "range", kind: "message", T: () => Generation_Range_UInt64Range },
            { no: 2, name: "constant", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<Generation_Rules_UInt64Rule>): Generation_Rules_UInt64Rule {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Generation_Rules_UInt64Rule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Rules_UInt64Rule): Generation_Rules_UInt64Rule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stroppy.Generation.Range.UInt64Range range */ 1:
                    message.range = Generation_Range_UInt64Range.internalBinaryRead(reader, reader.uint32(), options, message.range);
                    break;
                case /* optional uint64 constant */ 2:
                    message.constant = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Rules_UInt64Rule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stroppy.Generation.Range.UInt64Range range = 1; */
        if (message.range)
            Generation_Range_UInt64Range.internalBinaryWrite(message.range, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint64 constant = 2; */
        if (message.constant !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.constant);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Rules.UInt64Rule
 */
export const Generation_Rules_UInt64Rule = new Generation_Rules_UInt64Rule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Rules_BoolRule$Type extends MessageType<Generation_Rules_BoolRule> {
    constructor() {
        super("stroppy.Generation.Rules.BoolRule", [
            { no: 1, name: "constant", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Generation_Rules_BoolRule>): Generation_Rules_BoolRule {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Generation_Rules_BoolRule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Rules_BoolRule): Generation_Rules_BoolRule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool constant */ 1:
                    message.constant = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Rules_BoolRule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool constant = 1; */
        if (message.constant !== undefined)
            writer.tag(1, WireType.Varint).bool(message.constant);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Rules.BoolRule
 */
export const Generation_Rules_BoolRule = new Generation_Rules_BoolRule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Rules_StringRule$Type extends MessageType<Generation_Rules_StringRule> {
    constructor() {
        super("stroppy.Generation.Rules.StringRule", [
            { no: 1, name: "alphabet", kind: "message", T: () => Generation_Alphabet },
            { no: 2, name: "len_range", kind: "message", T: () => Generation_Range_UInt64Range },
            { no: 3, name: "constant", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Generation_Rules_StringRule>): Generation_Rules_StringRule {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Generation_Rules_StringRule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Rules_StringRule): Generation_Rules_StringRule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional stroppy.Generation.Alphabet alphabet */ 1:
                    message.alphabet = Generation_Alphabet.internalBinaryRead(reader, reader.uint32(), options, message.alphabet);
                    break;
                case /* stroppy.Generation.Range.UInt64Range len_range */ 2:
                    message.lenRange = Generation_Range_UInt64Range.internalBinaryRead(reader, reader.uint32(), options, message.lenRange);
                    break;
                case /* optional string constant */ 3:
                    message.constant = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Rules_StringRule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional stroppy.Generation.Alphabet alphabet = 1; */
        if (message.alphabet)
            Generation_Alphabet.internalBinaryWrite(message.alphabet, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.Generation.Range.UInt64Range len_range = 2; */
        if (message.lenRange)
            Generation_Range_UInt64Range.internalBinaryWrite(message.lenRange, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional string constant = 3; */
        if (message.constant !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.constant);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Rules.StringRule
 */
export const Generation_Rules_StringRule = new Generation_Rules_StringRule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Rules_DateTimeRule$Type extends MessageType<Generation_Rules_DateTimeRule> {
    constructor() {
        super("stroppy.Generation.Rules.DateTimeRule", [
            { no: 1, name: "range", kind: "message", T: () => Generation_Range_DateTimeRange },
            { no: 2, name: "constant", kind: "message", T: () => DateTime }
        ]);
    }
    create(value?: PartialMessage<Generation_Rules_DateTimeRule>): Generation_Rules_DateTimeRule {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Generation_Rules_DateTimeRule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Rules_DateTimeRule): Generation_Rules_DateTimeRule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stroppy.Generation.Range.DateTimeRange range */ 1:
                    message.range = Generation_Range_DateTimeRange.internalBinaryRead(reader, reader.uint32(), options, message.range);
                    break;
                case /* optional stroppy.DateTime constant */ 2:
                    message.constant = DateTime.internalBinaryRead(reader, reader.uint32(), options, message.constant);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Rules_DateTimeRule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stroppy.Generation.Range.DateTimeRange range = 1; */
        if (message.range)
            Generation_Range_DateTimeRange.internalBinaryWrite(message.range, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional stroppy.DateTime constant = 2; */
        if (message.constant)
            DateTime.internalBinaryWrite(message.constant, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Rules.DateTimeRule
 */
export const Generation_Rules_DateTimeRule = new Generation_Rules_DateTimeRule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Rules_UuidRule$Type extends MessageType<Generation_Rules_UuidRule> {
    constructor() {
        super("stroppy.Generation.Rules.UuidRule", [
            { no: 1, name: "constant", kind: "message", T: () => Uuid }
        ]);
    }
    create(value?: PartialMessage<Generation_Rules_UuidRule>): Generation_Rules_UuidRule {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Generation_Rules_UuidRule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Rules_UuidRule): Generation_Rules_UuidRule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional stroppy.Uuid constant */ 1:
                    message.constant = Uuid.internalBinaryRead(reader, reader.uint32(), options, message.constant);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Rules_UuidRule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional stroppy.Uuid constant = 1; */
        if (message.constant)
            Uuid.internalBinaryWrite(message.constant, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Rules.UuidRule
 */
export const Generation_Rules_UuidRule = new Generation_Rules_UuidRule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Rules_DecimalRule$Type extends MessageType<Generation_Rules_DecimalRule> {
    constructor() {
        super("stroppy.Generation.Rules.DecimalRule", [
            { no: 1, name: "range", kind: "message", T: () => Generation_Range_DecimalRange },
            { no: 2, name: "constant", kind: "message", T: () => Decimal }
        ]);
    }
    create(value?: PartialMessage<Generation_Rules_DecimalRule>): Generation_Rules_DecimalRule {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Generation_Rules_DecimalRule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Rules_DecimalRule): Generation_Rules_DecimalRule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stroppy.Generation.Range.DecimalRange range */ 1:
                    message.range = Generation_Range_DecimalRange.internalBinaryRead(reader, reader.uint32(), options, message.range);
                    break;
                case /* optional stroppy.Decimal constant */ 2:
                    message.constant = Decimal.internalBinaryRead(reader, reader.uint32(), options, message.constant);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Rules_DecimalRule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stroppy.Generation.Range.DecimalRange range = 1; */
        if (message.range)
            Generation_Range_DecimalRange.internalBinaryWrite(message.range, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional stroppy.Decimal constant = 2; */
        if (message.constant)
            Decimal.internalBinaryWrite(message.constant, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Rules.DecimalRule
 */
export const Generation_Rules_DecimalRule = new Generation_Rules_DecimalRule$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Generation_Rule$Type extends MessageType<Generation_Rule> {
    constructor() {
        super("stroppy.Generation.Rule", [
            { no: 1, name: "float_rules", kind: "message", oneof: "type", T: () => Generation_Rules_FloatRule },
            { no: 2, name: "double_rules", kind: "message", oneof: "type", T: () => Generation_Rules_DoubleRule },
            { no: 3, name: "int32_rules", kind: "message", oneof: "type", T: () => Generation_Rules_Int32Rule },
            { no: 4, name: "int64_rules", kind: "message", oneof: "type", T: () => Generation_Rules_Int64Rule },
            { no: 5, name: "uint32_rules", kind: "message", oneof: "type", T: () => Generation_Rules_UInt32Rule },
            { no: 6, name: "uint64_rules", kind: "message", oneof: "type", T: () => Generation_Rules_UInt64Rule },
            { no: 13, name: "bool_rules", kind: "message", oneof: "type", T: () => Generation_Rules_BoolRule },
            { no: 14, name: "string_rules", kind: "message", oneof: "type", T: () => Generation_Rules_StringRule },
            { no: 101, name: "datetime_rules", kind: "message", oneof: "type", T: () => Generation_Rules_DateTimeRule },
            { no: 102, name: "uuid_rules", kind: "message", oneof: "type", T: () => Generation_Rules_UuidRule },
            { no: 103, name: "decimal_rules", kind: "message", oneof: "type", T: () => Generation_Rules_DecimalRule },
            { no: 1000, name: "distribution", kind: "message", T: () => Generation_Distribution },
            { no: 1001, name: "null_percentage", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1002, name: "unique", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Generation_Rule>): Generation_Rule {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Generation_Rule>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Generation_Rule): Generation_Rule {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stroppy.Generation.Rules.FloatRule float_rules */ 1:
                    message.type = {
                        oneofKind: "floatRules",
                        floatRules: Generation_Rules_FloatRule.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).floatRules)
                    };
                    break;
                case /* stroppy.Generation.Rules.DoubleRule double_rules */ 2:
                    message.type = {
                        oneofKind: "doubleRules",
                        doubleRules: Generation_Rules_DoubleRule.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).doubleRules)
                    };
                    break;
                case /* stroppy.Generation.Rules.Int32Rule int32_rules */ 3:
                    message.type = {
                        oneofKind: "int32Rules",
                        int32Rules: Generation_Rules_Int32Rule.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).int32Rules)
                    };
                    break;
                case /* stroppy.Generation.Rules.Int64Rule int64_rules */ 4:
                    message.type = {
                        oneofKind: "int64Rules",
                        int64Rules: Generation_Rules_Int64Rule.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).int64Rules)
                    };
                    break;
                case /* stroppy.Generation.Rules.UInt32Rule uint32_rules */ 5:
                    message.type = {
                        oneofKind: "uint32Rules",
                        uint32Rules: Generation_Rules_UInt32Rule.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).uint32Rules)
                    };
                    break;
                case /* stroppy.Generation.Rules.UInt64Rule uint64_rules */ 6:
                    message.type = {
                        oneofKind: "uint64Rules",
                        uint64Rules: Generation_Rules_UInt64Rule.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).uint64Rules)
                    };
                    break;
                case /* stroppy.Generation.Rules.BoolRule bool_rules */ 13:
                    message.type = {
                        oneofKind: "boolRules",
                        boolRules: Generation_Rules_BoolRule.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).boolRules)
                    };
                    break;
                case /* stroppy.Generation.Rules.StringRule string_rules */ 14:
                    message.type = {
                        oneofKind: "stringRules",
                        stringRules: Generation_Rules_StringRule.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).stringRules)
                    };
                    break;
                case /* stroppy.Generation.Rules.DateTimeRule datetime_rules */ 101:
                    message.type = {
                        oneofKind: "datetimeRules",
                        datetimeRules: Generation_Rules_DateTimeRule.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).datetimeRules)
                    };
                    break;
                case /* stroppy.Generation.Rules.UuidRule uuid_rules */ 102:
                    message.type = {
                        oneofKind: "uuidRules",
                        uuidRules: Generation_Rules_UuidRule.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).uuidRules)
                    };
                    break;
                case /* stroppy.Generation.Rules.DecimalRule decimal_rules */ 103:
                    message.type = {
                        oneofKind: "decimalRules",
                        decimalRules: Generation_Rules_DecimalRule.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).decimalRules)
                    };
                    break;
                case /* optional stroppy.Generation.Distribution distribution */ 1000:
                    message.distribution = Generation_Distribution.internalBinaryRead(reader, reader.uint32(), options, message.distribution);
                    break;
                case /* optional uint32 null_percentage */ 1001:
                    message.nullPercentage = reader.uint32();
                    break;
                case /* optional bool unique */ 1002:
                    message.unique = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Generation_Rule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stroppy.Generation.Rules.FloatRule float_rules = 1; */
        if (message.type.oneofKind === "floatRules")
            Generation_Rules_FloatRule.internalBinaryWrite(message.type.floatRules, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.Generation.Rules.DoubleRule double_rules = 2; */
        if (message.type.oneofKind === "doubleRules")
            Generation_Rules_DoubleRule.internalBinaryWrite(message.type.doubleRules, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.Generation.Rules.Int32Rule int32_rules = 3; */
        if (message.type.oneofKind === "int32Rules")
            Generation_Rules_Int32Rule.internalBinaryWrite(message.type.int32Rules, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.Generation.Rules.Int64Rule int64_rules = 4; */
        if (message.type.oneofKind === "int64Rules")
            Generation_Rules_Int64Rule.internalBinaryWrite(message.type.int64Rules, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.Generation.Rules.UInt32Rule uint32_rules = 5; */
        if (message.type.oneofKind === "uint32Rules")
            Generation_Rules_UInt32Rule.internalBinaryWrite(message.type.uint32Rules, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.Generation.Rules.UInt64Rule uint64_rules = 6; */
        if (message.type.oneofKind === "uint64Rules")
            Generation_Rules_UInt64Rule.internalBinaryWrite(message.type.uint64Rules, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.Generation.Rules.BoolRule bool_rules = 13; */
        if (message.type.oneofKind === "boolRules")
            Generation_Rules_BoolRule.internalBinaryWrite(message.type.boolRules, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.Generation.Rules.StringRule string_rules = 14; */
        if (message.type.oneofKind === "stringRules")
            Generation_Rules_StringRule.internalBinaryWrite(message.type.stringRules, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.Generation.Rules.DateTimeRule datetime_rules = 101; */
        if (message.type.oneofKind === "datetimeRules")
            Generation_Rules_DateTimeRule.internalBinaryWrite(message.type.datetimeRules, writer.tag(101, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.Generation.Rules.UuidRule uuid_rules = 102; */
        if (message.type.oneofKind === "uuidRules")
            Generation_Rules_UuidRule.internalBinaryWrite(message.type.uuidRules, writer.tag(102, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.Generation.Rules.DecimalRule decimal_rules = 103; */
        if (message.type.oneofKind === "decimalRules")
            Generation_Rules_DecimalRule.internalBinaryWrite(message.type.decimalRules, writer.tag(103, WireType.LengthDelimited).fork(), options).join();
        /* optional stroppy.Generation.Distribution distribution = 1000; */
        if (message.distribution)
            Generation_Distribution.internalBinaryWrite(message.distribution, writer.tag(1000, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 null_percentage = 1001; */
        if (message.nullPercentage !== undefined)
            writer.tag(1001, WireType.Varint).uint32(message.nullPercentage);
        /* optional bool unique = 1002; */
        if (message.unique !== undefined)
            writer.tag(1002, WireType.Varint).bool(message.unique);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Generation.Rule
 */
export const Generation_Rule = new Generation_Rule$Type();
// @generated by protobuf-ts 2.11.1 with parameter force_disable_services,force_client_none,force_exclude_all_options,keep_enum_prefix,add_pb_suffix,long_type_string
// @generated from protobuf file "config.proto" (package "stroppy", syntax proto3)
// tslint:disable

/**
 * *
 * DriverConfig contains configuration for connecting to a database driver.
 * It includes the driver plugin path, connection URL, and database-specific settings.
 *
 * @generated from protobuf message stroppy.DriverConfig
 */
export interface DriverConfig {
    /**
     * * Database connection URL
     *
     * @generated from protobuf field: string url = 1
     */
    url: string;
    /**
     * * Database-specific configuration options
     *
     * @generated from protobuf field: optional stroppy.Value.Struct db_specific = 2
     */
    dbSpecific?: Value_Struct;
    /**
     * * Name/Type of chosen driver
     *
     * @generated from protobuf field: stroppy.DriverConfig.DriverType driver_type = 3
     */
    driverType: DriverConfig_DriverType;
}
/**
 * @generated from protobuf enum stroppy.DriverConfig.DriverType
 */
export enum DriverConfig_DriverType {
    /**
     * @generated from protobuf enum value: DRIVER_TYPE_UNSPECIFIED = 0;
     */
    DRIVER_TYPE_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: DRIVER_TYPE_POSTGRES = 1;
     */
    DRIVER_TYPE_POSTGRES = 1
}
/**
 * *
 * LoggerConfig contains configuration for the logging system.
 * It controls log levels and output formatting.
 *
 * @generated from protobuf message stroppy.LoggerConfig
 */
export interface LoggerConfig {
    /**
     * * Minimum log level to output
     *
     * @generated from protobuf field: stroppy.LoggerConfig.LogLevel log_level = 1
     */
    logLevel: LoggerConfig_LogLevel;
    /**
     * * Logging mode (development or production)
     *
     * @generated from protobuf field: stroppy.LoggerConfig.LogMode log_mode = 2
     */
    logMode: LoggerConfig_LogMode;
}
/**
 * @generated from protobuf enum stroppy.LoggerConfig.LogLevel
 */
export enum LoggerConfig_LogLevel {
    /**
     * @generated from protobuf enum value: LOG_LEVEL_DEBUG = 0;
     */
    LOG_LEVEL_DEBUG = 0,
    /**
     * @generated from protobuf enum value: LOG_LEVEL_INFO = 1;
     */
    LOG_LEVEL_INFO = 1,
    /**
     * @generated from protobuf enum value: LOG_LEVEL_WARN = 2;
     */
    LOG_LEVEL_WARN = 2,
    /**
     * @generated from protobuf enum value: LOG_LEVEL_ERROR = 3;
     */
    LOG_LEVEL_ERROR = 3,
    /**
     * @generated from protobuf enum value: LOG_LEVEL_FATAL = 4;
     */
    LOG_LEVEL_FATAL = 4
}
/**
 * @generated from protobuf enum stroppy.LoggerConfig.LogMode
 */
export enum LoggerConfig_LogMode {
    /**
     * @generated from protobuf enum value: LOG_MODE_DEVELOPMENT = 0;
     */
    LOG_MODE_DEVELOPMENT = 0,
    /**
     * @generated from protobuf enum value: LOG_MODE_PRODUCTION = 1;
     */
    LOG_MODE_PRODUCTION = 1
}
/**
 * *
 * OtlpExporterConfig contains named configuration for an OTLP exporter.
 *
 * @generated from protobuf message stroppy.ExporterConfig
 */
export interface ExporterConfig {
    /**
     * * Name of the OTLP exporter
     *
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * * Configuration for the OTLP exporter
     *
     * @generated from protobuf field: stroppy.OtlpExport otlp_export = 2
     */
    otlpExport?: OtlpExport;
}
/**
 * *
 * ExecutorConfig contains configuration for an executor.
 *
 * @generated from protobuf message stroppy.ExecutorConfig
 */
export interface ExecutorConfig {
    /**
     * * Name of the executor
     *
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * * Configuration for the executor
     *
     * @generated from protobuf field: stroppy.K6Options k6 = 2
     */
    k6?: K6Options;
}
/**
 * *
 * StepExecutorMappingConfig contains configuration for mapping steps to executors.
 *
 * @generated from protobuf message stroppy.Step
 */
export interface Step {
    /**
     * * Name of the step
     *
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * * Name of the step
     *
     * @generated from protobuf field: string workload = 2
     */
    workload: string;
    /**
     * * Name of the executor
     *
     * @generated from protobuf field: string executor = 3
     */
    executor: string;
    /**
     * * Name of the exporter
     *
     * @generated from protobuf field: optional string exporter = 4
     */
    exporter?: string;
}
/**
 * *
 * SideCar contains configuration for plugins.
 *
 * @generated from protobuf message stroppy.SideCarConfig
 */
export interface SideCarConfig {
    /**
     * * Url to connect the plugin instance
     *
     * @generated from protobuf field: string url = 2
     */
    url: string;
    /**
     * * Additional plugin settings
     *
     * @generated from protobuf field: optional stroppy.Value.Struct settings = 3
     */
    settings?: Value_Struct;
}
// TODO: use it later

/**
 * *
 * CloudConfig contains configuration for stroppy cloud backend.
 *
 * @generated from protobuf message stroppy.CloudConfig
 */
export interface CloudConfig {
}
/**
 * @generated from protobuf message stroppy.GlobalConfig
 */
export interface GlobalConfig {
    /**
     * *
     * Version of the configuration format e.g. proto files version.
     * This is used for backward compatibility of configs
     * and will be set automatically from binary run if not present.
     *
     * @generated from protobuf field: string version = 1
     */
    version: string;
    /**
     * *
     * Run identifier for reproducible test runs or debugging
     * If set to "generate()" stroppy eval ulid for run_id
     *
     * @generated from protobuf field: string run_id = 2
     */
    runId: string;
    /**
     * * Random seed for reproducible test runs
     *
     * @generated from protobuf field: uint64 seed = 3
     */
    seed: string;
    /**
     * * Arbitrary metadata, may be passed to result labels and json output
     *
     * @generated from protobuf field: map<string, string> metadata = 4
     */
    metadata: {
        [key: string]: string;
    };
    /**
     * * Database driver configuration
     *
     * @generated from protobuf field: stroppy.DriverConfig driver = 5
     */
    driver?: DriverConfig;
    /**
     * * Logging configuration
     *
     * @generated from protobuf field: stroppy.LoggerConfig logger = 6
     */
    logger?: LoggerConfig;
}
/**
 * *
 * ConfigFile contains the complete configuration for a benchmark run in file.
 *
 * @generated from protobuf message stroppy.ConfigFile
 */
export interface ConfigFile {
    /**
     * * Global configuration
     *
     * @generated from protobuf field: stroppy.GlobalConfig global = 1
     */
    global?: GlobalConfig;
    /**
     * * Exporters configuration
     *
     * @generated from protobuf field: repeated stroppy.ExporterConfig exporters = 2
     */
    exporters: ExporterConfig[];
    /**
     * * Executors configuration
     *
     * @generated from protobuf field: repeated stroppy.ExecutorConfig executors = 3
     */
    executors: ExecutorConfig[];
    /**
     * * Step to executor mapping configuration
     *
     * @generated from protobuf field: repeated stroppy.Step steps = 4
     */
    steps: Step[];
    /**
     * * Plugins configuration
     *
     * @generated from protobuf field: repeated stroppy.SideCarConfig side_cars = 5
     */
    sideCars: SideCarConfig[];
    /**
     * * BenchmarkDescriptor defines a complete benchmark consisting of multiple steps.
     *
     * @generated from protobuf field: stroppy.BenchmarkDescriptor benchmark = 6
     */
    benchmark?: BenchmarkDescriptor;
}
// @generated message type with reflection information, may provide speed optimized methods
class DriverConfig$Type extends MessageType<DriverConfig> {
    constructor() {
        super("stroppy.DriverConfig", [
            { no: 1, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "db_specific", kind: "message", T: () => Value_Struct },
            { no: 3, name: "driver_type", kind: "enum", T: () => ["stroppy.DriverConfig.DriverType", DriverConfig_DriverType] }
        ]);
    }
    create(value?: PartialMessage<DriverConfig>): DriverConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.url = "";
        message.driverType = 0;
        if (value !== undefined)
            reflectionMergePartial<DriverConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverConfig): DriverConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 1:
                    message.url = reader.string();
                    break;
                case /* optional stroppy.Value.Struct db_specific */ 2:
                    message.dbSpecific = Value_Struct.internalBinaryRead(reader, reader.uint32(), options, message.dbSpecific);
                    break;
                case /* stroppy.DriverConfig.DriverType driver_type */ 3:
                    message.driverType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 1; */
        if (message.url !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.url);
        /* optional stroppy.Value.Struct db_specific = 2; */
        if (message.dbSpecific)
            Value_Struct.internalBinaryWrite(message.dbSpecific, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.DriverConfig.DriverType driver_type = 3; */
        if (message.driverType !== 0)
            writer.tag(3, WireType.Varint).int32(message.driverType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.DriverConfig
 */
export const DriverConfig = new DriverConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoggerConfig$Type extends MessageType<LoggerConfig> {
    constructor() {
        super("stroppy.LoggerConfig", [
            { no: 1, name: "log_level", kind: "enum", T: () => ["stroppy.LoggerConfig.LogLevel", LoggerConfig_LogLevel] },
            { no: 2, name: "log_mode", kind: "enum", T: () => ["stroppy.LoggerConfig.LogMode", LoggerConfig_LogMode] }
        ]);
    }
    create(value?: PartialMessage<LoggerConfig>): LoggerConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.logLevel = 0;
        message.logMode = 0;
        if (value !== undefined)
            reflectionMergePartial<LoggerConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoggerConfig): LoggerConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stroppy.LoggerConfig.LogLevel log_level */ 1:
                    message.logLevel = reader.int32();
                    break;
                case /* stroppy.LoggerConfig.LogMode log_mode */ 2:
                    message.logMode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoggerConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stroppy.LoggerConfig.LogLevel log_level = 1; */
        if (message.logLevel !== 0)
            writer.tag(1, WireType.Varint).int32(message.logLevel);
        /* stroppy.LoggerConfig.LogMode log_mode = 2; */
        if (message.logMode !== 0)
            writer.tag(2, WireType.Varint).int32(message.logMode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.LoggerConfig
 */
export const LoggerConfig = new LoggerConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExporterConfig$Type extends MessageType<ExporterConfig> {
    constructor() {
        super("stroppy.ExporterConfig", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "otlp_export", kind: "message", T: () => OtlpExport }
        ]);
    }
    create(value?: PartialMessage<ExporterConfig>): ExporterConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<ExporterConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExporterConfig): ExporterConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* stroppy.OtlpExport otlp_export */ 2:
                    message.otlpExport = OtlpExport.internalBinaryRead(reader, reader.uint32(), options, message.otlpExport);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExporterConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* stroppy.OtlpExport otlp_export = 2; */
        if (message.otlpExport)
            OtlpExport.internalBinaryWrite(message.otlpExport, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.ExporterConfig
 */
export const ExporterConfig = new ExporterConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecutorConfig$Type extends MessageType<ExecutorConfig> {
    constructor() {
        super("stroppy.ExecutorConfig", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "k6", kind: "message", T: () => K6Options }
        ]);
    }
    create(value?: PartialMessage<ExecutorConfig>): ExecutorConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<ExecutorConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExecutorConfig): ExecutorConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* stroppy.K6Options k6 */ 2:
                    message.k6 = K6Options.internalBinaryRead(reader, reader.uint32(), options, message.k6);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExecutorConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* stroppy.K6Options k6 = 2; */
        if (message.k6)
            K6Options.internalBinaryWrite(message.k6, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.ExecutorConfig
 */
export const ExecutorConfig = new ExecutorConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Step$Type extends MessageType<Step> {
    constructor() {
        super("stroppy.Step", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "workload", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "executor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "exporter", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Step>): Step {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.workload = "";
        message.executor = "";
        if (value !== undefined)
            reflectionMergePartial<Step>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Step): Step {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string workload */ 2:
                    message.workload = reader.string();
                    break;
                case /* string executor */ 3:
                    message.executor = reader.string();
                    break;
                case /* optional string exporter */ 4:
                    message.exporter = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Step, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string workload = 2; */
        if (message.workload !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.workload);
        /* string executor = 3; */
        if (message.executor !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.executor);
        /* optional string exporter = 4; */
        if (message.exporter !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.exporter);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.Step
 */
export const Step = new Step$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SideCarConfig$Type extends MessageType<SideCarConfig> {
    constructor() {
        super("stroppy.SideCarConfig", [
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "settings", kind: "message", T: () => Value_Struct }
        ]);
    }
    create(value?: PartialMessage<SideCarConfig>): SideCarConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.url = "";
        if (value !== undefined)
            reflectionMergePartial<SideCarConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SideCarConfig): SideCarConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* optional stroppy.Value.Struct settings */ 3:
                    message.settings = Value_Struct.internalBinaryRead(reader, reader.uint32(), options, message.settings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SideCarConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* optional stroppy.Value.Struct settings = 3; */
        if (message.settings)
            Value_Struct.internalBinaryWrite(message.settings, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.SideCarConfig
 */
export const SideCarConfig = new SideCarConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CloudConfig$Type extends MessageType<CloudConfig> {
    constructor() {
        super("stroppy.CloudConfig", []);
    }
    create(value?: PartialMessage<CloudConfig>): CloudConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CloudConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CloudConfig): CloudConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CloudConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.CloudConfig
 */
export const CloudConfig = new CloudConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GlobalConfig$Type extends MessageType<GlobalConfig> {
    constructor() {
        super("stroppy.GlobalConfig", [
            { no: 1, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "run_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "seed", kind: "scalar", T: 4 /*ScalarType.UINT64*/ },
            { no: 4, name: "metadata", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } },
            { no: 5, name: "driver", kind: "message", T: () => DriverConfig },
            { no: 6, name: "logger", kind: "message", T: () => LoggerConfig }
        ]);
    }
    create(value?: PartialMessage<GlobalConfig>): GlobalConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.version = "";
        message.runId = "";
        message.seed = "0";
        message.metadata = {};
        if (value !== undefined)
            reflectionMergePartial<GlobalConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GlobalConfig): GlobalConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string version */ 1:
                    message.version = reader.string();
                    break;
                case /* string run_id */ 2:
                    message.runId = reader.string();
                    break;
                case /* uint64 seed */ 3:
                    message.seed = reader.uint64().toString();
                    break;
                case /* map<string, string> metadata */ 4:
                    this.binaryReadMap4(message.metadata, reader, options);
                    break;
                case /* stroppy.DriverConfig driver */ 5:
                    message.driver = DriverConfig.internalBinaryRead(reader, reader.uint32(), options, message.driver);
                    break;
                case /* stroppy.LoggerConfig logger */ 6:
                    message.logger = LoggerConfig.internalBinaryRead(reader, reader.uint32(), options, message.logger);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: GlobalConfig["metadata"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GlobalConfig["metadata"] | undefined, val: GlobalConfig["metadata"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for stroppy.GlobalConfig.metadata");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: GlobalConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string version = 1; */
        if (message.version !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.version);
        /* string run_id = 2; */
        if (message.runId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.runId);
        /* uint64 seed = 3; */
        if (message.seed !== "0")
            writer.tag(3, WireType.Varint).uint64(message.seed);
        /* map<string, string> metadata = 4; */
        for (let k of globalThis.Object.keys(message.metadata))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.metadata[k]).join();
        /* stroppy.DriverConfig driver = 5; */
        if (message.driver)
            DriverConfig.internalBinaryWrite(message.driver, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.LoggerConfig logger = 6; */
        if (message.logger)
            LoggerConfig.internalBinaryWrite(message.logger, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.GlobalConfig
 */
export const GlobalConfig = new GlobalConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConfigFile$Type extends MessageType<ConfigFile> {
    constructor() {
        super("stroppy.ConfigFile", [
            { no: 1, name: "global", kind: "message", T: () => GlobalConfig },
            { no: 2, name: "exporters", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ExporterConfig },
            { no: 3, name: "executors", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ExecutorConfig },
            { no: 4, name: "steps", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Step },
            { no: 5, name: "side_cars", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SideCarConfig },
            { no: 6, name: "benchmark", kind: "message", T: () => BenchmarkDescriptor }
        ]);
    }
    create(value?: PartialMessage<ConfigFile>): ConfigFile {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.exporters = [];
        message.executors = [];
        message.steps = [];
        message.sideCars = [];
        if (value !== undefined)
            reflectionMergePartial<ConfigFile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConfigFile): ConfigFile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stroppy.GlobalConfig global */ 1:
                    message.global = GlobalConfig.internalBinaryRead(reader, reader.uint32(), options, message.global);
                    break;
                case /* repeated stroppy.ExporterConfig exporters */ 2:
                    message.exporters.push(ExporterConfig.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated stroppy.ExecutorConfig executors */ 3:
                    message.executors.push(ExecutorConfig.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated stroppy.Step steps */ 4:
                    message.steps.push(Step.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated stroppy.SideCarConfig side_cars */ 5:
                    message.sideCars.push(SideCarConfig.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* stroppy.BenchmarkDescriptor benchmark */ 6:
                    message.benchmark = BenchmarkDescriptor.internalBinaryRead(reader, reader.uint32(), options, message.benchmark);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConfigFile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stroppy.GlobalConfig global = 1; */
        if (message.global)
            GlobalConfig.internalBinaryWrite(message.global, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated stroppy.ExporterConfig exporters = 2; */
        for (let i = 0; i < message.exporters.length; i++)
            ExporterConfig.internalBinaryWrite(message.exporters[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated stroppy.ExecutorConfig executors = 3; */
        for (let i = 0; i < message.executors.length; i++)
            ExecutorConfig.internalBinaryWrite(message.executors[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated stroppy.Step steps = 4; */
        for (let i = 0; i < message.steps.length; i++)
            Step.internalBinaryWrite(message.steps[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated stroppy.SideCarConfig side_cars = 5; */
        for (let i = 0; i < message.sideCars.length; i++)
            SideCarConfig.internalBinaryWrite(message.sideCars[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.BenchmarkDescriptor benchmark = 6; */
        if (message.benchmark)
            BenchmarkDescriptor.internalBinaryWrite(message.benchmark, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.ConfigFile
 */
export const ConfigFile = new ConfigFile$Type();
// @generated by protobuf-ts 2.11.1 with parameter force_disable_services,force_client_none,force_exclude_all_options,keep_enum_prefix,add_pb_suffix,long_type_string
// @generated from protobuf file "descriptor.proto" (package "stroppy", syntax proto3)
// tslint:disable

/**
 * *
 * IndexDescriptor defines the structure of a database index.
 *
 * @generated from protobuf message stroppy.IndexDescriptor
 */
export interface IndexDescriptor {
    /**
     * * Name of the index
     *
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * * List of column names that are part of this index
     *
     * @generated from protobuf field: repeated string columns = 2
     */
    columns: string[];
    /**
     * * Type of index (e.g., BTREE, HASH, etc.)
     *
     * @generated from protobuf field: string type = 3
     */
    type: string;
    /**
     * * Whether this is a unique index
     *
     * @generated from protobuf field: bool unique = 4
     */
    unique: boolean;
    /**
     * * Database-specific index properties
     *
     * @generated from protobuf field: optional stroppy.Value.Struct db_specific = 5
     */
    dbSpecific?: Value_Struct;
}
/**
 * *
 * ColumnDescriptor defines the structure of a database column.
 *
 * @generated from protobuf message stroppy.ColumnDescriptor
 */
export interface ColumnDescriptor {
    /**
     * * Name of the column
     *
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * * SQL data type of the column
     *
     * @generated from protobuf field: string sql_type = 2
     */
    sqlType: string;
    /**
     * * Whether the column can be NULL
     *
     * @generated from protobuf field: bool nullable = 3
     */
    nullable: boolean;
    /**
     * * Whether the column is part of the primary key
     *
     * @generated from protobuf field: bool primary_key = 4
     */
    primaryKey: boolean;
    /**
     * * Whether the column has a UNIQUE constraint
     *
     * @generated from protobuf field: bool unique = 5
     */
    unique: boolean;
    /**
     * * SQL constraint definition for the column
     *
     * @generated from protobuf field: string constraint = 6
     */
    constraint: string;
}
/**
 * *
 * TableDescriptor defines the structure of a database table.
 *
 * @generated from protobuf message stroppy.TableDescriptor
 */
export interface TableDescriptor {
    /**
     * * Name of the table
     *
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * * List of indexes defined on this table
     *
     * @generated from protobuf field: repeated stroppy.IndexDescriptor table_indexes = 3
     */
    tableIndexes: IndexDescriptor[];
    /**
     * * Table-level constraints
     *
     * @generated from protobuf field: string constraint = 5
     */
    constraint: string;
    /**
     * * Database-specific table properties
     *
     * @generated from protobuf field: stroppy.Value.Struct db_specific = 6
     */
    dbSpecific?: Value_Struct;
    /**
     * * Columns defined in this table
     *
     * @generated from protobuf field: repeated stroppy.ColumnDescriptor columns = 100
     */
    columns: ColumnDescriptor[];
}
/**
 * *
 * QueryParamDescriptor defines a parameter that can be used in a query.
 *
 * @generated from protobuf message stroppy.QueryParamDescriptor
 */
export interface QueryParamDescriptor {
    /**
     * * Name of the parameter
     *
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * * Regular expression pattern to replace with the parameter value default
     * is "${<param_name>}"
     *
     * @generated from protobuf field: optional string replace_regex = 2
     */
    replaceRegex?: string;
    /**
     * * Rule for generating parameter values
     *
     * @generated from protobuf field: stroppy.Generation.Rule generation_rule = 3
     */
    generationRule?: Generation_Rule;
    /**
     * * Database-specific parameter properties
     *
     * @generated from protobuf field: optional stroppy.Value.Struct db_specific = 4
     */
    dbSpecific?: Value_Struct;
}
/**
 * @generated from protobuf message stroppy.QueryParamGroup
 */
export interface QueryParamGroup {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: repeated stroppy.QueryParamDescriptor params = 2
     */
    params: QueryParamDescriptor[];
}
/**
 * *
 * QueryDescriptor defines a database query with its parameters and execution
 * count.
 *
 * @generated from protobuf message stroppy.QueryDescriptor
 */
export interface QueryDescriptor {
    /**
     * * Name of the query
     *
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * * SQL query text
     *
     * @generated from protobuf field: string sql = 2
     */
    sql: string;
    /**
     * * Parameters used in the query
     *
     * @generated from protobuf field: repeated stroppy.QueryParamDescriptor params = 3
     */
    params: QueryParamDescriptor[];
    /**
     * @generated from protobuf field: repeated stroppy.QueryParamGroup groups = 4
     */
    groups: QueryParamGroup[];
    /**
     * * Database-specific query properties
     *
     * @generated from protobuf field: optional stroppy.Value.Struct db_specific = 5
     */
    dbSpecific?: Value_Struct;
}
/**
 * *
 * TransactionDescriptor defines a database transaction with its queries and
 * execution count.
 *
 * @generated from protobuf message stroppy.TransactionDescriptor
 */
export interface TransactionDescriptor {
    /**
     * * Name of the transaction
     *
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * * Transaction isolation level
     *
     * @generated from protobuf field: stroppy.TxIsolationLevel isolation_level = 2
     */
    isolationLevel: TxIsolationLevel;
    /**
     * * List of queries to execute in this transaction
     *
     * @generated from protobuf field: repeated stroppy.QueryDescriptor queries = 3
     */
    queries: QueryDescriptor[];
    /**
     * * Database-specific transaction properties
     *
     * @generated from protobuf field: optional stroppy.Value.Struct db_specific = 5
     */
    dbSpecific?: Value_Struct;
}
/**
 * *
 * UnitDescriptor represents a single workload.
 * It can be a table creation operation, a query execution operation, or a
 * transaction execution operation.
 *
 * @generated from protobuf message stroppy.UnitDescriptor
 */
export interface UnitDescriptor {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "createTable";
        /**
         * * Table creation operation
         *
         * @generated from protobuf field: stroppy.TableDescriptor create_table = 1
         */
        createTable: TableDescriptor;
    } | {
        oneofKind: "query";
        /**
         * * Query execution operation
         *
         * @generated from protobuf field: stroppy.QueryDescriptor query = 2
         */
        query: QueryDescriptor;
    } | {
        oneofKind: "transaction";
        /**
         * * Transaction execution operation
         *
         * @generated from protobuf field: stroppy.TransactionDescriptor transaction = 4
         */
        transaction: TransactionDescriptor;
    } | {
        oneofKind: undefined;
    };
}
/**
 * *
 * WorkloadUnitDescriptor represents a single unit of work.
 * It can be a table creation operation, a query execution operation, or a
 * transaction execution operation.
 *
 * @generated from protobuf message stroppy.WorkloadUnitDescriptor
 */
export interface WorkloadUnitDescriptor {
    /**
     * @generated from protobuf field: stroppy.UnitDescriptor descriptor = 6
     */
    descriptor?: UnitDescriptor;
    /**
     * * Number of times to execute this unit
     *
     * @generated from protobuf field: uint64 count = 5
     */
    count: string;
}
/**
 * *
 * WorkloadDescriptor represents a logical step in a benchmark.
 * It contains a list of operations to perform in this step.
 *
 * @generated from protobuf message stroppy.WorkloadDescriptor
 */
export interface WorkloadDescriptor {
    /**
     * * Name of the step
     *
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * * Whether to execute all operations in this workload asynchronously
     *
     * @generated from protobuf field: bool async = 2
     */
    async: boolean;
    /**
     * * List of operations to perform in this step
     *
     * @generated from protobuf field: repeated stroppy.WorkloadUnitDescriptor units = 3
     */
    units: WorkloadUnitDescriptor[];
}
/**
 * *
 * BenchmarkDescriptor defines a complete benchmark consisting of multiple
 * steps.
 *
 * @generated from protobuf message stroppy.BenchmarkDescriptor
 */
export interface BenchmarkDescriptor {
    /**
     * * Name of the benchmark
     *
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * * List of steps to execute in the benchmark
     *
     * @generated from protobuf field: repeated stroppy.WorkloadDescriptor workloads = 100
     */
    workloads: WorkloadDescriptor[];
}
/**
 * *
 * TransactionIsolationLevel defines the isolation level for a database
 * transaction.
 *
 * @generated from protobuf enum stroppy.TxIsolationLevel
 */
export enum TxIsolationLevel {
    /**
     * @generated from protobuf enum value: TX_ISOLATION_LEVEL_UNSPECIFIED = 0;
     */
    TX_ISOLATION_LEVEL_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: TX_ISOLATION_LEVEL_READ_UNCOMMITTED = 1;
     */
    TX_ISOLATION_LEVEL_READ_UNCOMMITTED = 1,
    /**
     * @generated from protobuf enum value: TX_ISOLATION_LEVEL_READ_COMMITTED = 2;
     */
    TX_ISOLATION_LEVEL_READ_COMMITTED = 2,
    /**
     * @generated from protobuf enum value: TX_ISOLATION_LEVEL_REPEATABLE_READ = 3;
     */
    TX_ISOLATION_LEVEL_REPEATABLE_READ = 3,
    /**
     * @generated from protobuf enum value: TX_ISOLATION_LEVEL_SERIALIZABLE = 4;
     */
    TX_ISOLATION_LEVEL_SERIALIZABLE = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class IndexDescriptor$Type extends MessageType<IndexDescriptor> {
    constructor() {
        super("stroppy.IndexDescriptor", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "columns", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "unique", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "db_specific", kind: "message", T: () => Value_Struct }
        ]);
    }
    create(value?: PartialMessage<IndexDescriptor>): IndexDescriptor {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.columns = [];
        message.type = "";
        message.unique = false;
        if (value !== undefined)
            reflectionMergePartial<IndexDescriptor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndexDescriptor): IndexDescriptor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated string columns */ 2:
                    message.columns.push(reader.string());
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                case /* bool unique */ 4:
                    message.unique = reader.bool();
                    break;
                case /* optional stroppy.Value.Struct db_specific */ 5:
                    message.dbSpecific = Value_Struct.internalBinaryRead(reader, reader.uint32(), options, message.dbSpecific);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IndexDescriptor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated string columns = 2; */
        for (let i = 0; i < message.columns.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.columns[i]);
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        /* bool unique = 4; */
        if (message.unique !== false)
            writer.tag(4, WireType.Varint).bool(message.unique);
        /* optional stroppy.Value.Struct db_specific = 5; */
        if (message.dbSpecific)
            Value_Struct.internalBinaryWrite(message.dbSpecific, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.IndexDescriptor
 */
export const IndexDescriptor = new IndexDescriptor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ColumnDescriptor$Type extends MessageType<ColumnDescriptor> {
    constructor() {
        super("stroppy.ColumnDescriptor", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sql_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "nullable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "primary_key", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "unique", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "constraint", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ColumnDescriptor>): ColumnDescriptor {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.sqlType = "";
        message.nullable = false;
        message.primaryKey = false;
        message.unique = false;
        message.constraint = "";
        if (value !== undefined)
            reflectionMergePartial<ColumnDescriptor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ColumnDescriptor): ColumnDescriptor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string sql_type */ 2:
                    message.sqlType = reader.string();
                    break;
                case /* bool nullable */ 3:
                    message.nullable = reader.bool();
                    break;
                case /* bool primary_key */ 4:
                    message.primaryKey = reader.bool();
                    break;
                case /* bool unique */ 5:
                    message.unique = reader.bool();
                    break;
                case /* string constraint */ 6:
                    message.constraint = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ColumnDescriptor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string sql_type = 2; */
        if (message.sqlType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sqlType);
        /* bool nullable = 3; */
        if (message.nullable !== false)
            writer.tag(3, WireType.Varint).bool(message.nullable);
        /* bool primary_key = 4; */
        if (message.primaryKey !== false)
            writer.tag(4, WireType.Varint).bool(message.primaryKey);
        /* bool unique = 5; */
        if (message.unique !== false)
            writer.tag(5, WireType.Varint).bool(message.unique);
        /* string constraint = 6; */
        if (message.constraint !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.constraint);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.ColumnDescriptor
 */
export const ColumnDescriptor = new ColumnDescriptor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TableDescriptor$Type extends MessageType<TableDescriptor> {
    constructor() {
        super("stroppy.TableDescriptor", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "table_indexes", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => IndexDescriptor },
            { no: 5, name: "constraint", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "db_specific", kind: "message", T: () => Value_Struct },
            { no: 100, name: "columns", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ColumnDescriptor }
        ]);
    }
    create(value?: PartialMessage<TableDescriptor>): TableDescriptor {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.tableIndexes = [];
        message.constraint = "";
        message.columns = [];
        if (value !== undefined)
            reflectionMergePartial<TableDescriptor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TableDescriptor): TableDescriptor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated stroppy.IndexDescriptor table_indexes */ 3:
                    message.tableIndexes.push(IndexDescriptor.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string constraint */ 5:
                    message.constraint = reader.string();
                    break;
                case /* stroppy.Value.Struct db_specific */ 6:
                    message.dbSpecific = Value_Struct.internalBinaryRead(reader, reader.uint32(), options, message.dbSpecific);
                    break;
                case /* repeated stroppy.ColumnDescriptor columns */ 100:
                    message.columns.push(ColumnDescriptor.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TableDescriptor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated stroppy.IndexDescriptor table_indexes = 3; */
        for (let i = 0; i < message.tableIndexes.length; i++)
            IndexDescriptor.internalBinaryWrite(message.tableIndexes[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string constraint = 5; */
        if (message.constraint !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.constraint);
        /* stroppy.Value.Struct db_specific = 6; */
        if (message.dbSpecific)
            Value_Struct.internalBinaryWrite(message.dbSpecific, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated stroppy.ColumnDescriptor columns = 100; */
        for (let i = 0; i < message.columns.length; i++)
            ColumnDescriptor.internalBinaryWrite(message.columns[i], writer.tag(100, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.TableDescriptor
 */
export const TableDescriptor = new TableDescriptor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamDescriptor$Type extends MessageType<QueryParamDescriptor> {
    constructor() {
        super("stroppy.QueryParamDescriptor", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "replace_regex", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "generation_rule", kind: "message", T: () => Generation_Rule },
            { no: 4, name: "db_specific", kind: "message", T: () => Value_Struct }
        ]);
    }
    create(value?: PartialMessage<QueryParamDescriptor>): QueryParamDescriptor {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<QueryParamDescriptor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryParamDescriptor): QueryParamDescriptor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* optional string replace_regex */ 2:
                    message.replaceRegex = reader.string();
                    break;
                case /* stroppy.Generation.Rule generation_rule */ 3:
                    message.generationRule = Generation_Rule.internalBinaryRead(reader, reader.uint32(), options, message.generationRule);
                    break;
                case /* optional stroppy.Value.Struct db_specific */ 4:
                    message.dbSpecific = Value_Struct.internalBinaryRead(reader, reader.uint32(), options, message.dbSpecific);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryParamDescriptor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* optional string replace_regex = 2; */
        if (message.replaceRegex !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.replaceRegex);
        /* stroppy.Generation.Rule generation_rule = 3; */
        if (message.generationRule)
            Generation_Rule.internalBinaryWrite(message.generationRule, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional stroppy.Value.Struct db_specific = 4; */
        if (message.dbSpecific)
            Value_Struct.internalBinaryWrite(message.dbSpecific, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.QueryParamDescriptor
 */
export const QueryParamDescriptor = new QueryParamDescriptor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryParamGroup$Type extends MessageType<QueryParamGroup> {
    constructor() {
        super("stroppy.QueryParamGroup", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "params", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => QueryParamDescriptor }
        ]);
    }
    create(value?: PartialMessage<QueryParamGroup>): QueryParamGroup {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.params = [];
        if (value !== undefined)
            reflectionMergePartial<QueryParamGroup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryParamGroup): QueryParamGroup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated stroppy.QueryParamDescriptor params */ 2:
                    message.params.push(QueryParamDescriptor.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryParamGroup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated stroppy.QueryParamDescriptor params = 2; */
        for (let i = 0; i < message.params.length; i++)
            QueryParamDescriptor.internalBinaryWrite(message.params[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.QueryParamGroup
 */
export const QueryParamGroup = new QueryParamGroup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryDescriptor$Type extends MessageType<QueryDescriptor> {
    constructor() {
        super("stroppy.QueryDescriptor", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sql", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "params", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => QueryParamDescriptor },
            { no: 4, name: "groups", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => QueryParamGroup },
            { no: 5, name: "db_specific", kind: "message", T: () => Value_Struct }
        ]);
    }
    create(value?: PartialMessage<QueryDescriptor>): QueryDescriptor {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.sql = "";
        message.params = [];
        message.groups = [];
        if (value !== undefined)
            reflectionMergePartial<QueryDescriptor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryDescriptor): QueryDescriptor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string sql */ 2:
                    message.sql = reader.string();
                    break;
                case /* repeated stroppy.QueryParamDescriptor params */ 3:
                    message.params.push(QueryParamDescriptor.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated stroppy.QueryParamGroup groups */ 4:
                    message.groups.push(QueryParamGroup.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional stroppy.Value.Struct db_specific */ 5:
                    message.dbSpecific = Value_Struct.internalBinaryRead(reader, reader.uint32(), options, message.dbSpecific);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryDescriptor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string sql = 2; */
        if (message.sql !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sql);
        /* repeated stroppy.QueryParamDescriptor params = 3; */
        for (let i = 0; i < message.params.length; i++)
            QueryParamDescriptor.internalBinaryWrite(message.params[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated stroppy.QueryParamGroup groups = 4; */
        for (let i = 0; i < message.groups.length; i++)
            QueryParamGroup.internalBinaryWrite(message.groups[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional stroppy.Value.Struct db_specific = 5; */
        if (message.dbSpecific)
            Value_Struct.internalBinaryWrite(message.dbSpecific, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.QueryDescriptor
 */
export const QueryDescriptor = new QueryDescriptor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransactionDescriptor$Type extends MessageType<TransactionDescriptor> {
    constructor() {
        super("stroppy.TransactionDescriptor", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "isolation_level", kind: "enum", T: () => ["stroppy.TxIsolationLevel", TxIsolationLevel] },
            { no: 3, name: "queries", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => QueryDescriptor },
            { no: 5, name: "db_specific", kind: "message", T: () => Value_Struct }
        ]);
    }
    create(value?: PartialMessage<TransactionDescriptor>): TransactionDescriptor {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.isolationLevel = 0;
        message.queries = [];
        if (value !== undefined)
            reflectionMergePartial<TransactionDescriptor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransactionDescriptor): TransactionDescriptor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* stroppy.TxIsolationLevel isolation_level */ 2:
                    message.isolationLevel = reader.int32();
                    break;
                case /* repeated stroppy.QueryDescriptor queries */ 3:
                    message.queries.push(QueryDescriptor.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional stroppy.Value.Struct db_specific */ 5:
                    message.dbSpecific = Value_Struct.internalBinaryRead(reader, reader.uint32(), options, message.dbSpecific);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransactionDescriptor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* stroppy.TxIsolationLevel isolation_level = 2; */
        if (message.isolationLevel !== 0)
            writer.tag(2, WireType.Varint).int32(message.isolationLevel);
        /* repeated stroppy.QueryDescriptor queries = 3; */
        for (let i = 0; i < message.queries.length; i++)
            QueryDescriptor.internalBinaryWrite(message.queries[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional stroppy.Value.Struct db_specific = 5; */
        if (message.dbSpecific)
            Value_Struct.internalBinaryWrite(message.dbSpecific, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.TransactionDescriptor
 */
export const TransactionDescriptor = new TransactionDescriptor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnitDescriptor$Type extends MessageType<UnitDescriptor> {
    constructor() {
        super("stroppy.UnitDescriptor", [
            { no: 1, name: "create_table", kind: "message", oneof: "type", T: () => TableDescriptor },
            { no: 2, name: "query", kind: "message", oneof: "type", T: () => QueryDescriptor },
            { no: 4, name: "transaction", kind: "message", oneof: "type", T: () => TransactionDescriptor }
        ]);
    }
    create(value?: PartialMessage<UnitDescriptor>): UnitDescriptor {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UnitDescriptor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnitDescriptor): UnitDescriptor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stroppy.TableDescriptor create_table */ 1:
                    message.type = {
                        oneofKind: "createTable",
                        createTable: TableDescriptor.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).createTable)
                    };
                    break;
                case /* stroppy.QueryDescriptor query */ 2:
                    message.type = {
                        oneofKind: "query",
                        query: QueryDescriptor.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).query)
                    };
                    break;
                case /* stroppy.TransactionDescriptor transaction */ 4:
                    message.type = {
                        oneofKind: "transaction",
                        transaction: TransactionDescriptor.internalBinaryRead(reader, reader.uint32(), options, (message.type as any).transaction)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnitDescriptor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stroppy.TableDescriptor create_table = 1; */
        if (message.type.oneofKind === "createTable")
            TableDescriptor.internalBinaryWrite(message.type.createTable, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.QueryDescriptor query = 2; */
        if (message.type.oneofKind === "query")
            QueryDescriptor.internalBinaryWrite(message.type.query, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.TransactionDescriptor transaction = 4; */
        if (message.type.oneofKind === "transaction")
            TransactionDescriptor.internalBinaryWrite(message.type.transaction, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.UnitDescriptor
 */
export const UnitDescriptor = new UnitDescriptor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WorkloadUnitDescriptor$Type extends MessageType<WorkloadUnitDescriptor> {
    constructor() {
        super("stroppy.WorkloadUnitDescriptor", [
            { no: 6, name: "descriptor", kind: "message", T: () => UnitDescriptor },
            { no: 5, name: "count", kind: "scalar", T: 4 /*ScalarType.UINT64*/ }
        ]);
    }
    create(value?: PartialMessage<WorkloadUnitDescriptor>): WorkloadUnitDescriptor {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.count = "0";
        if (value !== undefined)
            reflectionMergePartial<WorkloadUnitDescriptor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WorkloadUnitDescriptor): WorkloadUnitDescriptor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stroppy.UnitDescriptor descriptor */ 6:
                    message.descriptor = UnitDescriptor.internalBinaryRead(reader, reader.uint32(), options, message.descriptor);
                    break;
                case /* uint64 count */ 5:
                    message.count = reader.uint64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WorkloadUnitDescriptor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 count = 5; */
        if (message.count !== "0")
            writer.tag(5, WireType.Varint).uint64(message.count);
        /* stroppy.UnitDescriptor descriptor = 6; */
        if (message.descriptor)
            UnitDescriptor.internalBinaryWrite(message.descriptor, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.WorkloadUnitDescriptor
 */
export const WorkloadUnitDescriptor = new WorkloadUnitDescriptor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WorkloadDescriptor$Type extends MessageType<WorkloadDescriptor> {
    constructor() {
        super("stroppy.WorkloadDescriptor", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "async", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "units", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => WorkloadUnitDescriptor }
        ]);
    }
    create(value?: PartialMessage<WorkloadDescriptor>): WorkloadDescriptor {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.async = false;
        message.units = [];
        if (value !== undefined)
            reflectionMergePartial<WorkloadDescriptor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WorkloadDescriptor): WorkloadDescriptor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* bool async */ 2:
                    message.async = reader.bool();
                    break;
                case /* repeated stroppy.WorkloadUnitDescriptor units */ 3:
                    message.units.push(WorkloadUnitDescriptor.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WorkloadDescriptor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* bool async = 2; */
        if (message.async !== false)
            writer.tag(2, WireType.Varint).bool(message.async);
        /* repeated stroppy.WorkloadUnitDescriptor units = 3; */
        for (let i = 0; i < message.units.length; i++)
            WorkloadUnitDescriptor.internalBinaryWrite(message.units[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.WorkloadDescriptor
 */
export const WorkloadDescriptor = new WorkloadDescriptor$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BenchmarkDescriptor$Type extends MessageType<BenchmarkDescriptor> {
    constructor() {
        super("stroppy.BenchmarkDescriptor", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 100, name: "workloads", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => WorkloadDescriptor }
        ]);
    }
    create(value?: PartialMessage<BenchmarkDescriptor>): BenchmarkDescriptor {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.workloads = [];
        if (value !== undefined)
            reflectionMergePartial<BenchmarkDescriptor>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BenchmarkDescriptor): BenchmarkDescriptor {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated stroppy.WorkloadDescriptor workloads */ 100:
                    message.workloads.push(WorkloadDescriptor.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BenchmarkDescriptor, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated stroppy.WorkloadDescriptor workloads = 100; */
        for (let i = 0; i < message.workloads.length; i++)
            WorkloadDescriptor.internalBinaryWrite(message.workloads[i], writer.tag(100, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.BenchmarkDescriptor
 */
export const BenchmarkDescriptor = new BenchmarkDescriptor$Type();
// @generated by protobuf-ts 2.11.1 with parameter force_disable_services,force_client_none,force_exclude_all_options,keep_enum_prefix,add_pb_suffix,long_type_string
// @generated from protobuf file "k6.proto" (package "stroppy", syntax proto3)
// tslint:disable

/**
 * *
 * K6Executor contains configuration for k6 load testing tool integration.
 * It contains paths to the k6 binary and the k6 test script, as well as
 * additional arguments to pass to the k6 binary.
 *
 * @generated from protobuf message stroppy.K6Options
 */
export interface K6Options {
    /**
     * * Additional arguments to pass to the k6 binary
     *
     * @generated from protobuf field: repeated string k6_args = 2
     */
    k6Args: string[];
    /**
     * * Timeout for k6 setup phase
     *
     * @generated from protobuf field: optional google.protobuf.Duration setup_timeout = 10
     */
    setupTimeout?: Duration;
    /**
     * * Scenario configuration
     *
     * @generated from protobuf field: stroppy.K6Scenario scenario = 200
     */
    scenario?: K6Scenario;
}
/**
 * *
 * Scenario defines the overall test scenario configuration.
 * It contains user tags, maximum duration, and executor configuration.
 * Documentation: https://grafana.com/docs/k6/latest/using-k6/scenarios/
 *
 * @generated from protobuf message stroppy.K6Scenario
 */
export interface K6Scenario {
    /**
     * * Maximum duration for scenario execution.
     * Used as a time limiter if main parameters (iterations, stages, duration)
     * do not complete in time.
     *
     * @generated from protobuf field: google.protobuf.Duration max_duration = 3
     */
    maxDuration?: Duration;
    /**
     * * Executor configuration (exactly one of these must be specified)
     *
     * @generated from protobuf oneof: executor
     */
    executor: {
        oneofKind: "sharedIterations";
        /**
         * * Shared iterations executor
         *
         * @generated from protobuf field: stroppy.SharedIterations shared_iterations = 10
         */
        sharedIterations: SharedIterations;
    } | {
        oneofKind: "perVuIterations";
        /**
         * * Per-VU iterations executor
         *
         * @generated from protobuf field: stroppy.PerVuIterations per_vu_iterations = 11
         */
        perVuIterations: PerVuIterations;
    } | {
        oneofKind: "constantVus";
        /**
         * * Constant VUs executor
         *
         * @generated from protobuf field: stroppy.ConstantVUs constant_vus = 12
         */
        constantVus: ConstantVUs;
    } | {
        oneofKind: "rampingVus";
        /**
         * * Ramping VUs executor
         *
         * @generated from protobuf field: stroppy.RampingVUs ramping_vus = 13
         */
        rampingVus: RampingVUs;
    } | {
        oneofKind: "constantArrivalRate";
        /**
         * * Constant arrival rate executor
         *
         * @generated from protobuf field: stroppy.ConstantArrivalRate constant_arrival_rate = 14
         */
        constantArrivalRate: ConstantArrivalRate;
    } | {
        oneofKind: "rampingArrivalRate";
        /**
         * * Ramping arrival rate executor
         *
         * @generated from protobuf field: stroppy.RampingArrivalRate ramping_arrival_rate = 15
         */
        rampingArrivalRate: RampingArrivalRate;
    } | {
        oneofKind: undefined;
    };
}
/**
 * *
 * SharedIterations executor configuration.
 * Documentation: https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/shared-iterations/
 *
 * @generated from protobuf message stroppy.SharedIterations
 */
export interface SharedIterations {
    /**
     * * Total number of iterations to be executed by all VUs together.
     * Iterations are distributed dynamically among available VUs.
     *
     * @generated from protobuf field: int64 iterations = 1
     */
    iterations: string;
    /**
     * * Number of virtual users that will execute these iterations in parallel
     *
     * @generated from protobuf field: uint32 vus = 2
     */
    vus: number;
}
/**
 * *
 * PerVuIterations executor configuration.
 * Documentation: https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/per-vu-iterations/
 *
 * @generated from protobuf message stroppy.PerVuIterations
 */
export interface PerVuIterations {
    /**
     * * Number of virtual users
     *
     * @generated from protobuf field: uint32 vus = 1
     */
    vus: number;
    /**
     * * Number of iterations that each VU should execute
     *
     * @generated from protobuf field: int64 iterations = 2
     */
    iterations: string;
}
/**
 * *
 * ConstantVUs executor configuration.
 * Documentation: https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/constant-vus/
 *
 * @generated from protobuf message stroppy.ConstantVUs
 */
export interface ConstantVUs {
    /**
     * * Fixed number of virtual users that will be simultaneously active at all times
     *
     * @generated from protobuf field: uint32 vus = 1
     */
    vus: number;
    /**
     * * Duration of the scenario execution.
     * All VUs will start and execute iterations until this time is completed.
     *
     * @generated from protobuf field: google.protobuf.Duration duration = 2
     */
    duration?: Duration;
}
/**
 * *
 * RampingVUs executor configuration.
 * Documentation: https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/ramping-vus/
 *
 * @generated from protobuf message stroppy.RampingVUs
 */
export interface RampingVUs {
    /**
     * * Initial number of virtual users
     *
     * @generated from protobuf field: uint32 start_vus = 1
     */
    startVus: number;
    /**
     * * List of stages where VU count changes to target value over specified time
     *
     * @generated from protobuf field: repeated stroppy.RampingVUs.VUStage stages = 2
     */
    stages: RampingVUs_VUStage[];
    /**
     * * Number of VUs allocated in advance.
     * Helps avoid delays when creating new VUs during the test.
     *
     * @generated from protobuf field: uint32 pre_allocated_vus = 3
     */
    preAllocatedVus: number;
    /**
     * * Maximum number of VUs available for pool expansion
     *
     * @generated from protobuf field: uint32 max_vus = 4
     */
    maxVus: number;
}
/**
 * * VU stage configuration for ramping
 *
 * @generated from protobuf message stroppy.RampingVUs.VUStage
 */
export interface RampingVUs_VUStage {
    /**
     * * Duration of the stage (e.g., "30s")
     *
     * @generated from protobuf field: google.protobuf.Duration duration = 1
     */
    duration?: Duration;
    /**
     * * Target number of VUs at the end of the stage
     *
     * @generated from protobuf field: uint32 target = 2
     */
    target: number;
}
/**
 * *
 * ConstantArrivalRate executor configuration.
 * Documentation: https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/constant-arrival-rate/
 *
 * @generated from protobuf message stroppy.ConstantArrivalRate
 */
export interface ConstantArrivalRate {
    /**
     * * Rate of iteration generation (number per time unit)
     *
     * @generated from protobuf field: uint32 rate = 1
     */
    rate: number;
    /**
     * * Time unit for the "rate" field (e.g., "1s")
     *
     * @generated from protobuf field: google.protobuf.Duration time_unit = 2
     */
    timeUnit?: Duration;
    /**
     * * Duration of the scenario
     *
     * @generated from protobuf field: google.protobuf.Duration duration = 3
     */
    duration?: Duration;
    /**
     * * Number of VUs allocated in advance
     *
     * @generated from protobuf field: uint32 pre_allocated_vus = 4
     */
    preAllocatedVus: number;
    /**
     * * Maximum allowed number of VUs if load increases
     *
     * @generated from protobuf field: uint32 max_vus = 5
     */
    maxVus: number;
}
/**
 * *
 * RampingArrivalRate executor configuration.
 * Documentation: https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/ramping-arrival-rate/
 *
 * @generated from protobuf message stroppy.RampingArrivalRate
 */
export interface RampingArrivalRate {
    /**
     * * Initial rate (iterations per time_unit)
     *
     * @generated from protobuf field: uint32 start_rate = 1
     */
    startRate: number;
    /**
     * * Time unit for the rate (e.g., "1s")
     *
     * @generated from protobuf field: google.protobuf.Duration time_unit = 2
     */
    timeUnit?: Duration;
    /**
     * * List of rate change stages
     *
     * @generated from protobuf field: repeated stroppy.RampingArrivalRate.RateStage stages = 3
     */
    stages: RampingArrivalRate_RateStage[];
    /**
     * * Number of VUs allocated in advance
     *
     * @generated from protobuf field: uint32 pre_allocated_vus = 4
     */
    preAllocatedVus: number;
    /**
     * * Maximum number of VUs available for pool expansion
     *
     * @generated from protobuf field: uint32 max_vus = 5
     */
    maxVus: number;
}
/**
 * * Rate stage configuration for ramping arrival rate
 *
 * @generated from protobuf message stroppy.RampingArrivalRate.RateStage
 */
export interface RampingArrivalRate_RateStage {
    /**
     * * Target rate (iterations per time_unit) at the end of the stage
     *
     * @generated from protobuf field: uint32 target = 1
     */
    target: number;
    /**
     * * Duration of the stage
     *
     * @generated from protobuf field: google.protobuf.Duration duration = 2
     */
    duration?: Duration;
}
// @generated message type with reflection information, may provide speed optimized methods
class K6Options$Type extends MessageType<K6Options> {
    constructor() {
        super("stroppy.K6Options", [
            { no: 2, name: "k6_args", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "setup_timeout", kind: "message", T: () => Duration },
            { no: 200, name: "scenario", kind: "message", T: () => K6Scenario }
        ]);
    }
    create(value?: PartialMessage<K6Options>): K6Options {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.k6Args = [];
        if (value !== undefined)
            reflectionMergePartial<K6Options>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: K6Options): K6Options {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string k6_args */ 2:
                    message.k6Args.push(reader.string());
                    break;
                case /* optional google.protobuf.Duration setup_timeout */ 10:
                    message.setupTimeout = Duration.internalBinaryRead(reader, reader.uint32(), options, message.setupTimeout);
                    break;
                case /* stroppy.K6Scenario scenario */ 200:
                    message.scenario = K6Scenario.internalBinaryRead(reader, reader.uint32(), options, message.scenario);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: K6Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string k6_args = 2; */
        for (let i = 0; i < message.k6Args.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.k6Args[i]);
        /* optional google.protobuf.Duration setup_timeout = 10; */
        if (message.setupTimeout)
            Duration.internalBinaryWrite(message.setupTimeout, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.K6Scenario scenario = 200; */
        if (message.scenario)
            K6Scenario.internalBinaryWrite(message.scenario, writer.tag(200, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.K6Options
 */
export const K6Options = new K6Options$Type();
// @generated message type with reflection information, may provide speed optimized methods
class K6Scenario$Type extends MessageType<K6Scenario> {
    constructor() {
        super("stroppy.K6Scenario", [
            { no: 3, name: "max_duration", kind: "message", T: () => Duration },
            { no: 10, name: "shared_iterations", kind: "message", oneof: "executor", T: () => SharedIterations },
            { no: 11, name: "per_vu_iterations", kind: "message", oneof: "executor", T: () => PerVuIterations },
            { no: 12, name: "constant_vus", kind: "message", oneof: "executor", T: () => ConstantVUs },
            { no: 13, name: "ramping_vus", kind: "message", oneof: "executor", T: () => RampingVUs },
            { no: 14, name: "constant_arrival_rate", kind: "message", oneof: "executor", T: () => ConstantArrivalRate },
            { no: 15, name: "ramping_arrival_rate", kind: "message", oneof: "executor", T: () => RampingArrivalRate }
        ]);
    }
    create(value?: PartialMessage<K6Scenario>): K6Scenario {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.executor = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<K6Scenario>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: K6Scenario): K6Scenario {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration max_duration */ 3:
                    message.maxDuration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.maxDuration);
                    break;
                case /* stroppy.SharedIterations shared_iterations */ 10:
                    message.executor = {
                        oneofKind: "sharedIterations",
                        sharedIterations: SharedIterations.internalBinaryRead(reader, reader.uint32(), options, (message.executor as any).sharedIterations)
                    };
                    break;
                case /* stroppy.PerVuIterations per_vu_iterations */ 11:
                    message.executor = {
                        oneofKind: "perVuIterations",
                        perVuIterations: PerVuIterations.internalBinaryRead(reader, reader.uint32(), options, (message.executor as any).perVuIterations)
                    };
                    break;
                case /* stroppy.ConstantVUs constant_vus */ 12:
                    message.executor = {
                        oneofKind: "constantVus",
                        constantVus: ConstantVUs.internalBinaryRead(reader, reader.uint32(), options, (message.executor as any).constantVus)
                    };
                    break;
                case /* stroppy.RampingVUs ramping_vus */ 13:
                    message.executor = {
                        oneofKind: "rampingVus",
                        rampingVus: RampingVUs.internalBinaryRead(reader, reader.uint32(), options, (message.executor as any).rampingVus)
                    };
                    break;
                case /* stroppy.ConstantArrivalRate constant_arrival_rate */ 14:
                    message.executor = {
                        oneofKind: "constantArrivalRate",
                        constantArrivalRate: ConstantArrivalRate.internalBinaryRead(reader, reader.uint32(), options, (message.executor as any).constantArrivalRate)
                    };
                    break;
                case /* stroppy.RampingArrivalRate ramping_arrival_rate */ 15:
                    message.executor = {
                        oneofKind: "rampingArrivalRate",
                        rampingArrivalRate: RampingArrivalRate.internalBinaryRead(reader, reader.uint32(), options, (message.executor as any).rampingArrivalRate)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: K6Scenario, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration max_duration = 3; */
        if (message.maxDuration)
            Duration.internalBinaryWrite(message.maxDuration, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.SharedIterations shared_iterations = 10; */
        if (message.executor.oneofKind === "sharedIterations")
            SharedIterations.internalBinaryWrite(message.executor.sharedIterations, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.PerVuIterations per_vu_iterations = 11; */
        if (message.executor.oneofKind === "perVuIterations")
            PerVuIterations.internalBinaryWrite(message.executor.perVuIterations, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.ConstantVUs constant_vus = 12; */
        if (message.executor.oneofKind === "constantVus")
            ConstantVUs.internalBinaryWrite(message.executor.constantVus, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.RampingVUs ramping_vus = 13; */
        if (message.executor.oneofKind === "rampingVus")
            RampingVUs.internalBinaryWrite(message.executor.rampingVus, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.ConstantArrivalRate constant_arrival_rate = 14; */
        if (message.executor.oneofKind === "constantArrivalRate")
            ConstantArrivalRate.internalBinaryWrite(message.executor.constantArrivalRate, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.RampingArrivalRate ramping_arrival_rate = 15; */
        if (message.executor.oneofKind === "rampingArrivalRate")
            RampingArrivalRate.internalBinaryWrite(message.executor.rampingArrivalRate, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.K6Scenario
 */
export const K6Scenario = new K6Scenario$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SharedIterations$Type extends MessageType<SharedIterations> {
    constructor() {
        super("stroppy.SharedIterations", [
            { no: 1, name: "iterations", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 2, name: "vus", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SharedIterations>): SharedIterations {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.iterations = "0";
        message.vus = 0;
        if (value !== undefined)
            reflectionMergePartial<SharedIterations>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SharedIterations): SharedIterations {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 iterations */ 1:
                    message.iterations = reader.int64().toString();
                    break;
                case /* uint32 vus */ 2:
                    message.vus = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SharedIterations, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 iterations = 1; */
        if (message.iterations !== "0")
            writer.tag(1, WireType.Varint).int64(message.iterations);
        /* uint32 vus = 2; */
        if (message.vus !== 0)
            writer.tag(2, WireType.Varint).uint32(message.vus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.SharedIterations
 */
export const SharedIterations = new SharedIterations$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PerVuIterations$Type extends MessageType<PerVuIterations> {
    constructor() {
        super("stroppy.PerVuIterations", [
            { no: 1, name: "vus", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "iterations", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<PerVuIterations>): PerVuIterations {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vus = 0;
        message.iterations = "0";
        if (value !== undefined)
            reflectionMergePartial<PerVuIterations>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PerVuIterations): PerVuIterations {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 vus */ 1:
                    message.vus = reader.uint32();
                    break;
                case /* int64 iterations */ 2:
                    message.iterations = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PerVuIterations, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 vus = 1; */
        if (message.vus !== 0)
            writer.tag(1, WireType.Varint).uint32(message.vus);
        /* int64 iterations = 2; */
        if (message.iterations !== "0")
            writer.tag(2, WireType.Varint).int64(message.iterations);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.PerVuIterations
 */
export const PerVuIterations = new PerVuIterations$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConstantVUs$Type extends MessageType<ConstantVUs> {
    constructor() {
        super("stroppy.ConstantVUs", [
            { no: 1, name: "vus", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "duration", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<ConstantVUs>): ConstantVUs {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vus = 0;
        if (value !== undefined)
            reflectionMergePartial<ConstantVUs>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConstantVUs): ConstantVUs {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 vus */ 1:
                    message.vus = reader.uint32();
                    break;
                case /* google.protobuf.Duration duration */ 2:
                    message.duration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.duration);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConstantVUs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 vus = 1; */
        if (message.vus !== 0)
            writer.tag(1, WireType.Varint).uint32(message.vus);
        /* google.protobuf.Duration duration = 2; */
        if (message.duration)
            Duration.internalBinaryWrite(message.duration, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.ConstantVUs
 */
export const ConstantVUs = new ConstantVUs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RampingVUs$Type extends MessageType<RampingVUs> {
    constructor() {
        super("stroppy.RampingVUs", [
            { no: 1, name: "start_vus", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "stages", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RampingVUs_VUStage },
            { no: 3, name: "pre_allocated_vus", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "max_vus", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RampingVUs>): RampingVUs {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.startVus = 0;
        message.stages = [];
        message.preAllocatedVus = 0;
        message.maxVus = 0;
        if (value !== undefined)
            reflectionMergePartial<RampingVUs>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RampingVUs): RampingVUs {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 start_vus */ 1:
                    message.startVus = reader.uint32();
                    break;
                case /* repeated stroppy.RampingVUs.VUStage stages */ 2:
                    message.stages.push(RampingVUs_VUStage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 pre_allocated_vus */ 3:
                    message.preAllocatedVus = reader.uint32();
                    break;
                case /* uint32 max_vus */ 4:
                    message.maxVus = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RampingVUs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 start_vus = 1; */
        if (message.startVus !== 0)
            writer.tag(1, WireType.Varint).uint32(message.startVus);
        /* repeated stroppy.RampingVUs.VUStage stages = 2; */
        for (let i = 0; i < message.stages.length; i++)
            RampingVUs_VUStage.internalBinaryWrite(message.stages[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint32 pre_allocated_vus = 3; */
        if (message.preAllocatedVus !== 0)
            writer.tag(3, WireType.Varint).uint32(message.preAllocatedVus);
        /* uint32 max_vus = 4; */
        if (message.maxVus !== 0)
            writer.tag(4, WireType.Varint).uint32(message.maxVus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.RampingVUs
 */
export const RampingVUs = new RampingVUs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RampingVUs_VUStage$Type extends MessageType<RampingVUs_VUStage> {
    constructor() {
        super("stroppy.RampingVUs.VUStage", [
            { no: 1, name: "duration", kind: "message", T: () => Duration },
            { no: 2, name: "target", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RampingVUs_VUStage>): RampingVUs_VUStage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.target = 0;
        if (value !== undefined)
            reflectionMergePartial<RampingVUs_VUStage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RampingVUs_VUStage): RampingVUs_VUStage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration duration */ 1:
                    message.duration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.duration);
                    break;
                case /* uint32 target */ 2:
                    message.target = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RampingVUs_VUStage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration duration = 1; */
        if (message.duration)
            Duration.internalBinaryWrite(message.duration, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint32 target = 2; */
        if (message.target !== 0)
            writer.tag(2, WireType.Varint).uint32(message.target);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.RampingVUs.VUStage
 */
export const RampingVUs_VUStage = new RampingVUs_VUStage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConstantArrivalRate$Type extends MessageType<ConstantArrivalRate> {
    constructor() {
        super("stroppy.ConstantArrivalRate", [
            { no: 1, name: "rate", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "time_unit", kind: "message", T: () => Duration },
            { no: 3, name: "duration", kind: "message", T: () => Duration },
            { no: 4, name: "pre_allocated_vus", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "max_vus", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ConstantArrivalRate>): ConstantArrivalRate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.rate = 0;
        message.preAllocatedVus = 0;
        message.maxVus = 0;
        if (value !== undefined)
            reflectionMergePartial<ConstantArrivalRate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConstantArrivalRate): ConstantArrivalRate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 rate */ 1:
                    message.rate = reader.uint32();
                    break;
                case /* google.protobuf.Duration time_unit */ 2:
                    message.timeUnit = Duration.internalBinaryRead(reader, reader.uint32(), options, message.timeUnit);
                    break;
                case /* google.protobuf.Duration duration */ 3:
                    message.duration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.duration);
                    break;
                case /* uint32 pre_allocated_vus */ 4:
                    message.preAllocatedVus = reader.uint32();
                    break;
                case /* uint32 max_vus */ 5:
                    message.maxVus = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConstantArrivalRate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 rate = 1; */
        if (message.rate !== 0)
            writer.tag(1, WireType.Varint).uint32(message.rate);
        /* google.protobuf.Duration time_unit = 2; */
        if (message.timeUnit)
            Duration.internalBinaryWrite(message.timeUnit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration duration = 3; */
        if (message.duration)
            Duration.internalBinaryWrite(message.duration, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* uint32 pre_allocated_vus = 4; */
        if (message.preAllocatedVus !== 0)
            writer.tag(4, WireType.Varint).uint32(message.preAllocatedVus);
        /* uint32 max_vus = 5; */
        if (message.maxVus !== 0)
            writer.tag(5, WireType.Varint).uint32(message.maxVus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.ConstantArrivalRate
 */
export const ConstantArrivalRate = new ConstantArrivalRate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RampingArrivalRate$Type extends MessageType<RampingArrivalRate> {
    constructor() {
        super("stroppy.RampingArrivalRate", [
            { no: 1, name: "start_rate", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "time_unit", kind: "message", T: () => Duration },
            { no: 3, name: "stages", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RampingArrivalRate_RateStage },
            { no: 4, name: "pre_allocated_vus", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "max_vus", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RampingArrivalRate>): RampingArrivalRate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.startRate = 0;
        message.stages = [];
        message.preAllocatedVus = 0;
        message.maxVus = 0;
        if (value !== undefined)
            reflectionMergePartial<RampingArrivalRate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RampingArrivalRate): RampingArrivalRate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 start_rate */ 1:
                    message.startRate = reader.uint32();
                    break;
                case /* google.protobuf.Duration time_unit */ 2:
                    message.timeUnit = Duration.internalBinaryRead(reader, reader.uint32(), options, message.timeUnit);
                    break;
                case /* repeated stroppy.RampingArrivalRate.RateStage stages */ 3:
                    message.stages.push(RampingArrivalRate_RateStage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 pre_allocated_vus */ 4:
                    message.preAllocatedVus = reader.uint32();
                    break;
                case /* uint32 max_vus */ 5:
                    message.maxVus = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RampingArrivalRate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 start_rate = 1; */
        if (message.startRate !== 0)
            writer.tag(1, WireType.Varint).uint32(message.startRate);
        /* google.protobuf.Duration time_unit = 2; */
        if (message.timeUnit)
            Duration.internalBinaryWrite(message.timeUnit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated stroppy.RampingArrivalRate.RateStage stages = 3; */
        for (let i = 0; i < message.stages.length; i++)
            RampingArrivalRate_RateStage.internalBinaryWrite(message.stages[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* uint32 pre_allocated_vus = 4; */
        if (message.preAllocatedVus !== 0)
            writer.tag(4, WireType.Varint).uint32(message.preAllocatedVus);
        /* uint32 max_vus = 5; */
        if (message.maxVus !== 0)
            writer.tag(5, WireType.Varint).uint32(message.maxVus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.RampingArrivalRate
 */
export const RampingArrivalRate = new RampingArrivalRate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RampingArrivalRate_RateStage$Type extends MessageType<RampingArrivalRate_RateStage> {
    constructor() {
        super("stroppy.RampingArrivalRate.RateStage", [
            { no: 1, name: "target", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "duration", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<RampingArrivalRate_RateStage>): RampingArrivalRate_RateStage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.target = 0;
        if (value !== undefined)
            reflectionMergePartial<RampingArrivalRate_RateStage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RampingArrivalRate_RateStage): RampingArrivalRate_RateStage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 target */ 1:
                    message.target = reader.uint32();
                    break;
                case /* google.protobuf.Duration duration */ 2:
                    message.duration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.duration);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RampingArrivalRate_RateStage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 target = 1; */
        if (message.target !== 0)
            writer.tag(1, WireType.Varint).uint32(message.target);
        /* google.protobuf.Duration duration = 2; */
        if (message.duration)
            Duration.internalBinaryWrite(message.duration, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.RampingArrivalRate.RateStage
 */
export const RampingArrivalRate_RateStage = new RampingArrivalRate_RateStage$Type();
// @generated by protobuf-ts 2.11.1 with parameter force_disable_services,force_client_none,force_exclude_all_options,keep_enum_prefix,add_pb_suffix,long_type_string
// @generated from protobuf file "runtime.proto" (package "stroppy", syntax proto3)
// tslint:disable

/**
 * *
 * StepContext provides contextual information to a benchmark step during
 * execution. It contains the run context and the step descriptor.
 *
 * @generated from protobuf message stroppy.StepContext
 */
export interface StepContext {
    /**
     * * Global configuration of the benchmark and its steps
     *
     * @generated from protobuf field: stroppy.GlobalConfig config = 1
     */
    config?: GlobalConfig;
    /**
     * * Current step
     *
     * @generated from protobuf field: stroppy.Step step = 2
     */
    step?: Step;
    /**
     * * Executor configuration
     *
     * @generated from protobuf field: stroppy.ExecutorConfig executor = 3
     */
    executor?: ExecutorConfig;
    /**
     * * Exporter configuration
     *
     * @generated from protobuf field: optional stroppy.ExporterConfig exporter = 4
     */
    exporter?: ExporterConfig;
    /**
     * * Current workload descriptor
     *
     * @generated from protobuf field: stroppy.WorkloadDescriptor workload = 5
     */
    workload?: WorkloadDescriptor;
}
/**
 * *
 * UnitBuildContext provides the context needed to build a unit from a
 * WorkloadUnitDescriptor.
 *
 * @generated from protobuf message stroppy.UnitContext
 */
export interface UnitContext {
    /**
     * * Step context
     *
     * @generated from protobuf field: stroppy.StepContext step_context = 1
     */
    stepContext?: StepContext;
    /**
     * * Current unit descriptor
     *
     * @generated from protobuf field: stroppy.WorkloadUnitDescriptor unit_descriptor = 2
     */
    unitDescriptor?: WorkloadUnitDescriptor;
}
/**
 * *
 * DriverQuery represents a query that can be executed by a database driver.
 *
 * @generated from protobuf message stroppy.DriverQuery
 */
export interface DriverQuery {
    /**
     * * Name of the query
     *
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * * Request of the query
     *
     * @generated from protobuf field: string request = 2
     */
    request: string;
    /**
     * * Parameters of the query
     *
     * @generated from protobuf field: repeated stroppy.Value params = 3
     */
    params: Value[];
}
/**
 * *
 * DriverTransaction represents a transaction that can be executed by a database
 * driver.
 *
 * @generated from protobuf message stroppy.DriverTransaction
 */
export interface DriverTransaction {
    /**
     * * Queries of the transaction
     *
     * @generated from protobuf field: repeated stroppy.DriverQuery queries = 1
     */
    queries: DriverQuery[];
    /**
     * * Isolation level of the transaction
     *
     * @generated from protobuf field: stroppy.TxIsolationLevel isolation_level = 2
     */
    isolationLevel: TxIsolationLevel;
}
/**
 * @generated from protobuf message stroppy.DriverQueryStat
 */
export interface DriverQueryStat {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: google.protobuf.Duration exec_duration = 2
     */
    execDuration?: Duration;
}
/**
 * @generated from protobuf message stroppy.DriverTransactionStat
 */
export interface DriverTransactionStat {
    /**
     * @generated from protobuf field: repeated stroppy.DriverQueryStat queries = 1
     */
    queries: DriverQueryStat[];
    /**
     * @generated from protobuf field: google.protobuf.Duration exec_duration = 2
     */
    execDuration?: Duration;
    /**
     * @generated from protobuf field: stroppy.TxIsolationLevel isolation_level = 3
     */
    isolationLevel: TxIsolationLevel;
}
// @generated message type with reflection information, may provide speed optimized methods
class StepContext$Type extends MessageType<StepContext> {
    constructor() {
        super("stroppy.StepContext", [
            { no: 1, name: "config", kind: "message", T: () => GlobalConfig },
            { no: 2, name: "step", kind: "message", T: () => Step },
            { no: 3, name: "executor", kind: "message", T: () => ExecutorConfig },
            { no: 4, name: "exporter", kind: "message", T: () => ExporterConfig },
            { no: 5, name: "workload", kind: "message", T: () => WorkloadDescriptor }
        ]);
    }
    create(value?: PartialMessage<StepContext>): StepContext {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StepContext>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StepContext): StepContext {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stroppy.GlobalConfig config */ 1:
                    message.config = GlobalConfig.internalBinaryRead(reader, reader.uint32(), options, message.config);
                    break;
                case /* stroppy.Step step */ 2:
                    message.step = Step.internalBinaryRead(reader, reader.uint32(), options, message.step);
                    break;
                case /* stroppy.ExecutorConfig executor */ 3:
                    message.executor = ExecutorConfig.internalBinaryRead(reader, reader.uint32(), options, message.executor);
                    break;
                case /* optional stroppy.ExporterConfig exporter */ 4:
                    message.exporter = ExporterConfig.internalBinaryRead(reader, reader.uint32(), options, message.exporter);
                    break;
                case /* stroppy.WorkloadDescriptor workload */ 5:
                    message.workload = WorkloadDescriptor.internalBinaryRead(reader, reader.uint32(), options, message.workload);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StepContext, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stroppy.GlobalConfig config = 1; */
        if (message.config)
            GlobalConfig.internalBinaryWrite(message.config, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.Step step = 2; */
        if (message.step)
            Step.internalBinaryWrite(message.step, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.ExecutorConfig executor = 3; */
        if (message.executor)
            ExecutorConfig.internalBinaryWrite(message.executor, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional stroppy.ExporterConfig exporter = 4; */
        if (message.exporter)
            ExporterConfig.internalBinaryWrite(message.exporter, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.WorkloadDescriptor workload = 5; */
        if (message.workload)
            WorkloadDescriptor.internalBinaryWrite(message.workload, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.StepContext
 */
export const StepContext = new StepContext$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnitContext$Type extends MessageType<UnitContext> {
    constructor() {
        super("stroppy.UnitContext", [
            { no: 1, name: "step_context", kind: "message", T: () => StepContext },
            { no: 2, name: "unit_descriptor", kind: "message", T: () => WorkloadUnitDescriptor }
        ]);
    }
    create(value?: PartialMessage<UnitContext>): UnitContext {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UnitContext>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnitContext): UnitContext {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* stroppy.StepContext step_context */ 1:
                    message.stepContext = StepContext.internalBinaryRead(reader, reader.uint32(), options, message.stepContext);
                    break;
                case /* stroppy.WorkloadUnitDescriptor unit_descriptor */ 2:
                    message.unitDescriptor = WorkloadUnitDescriptor.internalBinaryRead(reader, reader.uint32(), options, message.unitDescriptor);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnitContext, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* stroppy.StepContext step_context = 1; */
        if (message.stepContext)
            StepContext.internalBinaryWrite(message.stepContext, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.WorkloadUnitDescriptor unit_descriptor = 2; */
        if (message.unitDescriptor)
            WorkloadUnitDescriptor.internalBinaryWrite(message.unitDescriptor, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.UnitContext
 */
export const UnitContext = new UnitContext$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverQuery$Type extends MessageType<DriverQuery> {
    constructor() {
        super("stroppy.DriverQuery", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "request", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "params", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Value }
        ]);
    }
    create(value?: PartialMessage<DriverQuery>): DriverQuery {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.request = "";
        message.params = [];
        if (value !== undefined)
            reflectionMergePartial<DriverQuery>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverQuery): DriverQuery {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string request */ 2:
                    message.request = reader.string();
                    break;
                case /* repeated stroppy.Value params */ 3:
                    message.params.push(Value.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverQuery, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string request = 2; */
        if (message.request !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.request);
        /* repeated stroppy.Value params = 3; */
        for (let i = 0; i < message.params.length; i++)
            Value.internalBinaryWrite(message.params[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.DriverQuery
 */
export const DriverQuery = new DriverQuery$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverTransaction$Type extends MessageType<DriverTransaction> {
    constructor() {
        super("stroppy.DriverTransaction", [
            { no: 1, name: "queries", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DriverQuery },
            { no: 2, name: "isolation_level", kind: "enum", T: () => ["stroppy.TxIsolationLevel", TxIsolationLevel] }
        ]);
    }
    create(value?: PartialMessage<DriverTransaction>): DriverTransaction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.queries = [];
        message.isolationLevel = 0;
        if (value !== undefined)
            reflectionMergePartial<DriverTransaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverTransaction): DriverTransaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated stroppy.DriverQuery queries */ 1:
                    message.queries.push(DriverQuery.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* stroppy.TxIsolationLevel isolation_level */ 2:
                    message.isolationLevel = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverTransaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated stroppy.DriverQuery queries = 1; */
        for (let i = 0; i < message.queries.length; i++)
            DriverQuery.internalBinaryWrite(message.queries[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.TxIsolationLevel isolation_level = 2; */
        if (message.isolationLevel !== 0)
            writer.tag(2, WireType.Varint).int32(message.isolationLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.DriverTransaction
 */
export const DriverTransaction = new DriverTransaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverQueryStat$Type extends MessageType<DriverQueryStat> {
    constructor() {
        super("stroppy.DriverQueryStat", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "exec_duration", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<DriverQueryStat>): DriverQueryStat {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<DriverQueryStat>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverQueryStat): DriverQueryStat {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.Duration exec_duration */ 2:
                    message.execDuration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.execDuration);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverQueryStat, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.Duration exec_duration = 2; */
        if (message.execDuration)
            Duration.internalBinaryWrite(message.execDuration, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.DriverQueryStat
 */
export const DriverQueryStat = new DriverQueryStat$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DriverTransactionStat$Type extends MessageType<DriverTransactionStat> {
    constructor() {
        super("stroppy.DriverTransactionStat", [
            { no: 1, name: "queries", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DriverQueryStat },
            { no: 2, name: "exec_duration", kind: "message", T: () => Duration },
            { no: 3, name: "isolation_level", kind: "enum", T: () => ["stroppy.TxIsolationLevel", TxIsolationLevel] }
        ]);
    }
    create(value?: PartialMessage<DriverTransactionStat>): DriverTransactionStat {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.queries = [];
        message.isolationLevel = 0;
        if (value !== undefined)
            reflectionMergePartial<DriverTransactionStat>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DriverTransactionStat): DriverTransactionStat {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated stroppy.DriverQueryStat queries */ 1:
                    message.queries.push(DriverQueryStat.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* google.protobuf.Duration exec_duration */ 2:
                    message.execDuration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.execDuration);
                    break;
                case /* stroppy.TxIsolationLevel isolation_level */ 3:
                    message.isolationLevel = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DriverTransactionStat, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated stroppy.DriverQueryStat queries = 1; */
        for (let i = 0; i < message.queries.length; i++)
            DriverQueryStat.internalBinaryWrite(message.queries[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration exec_duration = 2; */
        if (message.execDuration)
            Duration.internalBinaryWrite(message.execDuration, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* stroppy.TxIsolationLevel isolation_level = 3; */
        if (message.isolationLevel !== 0)
            writer.tag(3, WireType.Varint).int32(message.isolationLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message stroppy.DriverTransactionStat
 */
export const DriverTransactionStat = new DriverTransactionStat$Type();
// @generated by protobuf-ts 2.11.1 with parameter force_disable_services,force_client_none,force_exclude_all_options,keep_enum_prefix,add_pb_suffix,long_type_string
// @generated from protobuf file "google/protobuf/descriptor.proto" (package "google.protobuf", syntax proto2)
// tslint:disable
//
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//
// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// The messages in this file describe the definitions found in .proto files.
// A valid .proto file can be translated directly to a FileDescriptorProto
// without any other information (e.g. without reading its imports).
//
/**
 * The protocol compiler can output a FileDescriptorSet containing the .proto
 * files it parses.
 *
 * @generated from protobuf message google.protobuf.FileDescriptorSet
 */
export interface FileDescriptorSet {
    /**
     * @generated from protobuf field: repeated google.protobuf.FileDescriptorProto file = 1
     */
    file: FileDescriptorProto[];
}
/**
 * Describes a complete .proto file.
 *
 * @generated from protobuf message google.protobuf.FileDescriptorProto
 */
export interface FileDescriptorProto {
    /**
     * @generated from protobuf field: optional string name = 1
     */
    name?: string; // file name, relative to root of source tree
    /**
     * @generated from protobuf field: optional string package = 2
     */
    package?: string; // e.g. "foo", "foo.bar", etc.
    /**
     * Names of files imported by this file.
     *
     * @generated from protobuf field: repeated string dependency = 3
     */
    dependency: string[];
    /**
     * Indexes of the public imported files in the dependency list above.
     *
     * @generated from protobuf field: repeated int32 public_dependency = 10
     */
    publicDependency: number[];
    /**
     * Indexes of the weak imported files in the dependency list.
     * For Google-internal migration only. Do not use.
     *
     * @generated from protobuf field: repeated int32 weak_dependency = 11
     */
    weakDependency: number[];
    /**
     * All top-level definitions in this file.
     *
     * @generated from protobuf field: repeated google.protobuf.DescriptorProto message_type = 4
     */
    messageType: DescriptorProto[];
    /**
     * @generated from protobuf field: repeated google.protobuf.EnumDescriptorProto enum_type = 5
     */
    enumType: EnumDescriptorProto[];
    /**
     * @generated from protobuf field: repeated google.protobuf.ServiceDescriptorProto service = 6
     */
    service: ServiceDescriptorProto[];
    /**
     * @generated from protobuf field: repeated google.protobuf.FieldDescriptorProto extension = 7
     */
    extension: FieldDescriptorProto[];
    /**
     * @generated from protobuf field: optional google.protobuf.FileOptions options = 8
     */
    options?: FileOptions;
    /**
     * This field contains optional information about the original source code.
     * You may safely remove this entire field without harming runtime
     * functionality of the descriptors -- the information is needed only by
     * development tools.
     *
     * @generated from protobuf field: optional google.protobuf.SourceCodeInfo source_code_info = 9
     */
    sourceCodeInfo?: SourceCodeInfo;
    /**
     * The syntax of the proto file.
     * The supported values are "proto2" and "proto3".
     *
     * @generated from protobuf field: optional string syntax = 12
     */
    syntax?: string;
}
/**
 * Describes a message type.
 *
 * @generated from protobuf message google.protobuf.DescriptorProto
 */
export interface DescriptorProto {
    /**
     * @generated from protobuf field: optional string name = 1
     */
    name?: string;
    /**
     * @generated from protobuf field: repeated google.protobuf.FieldDescriptorProto field = 2
     */
    field: FieldDescriptorProto[];
    /**
     * @generated from protobuf field: repeated google.protobuf.FieldDescriptorProto extension = 6
     */
    extension: FieldDescriptorProto[];
    /**
     * @generated from protobuf field: repeated google.protobuf.DescriptorProto nested_type = 3
     */
    nestedType: DescriptorProto[];
    /**
     * @generated from protobuf field: repeated google.protobuf.EnumDescriptorProto enum_type = 4
     */
    enumType: EnumDescriptorProto[];
    /**
     * @generated from protobuf field: repeated google.protobuf.DescriptorProto.ExtensionRange extension_range = 5
     */
    extensionRange: DescriptorProto_ExtensionRange[];
    /**
     * @generated from protobuf field: repeated google.protobuf.OneofDescriptorProto oneof_decl = 8
     */
    oneofDecl: OneofDescriptorProto[];
    /**
     * @generated from protobuf field: optional google.protobuf.MessageOptions options = 7
     */
    options?: MessageOptions;
    /**
     * @generated from protobuf field: repeated google.protobuf.DescriptorProto.ReservedRange reserved_range = 9
     */
    reservedRange: DescriptorProto_ReservedRange[];
    /**
     * Reserved field names, which may not be used by fields in the same message.
     * A given name may only be reserved once.
     *
     * @generated from protobuf field: repeated string reserved_name = 10
     */
    reservedName: string[];
}
/**
 * @generated from protobuf message google.protobuf.DescriptorProto.ExtensionRange
 */
export interface DescriptorProto_ExtensionRange {
    /**
     * @generated from protobuf field: optional int32 start = 1
     */
    start?: number; // Inclusive.
    /**
     * @generated from protobuf field: optional int32 end = 2
     */
    end?: number; // Exclusive.
    /**
     * @generated from protobuf field: optional google.protobuf.ExtensionRangeOptions options = 3
     */
    options?: ExtensionRangeOptions;
}
/**
 * Range of reserved tag numbers. Reserved tag numbers may not be used by
 * fields or extension ranges in the same message. Reserved ranges may
 * not overlap.
 *
 * @generated from protobuf message google.protobuf.DescriptorProto.ReservedRange
 */
export interface DescriptorProto_ReservedRange {
    /**
     * @generated from protobuf field: optional int32 start = 1
     */
    start?: number; // Inclusive.
    /**
     * @generated from protobuf field: optional int32 end = 2
     */
    end?: number; // Exclusive.
}
/**
 * @generated from protobuf message google.protobuf.ExtensionRangeOptions
 */
export interface ExtensionRangeOptions {
    /**
     * The parser stores options it doesn't recognize here. See above.
     *
     * @generated from protobuf field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999
     */
    uninterpretedOption: UninterpretedOption[];
}
/**
 * Describes a field within a message.
 *
 * @generated from protobuf message google.protobuf.FieldDescriptorProto
 */
export interface FieldDescriptorProto {
    /**
     * @generated from protobuf field: optional string name = 1
     */
    name?: string;
    /**
     * @generated from protobuf field: optional int32 number = 3
     */
    number?: number;
    /**
     * @generated from protobuf field: optional google.protobuf.FieldDescriptorProto.Label label = 4
     */
    label?: FieldDescriptorProto_Label;
    /**
     * If type_name is set, this need not be set.  If both this and type_name
     * are set, this must be one of TYPE_ENUM, TYPE_MESSAGE or TYPE_GROUP.
     *
     * @generated from protobuf field: optional google.protobuf.FieldDescriptorProto.Type type = 5
     */
    type?: FieldDescriptorProto_Type;
    /**
     * For message and enum types, this is the name of the type.  If the name
     * starts with a '.', it is fully-qualified.  Otherwise, C++-like scoping
     * rules are used to find the type (i.e. first the nested types within this
     * message are searched, then within the parent, on up to the root
     * namespace).
     *
     * @generated from protobuf field: optional string type_name = 6
     */
    typeName?: string;
    /**
     * For extensions, this is the name of the type being extended.  It is
     * resolved in the same manner as type_name.
     *
     * @generated from protobuf field: optional string extendee = 2
     */
    extendee?: string;
    /**
     * For numeric types, contains the original text representation of the value.
     * For booleans, "true" or "false".
     * For strings, contains the default text contents (not escaped in any way).
     * For bytes, contains the C escaped value.  All bytes >= 128 are escaped.
     * TODO(kenton):  Base-64 encode?
     *
     * @generated from protobuf field: optional string default_value = 7
     */
    defaultValue?: string;
    /**
     * If set, gives the index of a oneof in the containing type's oneof_decl
     * list.  This field is a member of that oneof.
     *
     * @generated from protobuf field: optional int32 oneof_index = 9
     */
    oneofIndex?: number;
    /**
     * JSON name of this field. The value is set by protocol compiler. If the
     * user has set a "json_name" option on this field, that option's value
     * will be used. Otherwise, it's deduced from the field's name by converting
     * it to camelCase.
     *
     * @generated from protobuf field: optional string json_name = 10
     */
    jsonName?: string;
    /**
     * @generated from protobuf field: optional google.protobuf.FieldOptions options = 8
     */
    options?: FieldOptions;
    /**
     * If true, this is a proto3 "optional". When a proto3 field is optional, it
     * tracks presence regardless of field type.
     *
     * When proto3_optional is true, this field must be belong to a oneof to
     * signal to old proto3 clients that presence is tracked for this field. This
     * oneof is known as a "synthetic" oneof, and this field must be its sole
     * member (each proto3 optional field gets its own synthetic oneof). Synthetic
     * oneofs exist in the descriptor only, and do not generate any API. Synthetic
     * oneofs must be ordered after all "real" oneofs.
     *
     * For message fields, proto3_optional doesn't create any semantic change,
     * since non-repeated message fields always track presence. However it still
     * indicates the semantic detail of whether the user wrote "optional" or not.
     * This can be useful for round-tripping the .proto file. For consistency we
     * give message fields a synthetic oneof also, even though it is not required
     * to track presence. This is especially important because the parser can't
     * tell if a field is a message or an enum, so it must always create a
     * synthetic oneof.
     *
     * Proto2 optional fields do not set this flag, because they already indicate
     * optional with `LABEL_OPTIONAL`.
     *
     * @generated from protobuf field: optional bool proto3_optional = 17
     */
    proto3Optional?: boolean;
}
/**
 * @generated from protobuf enum google.protobuf.FieldDescriptorProto.Type
 */
export enum FieldDescriptorProto_Type {
    /**
     * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
     */
    UNSPECIFIED$ = 0,
    /**
     * 0 is reserved for errors.
     * Order is weird for historical reasons.
     *
     * @generated from protobuf enum value: TYPE_DOUBLE = 1;
     */
    TYPE_DOUBLE = 1,
    /**
     * @generated from protobuf enum value: TYPE_FLOAT = 2;
     */
    TYPE_FLOAT = 2,
    /**
     * Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if
     * negative values are likely.
     *
     * @generated from protobuf enum value: TYPE_INT64 = 3;
     */
    TYPE_INT64 = 3,
    /**
     * @generated from protobuf enum value: TYPE_UINT64 = 4;
     */
    TYPE_UINT64 = 4,
    /**
     * Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if
     * negative values are likely.
     *
     * @generated from protobuf enum value: TYPE_INT32 = 5;
     */
    TYPE_INT32 = 5,
    /**
     * @generated from protobuf enum value: TYPE_FIXED64 = 6;
     */
    TYPE_FIXED64 = 6,
    /**
     * @generated from protobuf enum value: TYPE_FIXED32 = 7;
     */
    TYPE_FIXED32 = 7,
    /**
     * @generated from protobuf enum value: TYPE_BOOL = 8;
     */
    TYPE_BOOL = 8,
    /**
     * @generated from protobuf enum value: TYPE_STRING = 9;
     */
    TYPE_STRING = 9,
    /**
     * Tag-delimited aggregate.
     * Group type is deprecated and not supported in proto3. However, Proto3
     * implementations should still be able to parse the group wire format and
     * treat group fields as unknown fields.
     *
     * @generated from protobuf enum value: TYPE_GROUP = 10;
     */
    TYPE_GROUP = 10,
    /**
     * Length-delimited aggregate.
     *
     * @generated from protobuf enum value: TYPE_MESSAGE = 11;
     */
    TYPE_MESSAGE = 11,
    /**
     * New in version 2.
     *
     * @generated from protobuf enum value: TYPE_BYTES = 12;
     */
    TYPE_BYTES = 12,
    /**
     * @generated from protobuf enum value: TYPE_UINT32 = 13;
     */
    TYPE_UINT32 = 13,
    /**
     * @generated from protobuf enum value: TYPE_ENUM = 14;
     */
    TYPE_ENUM = 14,
    /**
     * @generated from protobuf enum value: TYPE_SFIXED32 = 15;
     */
    TYPE_SFIXED32 = 15,
    /**
     * @generated from protobuf enum value: TYPE_SFIXED64 = 16;
     */
    TYPE_SFIXED64 = 16,
    /**
     * Uses ZigZag encoding.
     *
     * @generated from protobuf enum value: TYPE_SINT32 = 17;
     */
    TYPE_SINT32 = 17,
    /**
     * Uses ZigZag encoding.
     *
     * @generated from protobuf enum value: TYPE_SINT64 = 18;
     */
    TYPE_SINT64 = 18
}
/**
 * @generated from protobuf enum google.protobuf.FieldDescriptorProto.Label
 */
export enum FieldDescriptorProto_Label {
    /**
     * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
     */
    UNSPECIFIED$ = 0,
    /**
     * 0 is reserved for errors
     *
     * @generated from protobuf enum value: LABEL_OPTIONAL = 1;
     */
    LABEL_OPTIONAL = 1,
    /**
     * @generated from protobuf enum value: LABEL_REQUIRED = 2;
     */
    LABEL_REQUIRED = 2,
    /**
     * @generated from protobuf enum value: LABEL_REPEATED = 3;
     */
    LABEL_REPEATED = 3
}
/**
 * Describes a oneof.
 *
 * @generated from protobuf message google.protobuf.OneofDescriptorProto
 */
export interface OneofDescriptorProto {
    /**
     * @generated from protobuf field: optional string name = 1
     */
    name?: string;
    /**
     * @generated from protobuf field: optional google.protobuf.OneofOptions options = 2
     */
    options?: OneofOptions;
}
/**
 * Describes an enum type.
 *
 * @generated from protobuf message google.protobuf.EnumDescriptorProto
 */
export interface EnumDescriptorProto {
    /**
     * @generated from protobuf field: optional string name = 1
     */
    name?: string;
    /**
     * @generated from protobuf field: repeated google.protobuf.EnumValueDescriptorProto value = 2
     */
    value: EnumValueDescriptorProto[];
    /**
     * @generated from protobuf field: optional google.protobuf.EnumOptions options = 3
     */
    options?: EnumOptions;
    /**
     * Range of reserved numeric values. Reserved numeric values may not be used
     * by enum values in the same enum declaration. Reserved ranges may not
     * overlap.
     *
     * @generated from protobuf field: repeated google.protobuf.EnumDescriptorProto.EnumReservedRange reserved_range = 4
     */
    reservedRange: EnumDescriptorProto_EnumReservedRange[];
    /**
     * Reserved enum value names, which may not be reused. A given name may only
     * be reserved once.
     *
     * @generated from protobuf field: repeated string reserved_name = 5
     */
    reservedName: string[];
}
/**
 * Range of reserved numeric values. Reserved values may not be used by
 * entries in the same enum. Reserved ranges may not overlap.
 *
 * Note that this is distinct from DescriptorProto.ReservedRange in that it
 * is inclusive such that it can appropriately represent the entire int32
 * domain.
 *
 * @generated from protobuf message google.protobuf.EnumDescriptorProto.EnumReservedRange
 */
export interface EnumDescriptorProto_EnumReservedRange {
    /**
     * @generated from protobuf field: optional int32 start = 1
     */
    start?: number; // Inclusive.
    /**
     * @generated from protobuf field: optional int32 end = 2
     */
    end?: number; // Inclusive.
}
/**
 * Describes a value within an enum.
 *
 * @generated from protobuf message google.protobuf.EnumValueDescriptorProto
 */
export interface EnumValueDescriptorProto {
    /**
     * @generated from protobuf field: optional string name = 1
     */
    name?: string;
    /**
     * @generated from protobuf field: optional int32 number = 2
     */
    number?: number;
    /**
     * @generated from protobuf field: optional google.protobuf.EnumValueOptions options = 3
     */
    options?: EnumValueOptions;
}
/**
 * Describes a service.
 *
 * @generated from protobuf message google.protobuf.ServiceDescriptorProto
 */
export interface ServiceDescriptorProto {
    /**
     * @generated from protobuf field: optional string name = 1
     */
    name?: string;
    /**
     * @generated from protobuf field: repeated google.protobuf.MethodDescriptorProto method = 2
     */
    method: MethodDescriptorProto[];
    /**
     * @generated from protobuf field: optional google.protobuf.ServiceOptions options = 3
     */
    options?: ServiceOptions;
}
/**
 * Describes a method of a service.
 *
 * @generated from protobuf message google.protobuf.MethodDescriptorProto
 */
export interface MethodDescriptorProto {
    /**
     * @generated from protobuf field: optional string name = 1
     */
    name?: string;
    /**
     * Input and output type names.  These are resolved in the same way as
     * FieldDescriptorProto.type_name, but must refer to a message type.
     *
     * @generated from protobuf field: optional string input_type = 2
     */
    inputType?: string;
    /**
     * @generated from protobuf field: optional string output_type = 3
     */
    outputType?: string;
    /**
     * @generated from protobuf field: optional google.protobuf.MethodOptions options = 4
     */
    options?: MethodOptions;
    /**
     * Identifies if client streams multiple client messages
     *
     * @generated from protobuf field: optional bool client_streaming = 5 [default = false]
     */
    clientStreaming?: boolean;
    /**
     * Identifies if server streams multiple server messages
     *
     * @generated from protobuf field: optional bool server_streaming = 6 [default = false]
     */
    serverStreaming?: boolean;
}
// ===================================================================
// Options

// Each of the definitions above may have "options" attached.  These are
// just annotations which may cause code to be generated slightly differently
// or may contain hints for code that manipulates protocol messages.
// 
// Clients may define custom options as extensions of the *Options messages.
// These extensions may not yet be known at parsing time, so the parser cannot
// store the values in them.  Instead it stores them in a field in the *Options
// message called uninterpreted_option. This field must have the same name
// across all *Options messages. We then use this field to populate the
// extensions when we build a descriptor, at which point all protos have been
// parsed and so all extensions are known.
// 
// Extension numbers for custom options may be chosen as follows:
// * For options which will only be used within a single application or
//   organization, or for experimental options, use field numbers 50000
//   through 99999.  It is up to you to ensure that you do not use the
//   same number for multiple options.
// * For options which will be published and used publicly by multiple
//   independent entities, e-mail protobuf-global-extension-registry@google.com
//   to reserve extension numbers. Simply provide your project name (e.g.
//   Objective-C plugin) and your project website (if available) -- there's no
//   need to explain how you intend to use them. Usually you only need one
//   extension number. You can declare multiple options with only one extension
//   number by putting them in a sub-message. See the Custom Options section of
//   the docs for examples:
//   https://developers.google.com/protocol-buffers/docs/proto#options
//   If this turns out to be popular, a web service will be set up
//   to automatically assign option numbers.

/**
 * @generated from protobuf message google.protobuf.FileOptions
 */
export interface FileOptions {
    /**
     * Sets the Java package where classes generated from this .proto will be
     * placed.  By default, the proto package is used, but this is often
     * inappropriate because proto packages do not normally start with backwards
     * domain names.
     *
     * @generated from protobuf field: optional string java_package = 1
     */
    javaPackage?: string;
    /**
     * Controls the name of the wrapper Java class generated for the .proto file.
     * That class will always contain the .proto file's getDescriptor() method as
     * well as any top-level extensions defined in the .proto file.
     * If java_multiple_files is disabled, then all the other classes from the
     * .proto file will be nested inside the single wrapper outer class.
     *
     * @generated from protobuf field: optional string java_outer_classname = 8
     */
    javaOuterClassname?: string;
    /**
     * If enabled, then the Java code generator will generate a separate .java
     * file for each top-level message, enum, and service defined in the .proto
     * file.  Thus, these types will *not* be nested inside the wrapper class
     * named by java_outer_classname.  However, the wrapper class will still be
     * generated to contain the file's getDescriptor() method as well as any
     * top-level extensions defined in the file.
     *
     * @generated from protobuf field: optional bool java_multiple_files = 10 [default = false]
     */
    javaMultipleFiles?: boolean;
    /**
     * This option does nothing.
     *
     * @deprecated
     * @generated from protobuf field: optional bool java_generate_equals_and_hash = 20 [deprecated = true]
     */
    javaGenerateEqualsAndHash?: boolean;
    /**
     * If set true, then the Java2 code generator will generate code that
     * throws an exception whenever an attempt is made to assign a non-UTF-8
     * byte sequence to a string field.
     * Message reflection will do the same.
     * However, an extension field still accepts non-UTF-8 byte sequences.
     * This option has no effect on when used with the lite runtime.
     *
     * @generated from protobuf field: optional bool java_string_check_utf8 = 27 [default = false]
     */
    javaStringCheckUtf8?: boolean;
    /**
     * @generated from protobuf field: optional google.protobuf.FileOptions.OptimizeMode optimize_for = 9 [default = SPEED]
     */
    optimizeFor?: FileOptions_OptimizeMode;
    /**
     * Sets the Go package where structs generated from this .proto will be
     * placed. If omitted, the Go package will be derived from the following:
     *   - The basename of the package import path, if provided.
     *   - Otherwise, the package statement in the .proto file, if present.
     *   - Otherwise, the basename of the .proto file, without extension.
     *
     * @generated from protobuf field: optional string go_package = 11
     */
    goPackage?: string;
    /**
     * Should generic services be generated in each language?  "Generic" services
     * are not specific to any particular RPC system.  They are generated by the
     * main code generators in each language (without additional plugins).
     * Generic services were the only kind of service generation supported by
     * early versions of google.protobuf.
     *
     * Generic services are now considered deprecated in favor of using plugins
     * that generate code specific to your particular RPC system.  Therefore,
     * these default to false.  Old code which depends on generic services should
     * explicitly set them to true.
     *
     * @generated from protobuf field: optional bool cc_generic_services = 16 [default = false]
     */
    ccGenericServices?: boolean;
    /**
     * @generated from protobuf field: optional bool java_generic_services = 17 [default = false]
     */
    javaGenericServices?: boolean;
    /**
     * @generated from protobuf field: optional bool py_generic_services = 18 [default = false]
     */
    pyGenericServices?: boolean;
    /**
     * @generated from protobuf field: optional bool php_generic_services = 42 [default = false]
     */
    phpGenericServices?: boolean;
    /**
     * Is this file deprecated?
     * Depending on the target platform, this can emit Deprecated annotations
     * for everything in the file, or it will be completely ignored; in the very
     * least, this is a formalization for deprecating files.
     *
     * @generated from protobuf field: optional bool deprecated = 23 [default = false]
     */
    deprecated?: boolean;
    /**
     * Enables the use of arenas for the proto messages in this file. This applies
     * only to generated classes for C++.
     *
     * @generated from protobuf field: optional bool cc_enable_arenas = 31 [default = true]
     */
    ccEnableArenas?: boolean;
    /**
     * Sets the objective c class prefix which is prepended to all objective c
     * generated classes from this .proto. There is no default.
     *
     * @generated from protobuf field: optional string objc_class_prefix = 36
     */
    objcClassPrefix?: string;
    /**
     * Namespace for generated classes; defaults to the package.
     *
     * @generated from protobuf field: optional string csharp_namespace = 37
     */
    csharpNamespace?: string;
    /**
     * By default Swift generators will take the proto package and CamelCase it
     * replacing '.' with underscore and use that to prefix the types/symbols
     * defined. When this options is provided, they will use this value instead
     * to prefix the types/symbols defined.
     *
     * @generated from protobuf field: optional string swift_prefix = 39
     */
    swiftPrefix?: string;
    /**
     * Sets the php class prefix which is prepended to all php generated classes
     * from this .proto. Default is empty.
     *
     * @generated from protobuf field: optional string php_class_prefix = 40
     */
    phpClassPrefix?: string;
    /**
     * Use this option to change the namespace of php generated classes. Default
     * is empty. When this option is empty, the package name will be used for
     * determining the namespace.
     *
     * @generated from protobuf field: optional string php_namespace = 41
     */
    phpNamespace?: string;
    /**
     * Use this option to change the namespace of php generated metadata classes.
     * Default is empty. When this option is empty, the proto file name will be
     * used for determining the namespace.
     *
     * @generated from protobuf field: optional string php_metadata_namespace = 44
     */
    phpMetadataNamespace?: string;
    /**
     * Use this option to change the package of ruby generated classes. Default
     * is empty. When this option is not set, the package name will be used for
     * determining the ruby package.
     *
     * @generated from protobuf field: optional string ruby_package = 45
     */
    rubyPackage?: string;
    /**
     * The parser stores options it doesn't recognize here.
     * See the documentation for the "Options" section above.
     *
     * @generated from protobuf field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999
     */
    uninterpretedOption: UninterpretedOption[];
}
/**
 * Generated classes can be optimized for speed or code size.
 *
 * @generated from protobuf enum google.protobuf.FileOptions.OptimizeMode
 */
export enum FileOptions_OptimizeMode {
    /**
     * @generated synthetic value - protobuf-ts requires all enums to have a 0 value
     */
    UNSPECIFIED$ = 0,
    /**
     * Generate complete code for parsing, serialization,
     *
     * @generated from protobuf enum value: SPEED = 1;
     */
    SPEED = 1,
    /**
     * etc.
     *
     * Use ReflectionOps to implement these methods.
     *
     * @generated from protobuf enum value: CODE_SIZE = 2;
     */
    CODE_SIZE = 2,
    /**
     * Generate code using MessageLite and the lite runtime.
     *
     * @generated from protobuf enum value: LITE_RUNTIME = 3;
     */
    LITE_RUNTIME = 3
}
/**
 * @generated from protobuf message google.protobuf.MessageOptions
 */
export interface MessageOptions {
    /**
     * Set true to use the old proto1 MessageSet wire format for extensions.
     * This is provided for backwards-compatibility with the MessageSet wire
     * format.  You should not use this for any other reason:  It's less
     * efficient, has fewer features, and is more complicated.
     *
     * The message must be defined exactly as follows:
     *   message Foo {
     *     option message_set_wire_format = true;
     *     extensions 4 to max;
     *   }
     * Note that the message cannot have any defined fields; MessageSets only
     * have extensions.
     *
     * All extensions of your type must be singular messages; e.g. they cannot
     * be int32s, enums, or repeated messages.
     *
     * Because this is an option, the above two restrictions are not enforced by
     * the protocol compiler.
     *
     * @generated from protobuf field: optional bool message_set_wire_format = 1 [default = false]
     */
    messageSetWireFormat?: boolean;
    /**
     * Disables the generation of the standard "descriptor()" accessor, which can
     * conflict with a field of the same name.  This is meant to make migration
     * from proto1 easier; new code should avoid fields named "descriptor".
     *
     * @generated from protobuf field: optional bool no_standard_descriptor_accessor = 2 [default = false]
     */
    noStandardDescriptorAccessor?: boolean;
    /**
     * Is this message deprecated?
     * Depending on the target platform, this can emit Deprecated annotations
     * for the message, or it will be completely ignored; in the very least,
     * this is a formalization for deprecating messages.
     *
     * @generated from protobuf field: optional bool deprecated = 3 [default = false]
     */
    deprecated?: boolean;
    /**
     * Whether the message is an automatically generated map entry type for the
     * maps field.
     *
     * For maps fields:
     *     map<KeyType, ValueType> map_field = 1;
     * The parsed descriptor looks like:
     *     message MapFieldEntry {
     *         option map_entry = true;
     *         optional KeyType key = 1;
     *         optional ValueType value = 2;
     *     }
     *     repeated MapFieldEntry map_field = 1;
     *
     * Implementations may choose not to generate the map_entry=true message, but
     * use a native map in the target language to hold the keys and values.
     * The reflection APIs in such implementations still need to work as
     * if the field is a repeated message field.
     *
     * NOTE: Do not set the option in .proto files. Always use the maps syntax
     * instead. The option should only be implicitly set by the proto compiler
     * parser.
     *
     * @generated from protobuf field: optional bool map_entry = 7
     */
    mapEntry?: boolean;
    /**
     * The parser stores options it doesn't recognize here. See above.
     *
     * @generated from protobuf field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999
     */
    uninterpretedOption: UninterpretedOption[];
}
/**
 * @generated from protobuf message google.protobuf.FieldOptions
 */
export interface FieldOptions {
    /**
     * The ctype option instructs the C++ code generator to use a different
     * representation of the field than it normally would.  See the specific
     * options below.  This option is not yet implemented in the open source
     * release -- sorry, we'll try to include it in a future version!
     *
     * @generated from protobuf field: optional google.protobuf.FieldOptions.CType ctype = 1 [default = STRING]
     */
    ctype?: FieldOptions_CType;
    /**
     * The packed option can be enabled for repeated primitive fields to enable
     * a more efficient representation on the wire. Rather than repeatedly
     * writing the tag and type for each element, the entire array is encoded as
     * a single length-delimited blob. In proto3, only explicit setting it to
     * false will avoid using packed encoding.
     *
     * @generated from protobuf field: optional bool packed = 2
     */
    packed?: boolean;
    /**
     * The jstype option determines the JavaScript type used for values of the
     * field.  The option is permitted only for 64 bit integral and fixed types
     * (int64, uint64, sint64, fixed64, sfixed64).  A field with jstype JS_STRING
     * is represented as JavaScript string, which avoids loss of precision that
     * can happen when a large value is converted to a floating point JavaScript.
     * Specifying JS_NUMBER for the jstype causes the generated JavaScript code to
     * use the JavaScript "number" type.  The behavior of the default option
     * JS_NORMAL is implementation dependent.
     *
     * This option is an enum to permit additional types to be added, e.g.
     * goog.math.Integer.
     *
     * @generated from protobuf field: optional google.protobuf.FieldOptions.JSType jstype = 6 [default = JS_NORMAL]
     */
    jstype?: FieldOptions_JSType;
    /**
     * Should this field be parsed lazily?  Lazy applies only to message-type
     * fields.  It means that when the outer message is initially parsed, the
     * inner message's contents will not be parsed but instead stored in encoded
     * form.  The inner message will actually be parsed when it is first accessed.
     *
     * This is only a hint.  Implementations are free to choose whether to use
     * eager or lazy parsing regardless of the value of this option.  However,
     * setting this option true suggests that the protocol author believes that
     * using lazy parsing on this field is worth the additional bookkeeping
     * overhead typically needed to implement it.
     *
     * This option does not affect the public interface of any generated code;
     * all method signatures remain the same.  Furthermore, thread-safety of the
     * interface is not affected by this option; const methods remain safe to
     * call from multiple threads concurrently, while non-const methods continue
     * to require exclusive access.
     *
     *
     * Note that implementations may choose not to check required fields within
     * a lazy sub-message.  That is, calling IsInitialized() on the outer message
     * may return true even if the inner message has missing required fields.
     * This is necessary because otherwise the inner message would have to be
     * parsed in order to perform the check, defeating the purpose of lazy
     * parsing.  An implementation which chooses not to check required fields
     * must be consistent about it.  That is, for any particular sub-message, the
     * implementation must either *always* check its required fields, or *never*
     * check its required fields, regardless of whether or not the message has
     * been parsed.
     *
     * @generated from protobuf field: optional bool lazy = 5 [default = false]
     */
    lazy?: boolean;
    /**
     * Is this field deprecated?
     * Depending on the target platform, this can emit Deprecated annotations
     * for accessors, or it will be completely ignored; in the very least, this
     * is a formalization for deprecating fields.
     *
     * @generated from protobuf field: optional bool deprecated = 3 [default = false]
     */
    deprecated?: boolean;
    /**
     * For Google-internal migration only. Do not use.
     *
     * @generated from protobuf field: optional bool weak = 10 [default = false]
     */
    weak?: boolean;
    /**
     * The parser stores options it doesn't recognize here. See above.
     *
     * @generated from protobuf field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999
     */
    uninterpretedOption: UninterpretedOption[];
}
/**
 * @generated from protobuf enum google.protobuf.FieldOptions.CType
 */
export enum FieldOptions_CType {
    /**
     * Default mode.
     *
     * @generated from protobuf enum value: STRING = 0;
     */
    STRING = 0,
    /**
     * @generated from protobuf enum value: CORD = 1;
     */
    CORD = 1,
    /**
     * @generated from protobuf enum value: STRING_PIECE = 2;
     */
    STRING_PIECE = 2
}
/**
 * @generated from protobuf enum google.protobuf.FieldOptions.JSType
 */
export enum FieldOptions_JSType {
    /**
     * Use the default type.
     *
     * @generated from protobuf enum value: JS_NORMAL = 0;
     */
    JS_NORMAL = 0,
    /**
     * Use JavaScript strings.
     *
     * @generated from protobuf enum value: JS_STRING = 1;
     */
    JS_STRING = 1,
    /**
     * Use JavaScript numbers.
     *
     * @generated from protobuf enum value: JS_NUMBER = 2;
     */
    JS_NUMBER = 2
}
/**
 * @generated from protobuf message google.protobuf.OneofOptions
 */
export interface OneofOptions {
    /**
     * The parser stores options it doesn't recognize here. See above.
     *
     * @generated from protobuf field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999
     */
    uninterpretedOption: UninterpretedOption[];
}
/**
 * @generated from protobuf message google.protobuf.EnumOptions
 */
export interface EnumOptions {
    /**
     * Set this option to true to allow mapping different tag names to the same
     * value.
     *
     * @generated from protobuf field: optional bool allow_alias = 2
     */
    allowAlias?: boolean;
    /**
     * Is this enum deprecated?
     * Depending on the target platform, this can emit Deprecated annotations
     * for the enum, or it will be completely ignored; in the very least, this
     * is a formalization for deprecating enums.
     *
     * @generated from protobuf field: optional bool deprecated = 3 [default = false]
     */
    deprecated?: boolean;
    /**
     * The parser stores options it doesn't recognize here. See above.
     *
     * @generated from protobuf field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999
     */
    uninterpretedOption: UninterpretedOption[];
}
/**
 * @generated from protobuf message google.protobuf.EnumValueOptions
 */
export interface EnumValueOptions {
    /**
     * Is this enum value deprecated?
     * Depending on the target platform, this can emit Deprecated annotations
     * for the enum value, or it will be completely ignored; in the very least,
     * this is a formalization for deprecating enum values.
     *
     * @generated from protobuf field: optional bool deprecated = 1 [default = false]
     */
    deprecated?: boolean;
    /**
     * The parser stores options it doesn't recognize here. See above.
     *
     * @generated from protobuf field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999
     */
    uninterpretedOption: UninterpretedOption[];
}
/**
 * @generated from protobuf message google.protobuf.ServiceOptions
 */
export interface ServiceOptions {
    // Note:  Field numbers 1 through 32 are reserved for Google's internal RPC
    //   framework.  We apologize for hoarding these numbers to ourselves, but
    //   we were already using them long before we decided to release Protocol
    //   Buffers.

    /**
     * Is this service deprecated?
     * Depending on the target platform, this can emit Deprecated annotations
     * for the service, or it will be completely ignored; in the very least,
     * this is a formalization for deprecating services.
     *
     * @generated from protobuf field: optional bool deprecated = 33 [default = false]
     */
    deprecated?: boolean;
    /**
     * The parser stores options it doesn't recognize here. See above.
     *
     * @generated from protobuf field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999
     */
    uninterpretedOption: UninterpretedOption[];
}
/**
 * @generated from protobuf message google.protobuf.MethodOptions
 */
export interface MethodOptions {
    // Note:  Field numbers 1 through 32 are reserved for Google's internal RPC
    //   framework.  We apologize for hoarding these numbers to ourselves, but
    //   we were already using them long before we decided to release Protocol
    //   Buffers.

    /**
     * Is this method deprecated?
     * Depending on the target platform, this can emit Deprecated annotations
     * for the method, or it will be completely ignored; in the very least,
     * this is a formalization for deprecating methods.
     *
     * @generated from protobuf field: optional bool deprecated = 33 [default = false]
     */
    deprecated?: boolean;
    /**
     * @generated from protobuf field: optional google.protobuf.MethodOptions.IdempotencyLevel idempotency_level = 34 [default = IDEMPOTENCY_UNKNOWN]
     */
    idempotencyLevel?: MethodOptions_IdempotencyLevel;
    /**
     * The parser stores options it doesn't recognize here. See above.
     *
     * @generated from protobuf field: repeated google.protobuf.UninterpretedOption uninterpreted_option = 999
     */
    uninterpretedOption: UninterpretedOption[];
}
/**
 * Is this method side-effect-free (or safe in HTTP parlance), or idempotent,
 * or neither? HTTP based RPC implementation may choose GET verb for safe
 * methods, and PUT verb for idempotent methods instead of the default POST.
 *
 * @generated from protobuf enum google.protobuf.MethodOptions.IdempotencyLevel
 */
export enum MethodOptions_IdempotencyLevel {
    /**
     * @generated from protobuf enum value: IDEMPOTENCY_UNKNOWN = 0;
     */
    IDEMPOTENCY_UNKNOWN = 0,
    /**
     * implies idempotent
     *
     * @generated from protobuf enum value: NO_SIDE_EFFECTS = 1;
     */
    NO_SIDE_EFFECTS = 1,
    /**
     * idempotent, but may have side effects
     *
     * @generated from protobuf enum value: IDEMPOTENT = 2;
     */
    IDEMPOTENT = 2
}
/**
 * A message representing a option the parser does not recognize. This only
 * appears in options protos created by the compiler::Parser class.
 * DescriptorPool resolves these when building Descriptor objects. Therefore,
 * options protos in descriptor objects (e.g. returned by Descriptor::options(),
 * or produced by Descriptor::CopyTo()) will never have UninterpretedOptions
 * in them.
 *
 * @generated from protobuf message google.protobuf.UninterpretedOption
 */
export interface UninterpretedOption {
    /**
     * @generated from protobuf field: repeated google.protobuf.UninterpretedOption.NamePart name = 2
     */
    name: UninterpretedOption_NamePart[];
    /**
     * The value of the uninterpreted option, in whatever type the tokenizer
     * identified it as during parsing. Exactly one of these should be set.
     *
     * @generated from protobuf field: optional string identifier_value = 3
     */
    identifierValue?: string;
    /**
     * @generated from protobuf field: optional uint64 positive_int_value = 4
     */
    positiveIntValue?: string;
    /**
     * @generated from protobuf field: optional int64 negative_int_value = 5
     */
    negativeIntValue?: string;
    /**
     * @generated from protobuf field: optional double double_value = 6
     */
    doubleValue?: number;
    /**
     * @generated from protobuf field: optional bytes string_value = 7
     */
    stringValue?: Uint8Array;
    /**
     * @generated from protobuf field: optional string aggregate_value = 8
     */
    aggregateValue?: string;
}
/**
 * The name of the uninterpreted option.  Each string represents a segment in
 * a dot-separated name.  is_extension is true iff a segment represents an
 * extension (denoted with parentheses in options specs in .proto files).
 * E.g.,{ ["foo", false], ["bar.baz", true], ["qux", false] } represents
 * "foo.(bar.baz).qux".
 *
 * @generated from protobuf message google.protobuf.UninterpretedOption.NamePart
 */
export interface UninterpretedOption_NamePart {
    /**
     * @generated from protobuf field: required string name_part = 1
     */
    namePart: string;
    /**
     * @generated from protobuf field: required bool is_extension = 2
     */
    isExtension: boolean;
}
// ===================================================================
// Optional source code info

/**
 * Encapsulates information about the original source file from which a
 * FileDescriptorProto was generated.
 *
 * @generated from protobuf message google.protobuf.SourceCodeInfo
 */
export interface SourceCodeInfo {
    /**
     * A Location identifies a piece of source code in a .proto file which
     * corresponds to a particular definition.  This information is intended
     * to be useful to IDEs, code indexers, documentation generators, and similar
     * tools.
     *
     * For example, say we have a file like:
     *   message Foo {
     *     optional string foo = 1;
     *   }
     * Let's look at just the field definition:
     *   optional string foo = 1;
     *   ^       ^^     ^^  ^  ^^^
     *   a       bc     de  f  ghi
     * We have the following locations:
     *   span   path               represents
     *   [a,i)  [ 4, 0, 2, 0 ]     The whole field definition.
     *   [a,b)  [ 4, 0, 2, 0, 4 ]  The label (optional).
     *   [c,d)  [ 4, 0, 2, 0, 5 ]  The type (string).
     *   [e,f)  [ 4, 0, 2, 0, 1 ]  The name (foo).
     *   [g,h)  [ 4, 0, 2, 0, 3 ]  The number (1).
     *
     * Notes:
     * - A location may refer to a repeated field itself (i.e. not to any
     *   particular index within it).  This is used whenever a set of elements are
     *   logically enclosed in a single code segment.  For example, an entire
     *   extend block (possibly containing multiple extension definitions) will
     *   have an outer location whose path refers to the "extensions" repeated
     *   field without an index.
     * - Multiple locations may have the same path.  This happens when a single
     *   logical declaration is spread out across multiple places.  The most
     *   obvious example is the "extend" block again -- there may be multiple
     *   extend blocks in the same scope, each of which will have the same path.
     * - A location's span is not always a subset of its parent's span.  For
     *   example, the "extendee" of an extension declaration appears at the
     *   beginning of the "extend" block and is shared by all extensions within
     *   the block.
     * - Just because a location's span is a subset of some other location's span
     *   does not mean that it is a descendant.  For example, a "group" defines
     *   both a type and a field in a single declaration.  Thus, the locations
     *   corresponding to the type and field and their components will overlap.
     * - Code which tries to interpret locations should probably be designed to
     *   ignore those that it doesn't understand, as more types of locations could
     *   be recorded in the future.
     *
     * @generated from protobuf field: repeated google.protobuf.SourceCodeInfo.Location location = 1
     */
    location: SourceCodeInfo_Location[];
}
/**
 * @generated from protobuf message google.protobuf.SourceCodeInfo.Location
 */
export interface SourceCodeInfo_Location {
    /**
     * Identifies which part of the FileDescriptorProto was defined at this
     * location.
     *
     * Each element is a field number or an index.  They form a path from
     * the root FileDescriptorProto to the place where the definition.  For
     * example, this path:
     *   [ 4, 3, 2, 7, 1 ]
     * refers to:
     *   file.message_type(3)  // 4, 3
     *       .field(7)         // 2, 7
     *       .name()           // 1
     * This is because FileDescriptorProto.message_type has field number 4:
     *   repeated DescriptorProto message_type = 4;
     * and DescriptorProto.field has field number 2:
     *   repeated FieldDescriptorProto field = 2;
     * and FieldDescriptorProto.name has field number 1:
     *   optional string name = 1;
     *
     * Thus, the above path gives the location of a field name.  If we removed
     * the last element:
     *   [ 4, 3, 2, 7 ]
     * this path refers to the whole field declaration (from the beginning
     * of the label to the terminating semicolon).
     *
     * @generated from protobuf field: repeated int32 path = 1 [packed = true]
     */
    path: number[];
    /**
     * Always has exactly three or four elements: start line, start column,
     * end line (optional, otherwise assumed same as start line), end column.
     * These are packed into a single field for efficiency.  Note that line
     * and column numbers are zero-based -- typically you will want to add
     * 1 to each before displaying to a user.
     *
     * @generated from protobuf field: repeated int32 span = 2 [packed = true]
     */
    span: number[];
    /**
     * If this SourceCodeInfo represents a complete declaration, these are any
     * comments appearing before and after the declaration which appear to be
     * attached to the declaration.
     *
     * A series of line comments appearing on consecutive lines, with no other
     * tokens appearing on those lines, will be treated as a single comment.
     *
     * leading_detached_comments will keep paragraphs of comments that appear
     * before (but not connected to) the current element. Each paragraph,
     * separated by empty lines, will be one comment element in the repeated
     * field.
     *
     * Only the comment content is provided; comment markers (e.g. //) are
     * stripped out.  For block comments, leading whitespace and an asterisk
     * will be stripped from the beginning of each line other than the first.
     * Newlines are included in the output.
     *
     * Examples:
     *
     *   optional int32 foo = 1;  // Comment attached to foo.
     *   // Comment attached to bar.
     *   optional int32 bar = 2;
     *
     *   optional string baz = 3;
     *   // Comment attached to baz.
     *   // Another line attached to baz.
     *
     *   // Comment attached to qux.
     *   //
     *   // Another line attached to qux.
     *   optional double qux = 4;
     *
     *   // Detached comment for corge. This is not leading or trailing comments
     *   // to qux or corge because there are blank lines separating it from
     *   // both.
     *
     *   // Detached comment for corge paragraph 2.
     *
     *   optional string corge = 5;
     *   /* Block comment attached
     *    * to corge.  Leading asterisks
     *    * will be removed. *\/
     *   /* Block comment attached to
     *    * grault. *\/
     *   optional int32 grault = 6;
     *
     *   // ignored detached comments.
     *
     * @generated from protobuf field: optional string leading_comments = 3
     */
    leadingComments?: string;
    /**
     * @generated from protobuf field: optional string trailing_comments = 4
     */
    trailingComments?: string;
    /**
     * @generated from protobuf field: repeated string leading_detached_comments = 6
     */
    leadingDetachedComments: string[];
}
/**
 * Describes the relationship between generated code and its original source
 * file. A GeneratedCodeInfo message is associated with only one generated
 * source file, but may contain references to different source .proto files.
 *
 * @generated from protobuf message google.protobuf.GeneratedCodeInfo
 */
export interface GeneratedCodeInfo {
    /**
     * An Annotation connects some span of text in generated code to an element
     * of its generating .proto file.
     *
     * @generated from protobuf field: repeated google.protobuf.GeneratedCodeInfo.Annotation annotation = 1
     */
    annotation: GeneratedCodeInfo_Annotation[];
}
/**
 * @generated from protobuf message google.protobuf.GeneratedCodeInfo.Annotation
 */
export interface GeneratedCodeInfo_Annotation {
    /**
     * Identifies the element in the original source .proto file. This field
     * is formatted the same as SourceCodeInfo.Location.path.
     *
     * @generated from protobuf field: repeated int32 path = 1 [packed = true]
     */
    path: number[];
    /**
     * Identifies the filesystem path to the original source .proto.
     *
     * @generated from protobuf field: optional string source_file = 2
     */
    sourceFile?: string;
    /**
     * Identifies the starting offset in bytes in the generated code
     * that relates to the identified object.
     *
     * @generated from protobuf field: optional int32 begin = 3
     */
    begin?: number;
    /**
     * Identifies the ending offset in bytes in the generated code that
     * relates to the identified offset. The end offset should be one past
     * the last relevant byte (so the length of the text = end - begin).
     *
     * @generated from protobuf field: optional int32 end = 4
     */
    end?: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class FileDescriptorSet$Type extends MessageType<FileDescriptorSet> {
    constructor() {
        super("google.protobuf.FileDescriptorSet", [
            { no: 1, name: "file", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => FileDescriptorProto }
        ]);
    }
    create(value?: PartialMessage<FileDescriptorSet>): FileDescriptorSet {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.file = [];
        if (value !== undefined)
            reflectionMergePartial<FileDescriptorSet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FileDescriptorSet): FileDescriptorSet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.protobuf.FileDescriptorProto file */ 1:
                    message.file.push(FileDescriptorProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FileDescriptorSet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.protobuf.FileDescriptorProto file = 1; */
        for (let i = 0; i < message.file.length; i++)
            FileDescriptorProto.internalBinaryWrite(message.file[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.FileDescriptorSet
 */
export const FileDescriptorSet = new FileDescriptorSet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FileDescriptorProto$Type extends MessageType<FileDescriptorProto> {
    constructor() {
        super("google.protobuf.FileDescriptorProto", [
            { no: 1, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "package", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "dependency", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "public_dependency", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "weak_dependency", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "message_type", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DescriptorProto },
            { no: 5, name: "enum_type", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => EnumDescriptorProto },
            { no: 6, name: "service", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ServiceDescriptorProto },
            { no: 7, name: "extension", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => FieldDescriptorProto },
            { no: 8, name: "options", kind: "message", T: () => FileOptions },
            { no: 9, name: "source_code_info", kind: "message", T: () => SourceCodeInfo },
            { no: 12, name: "syntax", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FileDescriptorProto>): FileDescriptorProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dependency = [];
        message.publicDependency = [];
        message.weakDependency = [];
        message.messageType = [];
        message.enumType = [];
        message.service = [];
        message.extension = [];
        if (value !== undefined)
            reflectionMergePartial<FileDescriptorProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FileDescriptorProto): FileDescriptorProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string name */ 1:
                    message.name = reader.string();
                    break;
                case /* optional string package */ 2:
                    message.package = reader.string();
                    break;
                case /* repeated string dependency */ 3:
                    message.dependency.push(reader.string());
                    break;
                case /* repeated int32 public_dependency */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.publicDependency.push(reader.int32());
                    else
                        message.publicDependency.push(reader.int32());
                    break;
                case /* repeated int32 weak_dependency */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.weakDependency.push(reader.int32());
                    else
                        message.weakDependency.push(reader.int32());
                    break;
                case /* repeated google.protobuf.DescriptorProto message_type */ 4:
                    message.messageType.push(DescriptorProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.protobuf.EnumDescriptorProto enum_type */ 5:
                    message.enumType.push(EnumDescriptorProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.protobuf.ServiceDescriptorProto service */ 6:
                    message.service.push(ServiceDescriptorProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.protobuf.FieldDescriptorProto extension */ 7:
                    message.extension.push(FieldDescriptorProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional google.protobuf.FileOptions options */ 8:
                    message.options = FileOptions.internalBinaryRead(reader, reader.uint32(), options, message.options);
                    break;
                case /* optional google.protobuf.SourceCodeInfo source_code_info */ 9:
                    message.sourceCodeInfo = SourceCodeInfo.internalBinaryRead(reader, reader.uint32(), options, message.sourceCodeInfo);
                    break;
                case /* optional string syntax */ 12:
                    message.syntax = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FileDescriptorProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string name = 1; */
        if (message.name !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* optional string package = 2; */
        if (message.package !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.package);
        /* repeated string dependency = 3; */
        for (let i = 0; i < message.dependency.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.dependency[i]);
        /* repeated google.protobuf.DescriptorProto message_type = 4; */
        for (let i = 0; i < message.messageType.length; i++)
            DescriptorProto.internalBinaryWrite(message.messageType[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.protobuf.EnumDescriptorProto enum_type = 5; */
        for (let i = 0; i < message.enumType.length; i++)
            EnumDescriptorProto.internalBinaryWrite(message.enumType[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.protobuf.ServiceDescriptorProto service = 6; */
        for (let i = 0; i < message.service.length; i++)
            ServiceDescriptorProto.internalBinaryWrite(message.service[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.protobuf.FieldDescriptorProto extension = 7; */
        for (let i = 0; i < message.extension.length; i++)
            FieldDescriptorProto.internalBinaryWrite(message.extension[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.FileOptions options = 8; */
        if (message.options)
            FileOptions.internalBinaryWrite(message.options, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.SourceCodeInfo source_code_info = 9; */
        if (message.sourceCodeInfo)
            SourceCodeInfo.internalBinaryWrite(message.sourceCodeInfo, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 public_dependency = 10; */
        for (let i = 0; i < message.publicDependency.length; i++)
            writer.tag(10, WireType.Varint).int32(message.publicDependency[i]);
        /* repeated int32 weak_dependency = 11; */
        for (let i = 0; i < message.weakDependency.length; i++)
            writer.tag(11, WireType.Varint).int32(message.weakDependency[i]);
        /* optional string syntax = 12; */
        if (message.syntax !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.syntax);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.FileDescriptorProto
 */
export const FileDescriptorProto = new FileDescriptorProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DescriptorProto$Type extends MessageType<DescriptorProto> {
    constructor() {
        super("google.protobuf.DescriptorProto", [
            { no: 1, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "field", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => FieldDescriptorProto },
            { no: 6, name: "extension", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => FieldDescriptorProto },
            { no: 3, name: "nested_type", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DescriptorProto },
            { no: 4, name: "enum_type", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => EnumDescriptorProto },
            { no: 5, name: "extension_range", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DescriptorProto_ExtensionRange },
            { no: 8, name: "oneof_decl", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => OneofDescriptorProto },
            { no: 7, name: "options", kind: "message", T: () => MessageOptions },
            { no: 9, name: "reserved_range", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DescriptorProto_ReservedRange },
            { no: 10, name: "reserved_name", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DescriptorProto>): DescriptorProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.field = [];
        message.extension = [];
        message.nestedType = [];
        message.enumType = [];
        message.extensionRange = [];
        message.oneofDecl = [];
        message.reservedRange = [];
        message.reservedName = [];
        if (value !== undefined)
            reflectionMergePartial<DescriptorProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DescriptorProto): DescriptorProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated google.protobuf.FieldDescriptorProto field */ 2:
                    message.field.push(FieldDescriptorProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.protobuf.FieldDescriptorProto extension */ 6:
                    message.extension.push(FieldDescriptorProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.protobuf.DescriptorProto nested_type */ 3:
                    message.nestedType.push(DescriptorProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.protobuf.EnumDescriptorProto enum_type */ 4:
                    message.enumType.push(EnumDescriptorProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.protobuf.DescriptorProto.ExtensionRange extension_range */ 5:
                    message.extensionRange.push(DescriptorProto_ExtensionRange.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.protobuf.OneofDescriptorProto oneof_decl */ 8:
                    message.oneofDecl.push(OneofDescriptorProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional google.protobuf.MessageOptions options */ 7:
                    message.options = MessageOptions.internalBinaryRead(reader, reader.uint32(), options, message.options);
                    break;
                case /* repeated google.protobuf.DescriptorProto.ReservedRange reserved_range */ 9:
                    message.reservedRange.push(DescriptorProto_ReservedRange.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string reserved_name */ 10:
                    message.reservedName.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DescriptorProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string name = 1; */
        if (message.name !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated google.protobuf.FieldDescriptorProto field = 2; */
        for (let i = 0; i < message.field.length; i++)
            FieldDescriptorProto.internalBinaryWrite(message.field[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.protobuf.DescriptorProto nested_type = 3; */
        for (let i = 0; i < message.nestedType.length; i++)
            DescriptorProto.internalBinaryWrite(message.nestedType[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.protobuf.EnumDescriptorProto enum_type = 4; */
        for (let i = 0; i < message.enumType.length; i++)
            EnumDescriptorProto.internalBinaryWrite(message.enumType[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.protobuf.DescriptorProto.ExtensionRange extension_range = 5; */
        for (let i = 0; i < message.extensionRange.length; i++)
            DescriptorProto_ExtensionRange.internalBinaryWrite(message.extensionRange[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.protobuf.FieldDescriptorProto extension = 6; */
        for (let i = 0; i < message.extension.length; i++)
            FieldDescriptorProto.internalBinaryWrite(message.extension[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.MessageOptions options = 7; */
        if (message.options)
            MessageOptions.internalBinaryWrite(message.options, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.protobuf.OneofDescriptorProto oneof_decl = 8; */
        for (let i = 0; i < message.oneofDecl.length; i++)
            OneofDescriptorProto.internalBinaryWrite(message.oneofDecl[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.protobuf.DescriptorProto.ReservedRange reserved_range = 9; */
        for (let i = 0; i < message.reservedRange.length; i++)
            DescriptorProto_ReservedRange.internalBinaryWrite(message.reservedRange[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* repeated string reserved_name = 10; */
        for (let i = 0; i < message.reservedName.length; i++)
            writer.tag(10, WireType.LengthDelimited).string(message.reservedName[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.DescriptorProto
 */
export const DescriptorProto = new DescriptorProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DescriptorProto_ExtensionRange$Type extends MessageType<DescriptorProto_ExtensionRange> {
    constructor() {
        super("google.protobuf.DescriptorProto.ExtensionRange", [
            { no: 1, name: "start", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "end", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "options", kind: "message", T: () => ExtensionRangeOptions }
        ]);
    }
    create(value?: PartialMessage<DescriptorProto_ExtensionRange>): DescriptorProto_ExtensionRange {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DescriptorProto_ExtensionRange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DescriptorProto_ExtensionRange): DescriptorProto_ExtensionRange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 start */ 1:
                    message.start = reader.int32();
                    break;
                case /* optional int32 end */ 2:
                    message.end = reader.int32();
                    break;
                case /* optional google.protobuf.ExtensionRangeOptions options */ 3:
                    message.options = ExtensionRangeOptions.internalBinaryRead(reader, reader.uint32(), options, message.options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DescriptorProto_ExtensionRange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 start = 1; */
        if (message.start !== undefined)
            writer.tag(1, WireType.Varint).int32(message.start);
        /* optional int32 end = 2; */
        if (message.end !== undefined)
            writer.tag(2, WireType.Varint).int32(message.end);
        /* optional google.protobuf.ExtensionRangeOptions options = 3; */
        if (message.options)
            ExtensionRangeOptions.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.DescriptorProto.ExtensionRange
 */
export const DescriptorProto_ExtensionRange = new DescriptorProto_ExtensionRange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DescriptorProto_ReservedRange$Type extends MessageType<DescriptorProto_ReservedRange> {
    constructor() {
        super("google.protobuf.DescriptorProto.ReservedRange", [
            { no: 1, name: "start", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "end", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DescriptorProto_ReservedRange>): DescriptorProto_ReservedRange {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DescriptorProto_ReservedRange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DescriptorProto_ReservedRange): DescriptorProto_ReservedRange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 start */ 1:
                    message.start = reader.int32();
                    break;
                case /* optional int32 end */ 2:
                    message.end = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DescriptorProto_ReservedRange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 start = 1; */
        if (message.start !== undefined)
            writer.tag(1, WireType.Varint).int32(message.start);
        /* optional int32 end = 2; */
        if (message.end !== undefined)
            writer.tag(2, WireType.Varint).int32(message.end);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.DescriptorProto.ReservedRange
 */
export const DescriptorProto_ReservedRange = new DescriptorProto_ReservedRange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExtensionRangeOptions$Type extends MessageType<ExtensionRangeOptions> {
    constructor() {
        super("google.protobuf.ExtensionRangeOptions", [
            { no: 999, name: "uninterpreted_option", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => UninterpretedOption }
        ]);
    }
    create(value?: PartialMessage<ExtensionRangeOptions>): ExtensionRangeOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uninterpretedOption = [];
        if (value !== undefined)
            reflectionMergePartial<ExtensionRangeOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExtensionRangeOptions): ExtensionRangeOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.protobuf.UninterpretedOption uninterpreted_option */ 999:
                    message.uninterpretedOption.push(UninterpretedOption.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExtensionRangeOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.protobuf.UninterpretedOption uninterpreted_option = 999; */
        for (let i = 0; i < message.uninterpretedOption.length; i++)
            UninterpretedOption.internalBinaryWrite(message.uninterpretedOption[i], writer.tag(999, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.ExtensionRangeOptions
 */
export const ExtensionRangeOptions = new ExtensionRangeOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldDescriptorProto$Type extends MessageType<FieldDescriptorProto> {
    constructor() {
        super("google.protobuf.FieldDescriptorProto", [
            { no: 1, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "number", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "label", kind: "enum", opt: true, T: () => ["google.protobuf.FieldDescriptorProto.Label", FieldDescriptorProto_Label] },
            { no: 5, name: "type", kind: "enum", opt: true, T: () => ["google.protobuf.FieldDescriptorProto.Type", FieldDescriptorProto_Type] },
            { no: 6, name: "type_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "extendee", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "default_value", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "oneof_index", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "json_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "options", kind: "message", T: () => FieldOptions },
            { no: 17, name: "proto3_optional", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FieldDescriptorProto>): FieldDescriptorProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<FieldDescriptorProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldDescriptorProto): FieldDescriptorProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string name */ 1:
                    message.name = reader.string();
                    break;
                case /* optional int32 number */ 3:
                    message.number = reader.int32();
                    break;
                case /* optional google.protobuf.FieldDescriptorProto.Label label */ 4:
                    message.label = reader.int32();
                    break;
                case /* optional google.protobuf.FieldDescriptorProto.Type type */ 5:
                    message.type = reader.int32();
                    break;
                case /* optional string type_name */ 6:
                    message.typeName = reader.string();
                    break;
                case /* optional string extendee */ 2:
                    message.extendee = reader.string();
                    break;
                case /* optional string default_value */ 7:
                    message.defaultValue = reader.string();
                    break;
                case /* optional int32 oneof_index */ 9:
                    message.oneofIndex = reader.int32();
                    break;
                case /* optional string json_name */ 10:
                    message.jsonName = reader.string();
                    break;
                case /* optional google.protobuf.FieldOptions options */ 8:
                    message.options = FieldOptions.internalBinaryRead(reader, reader.uint32(), options, message.options);
                    break;
                case /* optional bool proto3_optional */ 17:
                    message.proto3Optional = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldDescriptorProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string name = 1; */
        if (message.name !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* optional string extendee = 2; */
        if (message.extendee !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.extendee);
        /* optional int32 number = 3; */
        if (message.number !== undefined)
            writer.tag(3, WireType.Varint).int32(message.number);
        /* optional google.protobuf.FieldDescriptorProto.Label label = 4; */
        if (message.label !== undefined)
            writer.tag(4, WireType.Varint).int32(message.label);
        /* optional google.protobuf.FieldDescriptorProto.Type type = 5; */
        if (message.type !== undefined)
            writer.tag(5, WireType.Varint).int32(message.type);
        /* optional string type_name = 6; */
        if (message.typeName !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.typeName);
        /* optional string default_value = 7; */
        if (message.defaultValue !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.defaultValue);
        /* optional google.protobuf.FieldOptions options = 8; */
        if (message.options)
            FieldOptions.internalBinaryWrite(message.options, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 oneof_index = 9; */
        if (message.oneofIndex !== undefined)
            writer.tag(9, WireType.Varint).int32(message.oneofIndex);
        /* optional string json_name = 10; */
        if (message.jsonName !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.jsonName);
        /* optional bool proto3_optional = 17; */
        if (message.proto3Optional !== undefined)
            writer.tag(17, WireType.Varint).bool(message.proto3Optional);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.FieldDescriptorProto
 */
export const FieldDescriptorProto = new FieldDescriptorProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OneofDescriptorProto$Type extends MessageType<OneofDescriptorProto> {
    constructor() {
        super("google.protobuf.OneofDescriptorProto", [
            { no: 1, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "options", kind: "message", T: () => OneofOptions }
        ]);
    }
    create(value?: PartialMessage<OneofDescriptorProto>): OneofDescriptorProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<OneofDescriptorProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OneofDescriptorProto): OneofDescriptorProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string name */ 1:
                    message.name = reader.string();
                    break;
                case /* optional google.protobuf.OneofOptions options */ 2:
                    message.options = OneofOptions.internalBinaryRead(reader, reader.uint32(), options, message.options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OneofDescriptorProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string name = 1; */
        if (message.name !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* optional google.protobuf.OneofOptions options = 2; */
        if (message.options)
            OneofOptions.internalBinaryWrite(message.options, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.OneofDescriptorProto
 */
export const OneofDescriptorProto = new OneofDescriptorProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnumDescriptorProto$Type extends MessageType<EnumDescriptorProto> {
    constructor() {
        super("google.protobuf.EnumDescriptorProto", [
            { no: 1, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => EnumValueDescriptorProto },
            { no: 3, name: "options", kind: "message", T: () => EnumOptions },
            { no: 4, name: "reserved_range", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => EnumDescriptorProto_EnumReservedRange },
            { no: 5, name: "reserved_name", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EnumDescriptorProto>): EnumDescriptorProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = [];
        message.reservedRange = [];
        message.reservedName = [];
        if (value !== undefined)
            reflectionMergePartial<EnumDescriptorProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnumDescriptorProto): EnumDescriptorProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated google.protobuf.EnumValueDescriptorProto value */ 2:
                    message.value.push(EnumValueDescriptorProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional google.protobuf.EnumOptions options */ 3:
                    message.options = EnumOptions.internalBinaryRead(reader, reader.uint32(), options, message.options);
                    break;
                case /* repeated google.protobuf.EnumDescriptorProto.EnumReservedRange reserved_range */ 4:
                    message.reservedRange.push(EnumDescriptorProto_EnumReservedRange.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string reserved_name */ 5:
                    message.reservedName.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnumDescriptorProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string name = 1; */
        if (message.name !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated google.protobuf.EnumValueDescriptorProto value = 2; */
        for (let i = 0; i < message.value.length; i++)
            EnumValueDescriptorProto.internalBinaryWrite(message.value[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.EnumOptions options = 3; */
        if (message.options)
            EnumOptions.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.protobuf.EnumDescriptorProto.EnumReservedRange reserved_range = 4; */
        for (let i = 0; i < message.reservedRange.length; i++)
            EnumDescriptorProto_EnumReservedRange.internalBinaryWrite(message.reservedRange[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated string reserved_name = 5; */
        for (let i = 0; i < message.reservedName.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.reservedName[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.EnumDescriptorProto
 */
export const EnumDescriptorProto = new EnumDescriptorProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnumDescriptorProto_EnumReservedRange$Type extends MessageType<EnumDescriptorProto_EnumReservedRange> {
    constructor() {
        super("google.protobuf.EnumDescriptorProto.EnumReservedRange", [
            { no: 1, name: "start", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "end", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnumDescriptorProto_EnumReservedRange>): EnumDescriptorProto_EnumReservedRange {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EnumDescriptorProto_EnumReservedRange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnumDescriptorProto_EnumReservedRange): EnumDescriptorProto_EnumReservedRange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 start */ 1:
                    message.start = reader.int32();
                    break;
                case /* optional int32 end */ 2:
                    message.end = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnumDescriptorProto_EnumReservedRange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 start = 1; */
        if (message.start !== undefined)
            writer.tag(1, WireType.Varint).int32(message.start);
        /* optional int32 end = 2; */
        if (message.end !== undefined)
            writer.tag(2, WireType.Varint).int32(message.end);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.EnumDescriptorProto.EnumReservedRange
 */
export const EnumDescriptorProto_EnumReservedRange = new EnumDescriptorProto_EnumReservedRange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnumValueDescriptorProto$Type extends MessageType<EnumValueDescriptorProto> {
    constructor() {
        super("google.protobuf.EnumValueDescriptorProto", [
            { no: 1, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "number", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "options", kind: "message", T: () => EnumValueOptions }
        ]);
    }
    create(value?: PartialMessage<EnumValueDescriptorProto>): EnumValueDescriptorProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EnumValueDescriptorProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnumValueDescriptorProto): EnumValueDescriptorProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string name */ 1:
                    message.name = reader.string();
                    break;
                case /* optional int32 number */ 2:
                    message.number = reader.int32();
                    break;
                case /* optional google.protobuf.EnumValueOptions options */ 3:
                    message.options = EnumValueOptions.internalBinaryRead(reader, reader.uint32(), options, message.options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnumValueDescriptorProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string name = 1; */
        if (message.name !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* optional int32 number = 2; */
        if (message.number !== undefined)
            writer.tag(2, WireType.Varint).int32(message.number);
        /* optional google.protobuf.EnumValueOptions options = 3; */
        if (message.options)
            EnumValueOptions.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.EnumValueDescriptorProto
 */
export const EnumValueDescriptorProto = new EnumValueDescriptorProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceDescriptorProto$Type extends MessageType<ServiceDescriptorProto> {
    constructor() {
        super("google.protobuf.ServiceDescriptorProto", [
            { no: 1, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "method", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => MethodDescriptorProto },
            { no: 3, name: "options", kind: "message", T: () => ServiceOptions }
        ]);
    }
    create(value?: PartialMessage<ServiceDescriptorProto>): ServiceDescriptorProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.method = [];
        if (value !== undefined)
            reflectionMergePartial<ServiceDescriptorProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceDescriptorProto): ServiceDescriptorProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string name */ 1:
                    message.name = reader.string();
                    break;
                case /* repeated google.protobuf.MethodDescriptorProto method */ 2:
                    message.method.push(MethodDescriptorProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional google.protobuf.ServiceOptions options */ 3:
                    message.options = ServiceOptions.internalBinaryRead(reader, reader.uint32(), options, message.options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceDescriptorProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string name = 1; */
        if (message.name !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* repeated google.protobuf.MethodDescriptorProto method = 2; */
        for (let i = 0; i < message.method.length; i++)
            MethodDescriptorProto.internalBinaryWrite(message.method[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.ServiceOptions options = 3; */
        if (message.options)
            ServiceOptions.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.ServiceDescriptorProto
 */
export const ServiceDescriptorProto = new ServiceDescriptorProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MethodDescriptorProto$Type extends MessageType<MethodDescriptorProto> {
    constructor() {
        super("google.protobuf.MethodDescriptorProto", [
            { no: 1, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "input_type", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "output_type", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "options", kind: "message", T: () => MethodOptions },
            { no: 5, name: "client_streaming", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "server_streaming", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MethodDescriptorProto>): MethodDescriptorProto {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MethodDescriptorProto>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MethodDescriptorProto): MethodDescriptorProto {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string name */ 1:
                    message.name = reader.string();
                    break;
                case /* optional string input_type */ 2:
                    message.inputType = reader.string();
                    break;
                case /* optional string output_type */ 3:
                    message.outputType = reader.string();
                    break;
                case /* optional google.protobuf.MethodOptions options */ 4:
                    message.options = MethodOptions.internalBinaryRead(reader, reader.uint32(), options, message.options);
                    break;
                case /* optional bool client_streaming = 5 [default = false] */ 5:
                    message.clientStreaming = reader.bool();
                    break;
                case /* optional bool server_streaming = 6 [default = false] */ 6:
                    message.serverStreaming = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MethodDescriptorProto, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string name = 1; */
        if (message.name !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* optional string input_type = 2; */
        if (message.inputType !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.inputType);
        /* optional string output_type = 3; */
        if (message.outputType !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.outputType);
        /* optional google.protobuf.MethodOptions options = 4; */
        if (message.options)
            MethodOptions.internalBinaryWrite(message.options, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional bool client_streaming = 5 [default = false]; */
        if (message.clientStreaming !== undefined)
            writer.tag(5, WireType.Varint).bool(message.clientStreaming);
        /* optional bool server_streaming = 6 [default = false]; */
        if (message.serverStreaming !== undefined)
            writer.tag(6, WireType.Varint).bool(message.serverStreaming);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.MethodDescriptorProto
 */
export const MethodDescriptorProto = new MethodDescriptorProto$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FileOptions$Type extends MessageType<FileOptions> {
    constructor() {
        super("google.protobuf.FileOptions", [
            { no: 1, name: "java_package", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "java_outer_classname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "java_multiple_files", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 20, name: "java_generate_equals_and_hash", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 27, name: "java_string_check_utf8", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "optimize_for", kind: "enum", opt: true, T: () => ["google.protobuf.FileOptions.OptimizeMode", FileOptions_OptimizeMode] },
            { no: 11, name: "go_package", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "cc_generic_services", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "java_generic_services", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "py_generic_services", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 42, name: "php_generic_services", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 23, name: "deprecated", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 31, name: "cc_enable_arenas", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 36, name: "objc_class_prefix", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 37, name: "csharp_namespace", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 39, name: "swift_prefix", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 40, name: "php_class_prefix", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 41, name: "php_namespace", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 44, name: "php_metadata_namespace", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 45, name: "ruby_package", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 999, name: "uninterpreted_option", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => UninterpretedOption }
        ]);
    }
    create(value?: PartialMessage<FileOptions>): FileOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uninterpretedOption = [];
        if (value !== undefined)
            reflectionMergePartial<FileOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FileOptions): FileOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string java_package */ 1:
                    message.javaPackage = reader.string();
                    break;
                case /* optional string java_outer_classname */ 8:
                    message.javaOuterClassname = reader.string();
                    break;
                case /* optional bool java_multiple_files = 10 [default = false] */ 10:
                    message.javaMultipleFiles = reader.bool();
                    break;
                case /* optional bool java_generate_equals_and_hash = 20 [deprecated = true] */ 20:
                    message.javaGenerateEqualsAndHash = reader.bool();
                    break;
                case /* optional bool java_string_check_utf8 = 27 [default = false] */ 27:
                    message.javaStringCheckUtf8 = reader.bool();
                    break;
                case /* optional google.protobuf.FileOptions.OptimizeMode optimize_for = 9 [default = SPEED] */ 9:
                    message.optimizeFor = reader.int32();
                    break;
                case /* optional string go_package */ 11:
                    message.goPackage = reader.string();
                    break;
                case /* optional bool cc_generic_services = 16 [default = false] */ 16:
                    message.ccGenericServices = reader.bool();
                    break;
                case /* optional bool java_generic_services = 17 [default = false] */ 17:
                    message.javaGenericServices = reader.bool();
                    break;
                case /* optional bool py_generic_services = 18 [default = false] */ 18:
                    message.pyGenericServices = reader.bool();
                    break;
                case /* optional bool php_generic_services = 42 [default = false] */ 42:
                    message.phpGenericServices = reader.bool();
                    break;
                case /* optional bool deprecated = 23 [default = false] */ 23:
                    message.deprecated = reader.bool();
                    break;
                case /* optional bool cc_enable_arenas = 31 [default = true] */ 31:
                    message.ccEnableArenas = reader.bool();
                    break;
                case /* optional string objc_class_prefix */ 36:
                    message.objcClassPrefix = reader.string();
                    break;
                case /* optional string csharp_namespace */ 37:
                    message.csharpNamespace = reader.string();
                    break;
                case /* optional string swift_prefix */ 39:
                    message.swiftPrefix = reader.string();
                    break;
                case /* optional string php_class_prefix */ 40:
                    message.phpClassPrefix = reader.string();
                    break;
                case /* optional string php_namespace */ 41:
                    message.phpNamespace = reader.string();
                    break;
                case /* optional string php_metadata_namespace */ 44:
                    message.phpMetadataNamespace = reader.string();
                    break;
                case /* optional string ruby_package */ 45:
                    message.rubyPackage = reader.string();
                    break;
                case /* repeated google.protobuf.UninterpretedOption uninterpreted_option */ 999:
                    message.uninterpretedOption.push(UninterpretedOption.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FileOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string java_package = 1; */
        if (message.javaPackage !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.javaPackage);
        /* optional string java_outer_classname = 8; */
        if (message.javaOuterClassname !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.javaOuterClassname);
        /* optional google.protobuf.FileOptions.OptimizeMode optimize_for = 9 [default = SPEED]; */
        if (message.optimizeFor !== undefined)
            writer.tag(9, WireType.Varint).int32(message.optimizeFor);
        /* optional bool java_multiple_files = 10 [default = false]; */
        if (message.javaMultipleFiles !== undefined)
            writer.tag(10, WireType.Varint).bool(message.javaMultipleFiles);
        /* optional string go_package = 11; */
        if (message.goPackage !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.goPackage);
        /* optional bool cc_generic_services = 16 [default = false]; */
        if (message.ccGenericServices !== undefined)
            writer.tag(16, WireType.Varint).bool(message.ccGenericServices);
        /* optional bool java_generic_services = 17 [default = false]; */
        if (message.javaGenericServices !== undefined)
            writer.tag(17, WireType.Varint).bool(message.javaGenericServices);
        /* optional bool py_generic_services = 18 [default = false]; */
        if (message.pyGenericServices !== undefined)
            writer.tag(18, WireType.Varint).bool(message.pyGenericServices);
        /* optional bool java_generate_equals_and_hash = 20 [deprecated = true]; */
        if (message.javaGenerateEqualsAndHash !== undefined)
            writer.tag(20, WireType.Varint).bool(message.javaGenerateEqualsAndHash);
        /* optional bool deprecated = 23 [default = false]; */
        if (message.deprecated !== undefined)
            writer.tag(23, WireType.Varint).bool(message.deprecated);
        /* optional bool java_string_check_utf8 = 27 [default = false]; */
        if (message.javaStringCheckUtf8 !== undefined)
            writer.tag(27, WireType.Varint).bool(message.javaStringCheckUtf8);
        /* optional bool cc_enable_arenas = 31 [default = true]; */
        if (message.ccEnableArenas !== undefined)
            writer.tag(31, WireType.Varint).bool(message.ccEnableArenas);
        /* optional string objc_class_prefix = 36; */
        if (message.objcClassPrefix !== undefined)
            writer.tag(36, WireType.LengthDelimited).string(message.objcClassPrefix);
        /* optional string csharp_namespace = 37; */
        if (message.csharpNamespace !== undefined)
            writer.tag(37, WireType.LengthDelimited).string(message.csharpNamespace);
        /* optional string swift_prefix = 39; */
        if (message.swiftPrefix !== undefined)
            writer.tag(39, WireType.LengthDelimited).string(message.swiftPrefix);
        /* optional string php_class_prefix = 40; */
        if (message.phpClassPrefix !== undefined)
            writer.tag(40, WireType.LengthDelimited).string(message.phpClassPrefix);
        /* optional string php_namespace = 41; */
        if (message.phpNamespace !== undefined)
            writer.tag(41, WireType.LengthDelimited).string(message.phpNamespace);
        /* optional bool php_generic_services = 42 [default = false]; */
        if (message.phpGenericServices !== undefined)
            writer.tag(42, WireType.Varint).bool(message.phpGenericServices);
        /* optional string php_metadata_namespace = 44; */
        if (message.phpMetadataNamespace !== undefined)
            writer.tag(44, WireType.LengthDelimited).string(message.phpMetadataNamespace);
        /* optional string ruby_package = 45; */
        if (message.rubyPackage !== undefined)
            writer.tag(45, WireType.LengthDelimited).string(message.rubyPackage);
        /* repeated google.protobuf.UninterpretedOption uninterpreted_option = 999; */
        for (let i = 0; i < message.uninterpretedOption.length; i++)
            UninterpretedOption.internalBinaryWrite(message.uninterpretedOption[i], writer.tag(999, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.FileOptions
 */
export const FileOptions = new FileOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessageOptions$Type extends MessageType<MessageOptions> {
    constructor() {
        super("google.protobuf.MessageOptions", [
            { no: 1, name: "message_set_wire_format", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "no_standard_descriptor_accessor", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "deprecated", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "map_entry", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 999, name: "uninterpreted_option", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => UninterpretedOption }
        ]);
    }
    create(value?: PartialMessage<MessageOptions>): MessageOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uninterpretedOption = [];
        if (value !== undefined)
            reflectionMergePartial<MessageOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessageOptions): MessageOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool message_set_wire_format = 1 [default = false] */ 1:
                    message.messageSetWireFormat = reader.bool();
                    break;
                case /* optional bool no_standard_descriptor_accessor = 2 [default = false] */ 2:
                    message.noStandardDescriptorAccessor = reader.bool();
                    break;
                case /* optional bool deprecated = 3 [default = false] */ 3:
                    message.deprecated = reader.bool();
                    break;
                case /* optional bool map_entry */ 7:
                    message.mapEntry = reader.bool();
                    break;
                case /* repeated google.protobuf.UninterpretedOption uninterpreted_option */ 999:
                    message.uninterpretedOption.push(UninterpretedOption.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessageOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool message_set_wire_format = 1 [default = false]; */
        if (message.messageSetWireFormat !== undefined)
            writer.tag(1, WireType.Varint).bool(message.messageSetWireFormat);
        /* optional bool no_standard_descriptor_accessor = 2 [default = false]; */
        if (message.noStandardDescriptorAccessor !== undefined)
            writer.tag(2, WireType.Varint).bool(message.noStandardDescriptorAccessor);
        /* optional bool deprecated = 3 [default = false]; */
        if (message.deprecated !== undefined)
            writer.tag(3, WireType.Varint).bool(message.deprecated);
        /* optional bool map_entry = 7; */
        if (message.mapEntry !== undefined)
            writer.tag(7, WireType.Varint).bool(message.mapEntry);
        /* repeated google.protobuf.UninterpretedOption uninterpreted_option = 999; */
        for (let i = 0; i < message.uninterpretedOption.length; i++)
            UninterpretedOption.internalBinaryWrite(message.uninterpretedOption[i], writer.tag(999, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.MessageOptions
 */
export const MessageOptions = new MessageOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FieldOptions$Type extends MessageType<FieldOptions> {
    constructor() {
        super("google.protobuf.FieldOptions", [
            { no: 1, name: "ctype", kind: "enum", opt: true, T: () => ["google.protobuf.FieldOptions.CType", FieldOptions_CType] },
            { no: 2, name: "packed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "jstype", kind: "enum", opt: true, T: () => ["google.protobuf.FieldOptions.JSType", FieldOptions_JSType] },
            { no: 5, name: "lazy", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "deprecated", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "weak", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 999, name: "uninterpreted_option", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => UninterpretedOption }
        ]);
    }
    create(value?: PartialMessage<FieldOptions>): FieldOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uninterpretedOption = [];
        if (value !== undefined)
            reflectionMergePartial<FieldOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldOptions): FieldOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional google.protobuf.FieldOptions.CType ctype = 1 [default = STRING] */ 1:
                    message.ctype = reader.int32();
                    break;
                case /* optional bool packed */ 2:
                    message.packed = reader.bool();
                    break;
                case /* optional google.protobuf.FieldOptions.JSType jstype = 6 [default = JS_NORMAL] */ 6:
                    message.jstype = reader.int32();
                    break;
                case /* optional bool lazy = 5 [default = false] */ 5:
                    message.lazy = reader.bool();
                    break;
                case /* optional bool deprecated = 3 [default = false] */ 3:
                    message.deprecated = reader.bool();
                    break;
                case /* optional bool weak = 10 [default = false] */ 10:
                    message.weak = reader.bool();
                    break;
                case /* repeated google.protobuf.UninterpretedOption uninterpreted_option */ 999:
                    message.uninterpretedOption.push(UninterpretedOption.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional google.protobuf.FieldOptions.CType ctype = 1 [default = STRING]; */
        if (message.ctype !== undefined)
            writer.tag(1, WireType.Varint).int32(message.ctype);
        /* optional bool packed = 2; */
        if (message.packed !== undefined)
            writer.tag(2, WireType.Varint).bool(message.packed);
        /* optional bool deprecated = 3 [default = false]; */
        if (message.deprecated !== undefined)
            writer.tag(3, WireType.Varint).bool(message.deprecated);
        /* optional bool lazy = 5 [default = false]; */
        if (message.lazy !== undefined)
            writer.tag(5, WireType.Varint).bool(message.lazy);
        /* optional google.protobuf.FieldOptions.JSType jstype = 6 [default = JS_NORMAL]; */
        if (message.jstype !== undefined)
            writer.tag(6, WireType.Varint).int32(message.jstype);
        /* optional bool weak = 10 [default = false]; */
        if (message.weak !== undefined)
            writer.tag(10, WireType.Varint).bool(message.weak);
        /* repeated google.protobuf.UninterpretedOption uninterpreted_option = 999; */
        for (let i = 0; i < message.uninterpretedOption.length; i++)
            UninterpretedOption.internalBinaryWrite(message.uninterpretedOption[i], writer.tag(999, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.FieldOptions
 */
export const FieldOptions = new FieldOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OneofOptions$Type extends MessageType<OneofOptions> {
    constructor() {
        super("google.protobuf.OneofOptions", [
            { no: 999, name: "uninterpreted_option", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => UninterpretedOption }
        ]);
    }
    create(value?: PartialMessage<OneofOptions>): OneofOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uninterpretedOption = [];
        if (value !== undefined)
            reflectionMergePartial<OneofOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OneofOptions): OneofOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.protobuf.UninterpretedOption uninterpreted_option */ 999:
                    message.uninterpretedOption.push(UninterpretedOption.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OneofOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.protobuf.UninterpretedOption uninterpreted_option = 999; */
        for (let i = 0; i < message.uninterpretedOption.length; i++)
            UninterpretedOption.internalBinaryWrite(message.uninterpretedOption[i], writer.tag(999, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.OneofOptions
 */
export const OneofOptions = new OneofOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnumOptions$Type extends MessageType<EnumOptions> {
    constructor() {
        super("google.protobuf.EnumOptions", [
            { no: 2, name: "allow_alias", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "deprecated", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 999, name: "uninterpreted_option", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => UninterpretedOption }
        ]);
    }
    create(value?: PartialMessage<EnumOptions>): EnumOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uninterpretedOption = [];
        if (value !== undefined)
            reflectionMergePartial<EnumOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnumOptions): EnumOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool allow_alias */ 2:
                    message.allowAlias = reader.bool();
                    break;
                case /* optional bool deprecated = 3 [default = false] */ 3:
                    message.deprecated = reader.bool();
                    break;
                case /* repeated google.protobuf.UninterpretedOption uninterpreted_option */ 999:
                    message.uninterpretedOption.push(UninterpretedOption.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnumOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool allow_alias = 2; */
        if (message.allowAlias !== undefined)
            writer.tag(2, WireType.Varint).bool(message.allowAlias);
        /* optional bool deprecated = 3 [default = false]; */
        if (message.deprecated !== undefined)
            writer.tag(3, WireType.Varint).bool(message.deprecated);
        /* repeated google.protobuf.UninterpretedOption uninterpreted_option = 999; */
        for (let i = 0; i < message.uninterpretedOption.length; i++)
            UninterpretedOption.internalBinaryWrite(message.uninterpretedOption[i], writer.tag(999, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.EnumOptions
 */
export const EnumOptions = new EnumOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnumValueOptions$Type extends MessageType<EnumValueOptions> {
    constructor() {
        super("google.protobuf.EnumValueOptions", [
            { no: 1, name: "deprecated", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 999, name: "uninterpreted_option", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => UninterpretedOption }
        ]);
    }
    create(value?: PartialMessage<EnumValueOptions>): EnumValueOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uninterpretedOption = [];
        if (value !== undefined)
            reflectionMergePartial<EnumValueOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnumValueOptions): EnumValueOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool deprecated = 1 [default = false] */ 1:
                    message.deprecated = reader.bool();
                    break;
                case /* repeated google.protobuf.UninterpretedOption uninterpreted_option */ 999:
                    message.uninterpretedOption.push(UninterpretedOption.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnumValueOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool deprecated = 1 [default = false]; */
        if (message.deprecated !== undefined)
            writer.tag(1, WireType.Varint).bool(message.deprecated);
        /* repeated google.protobuf.UninterpretedOption uninterpreted_option = 999; */
        for (let i = 0; i < message.uninterpretedOption.length; i++)
            UninterpretedOption.internalBinaryWrite(message.uninterpretedOption[i], writer.tag(999, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.EnumValueOptions
 */
export const EnumValueOptions = new EnumValueOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceOptions$Type extends MessageType<ServiceOptions> {
    constructor() {
        super("google.protobuf.ServiceOptions", [
            { no: 33, name: "deprecated", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 999, name: "uninterpreted_option", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => UninterpretedOption }
        ]);
    }
    create(value?: PartialMessage<ServiceOptions>): ServiceOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uninterpretedOption = [];
        if (value !== undefined)
            reflectionMergePartial<ServiceOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceOptions): ServiceOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool deprecated = 33 [default = false] */ 33:
                    message.deprecated = reader.bool();
                    break;
                case /* repeated google.protobuf.UninterpretedOption uninterpreted_option */ 999:
                    message.uninterpretedOption.push(UninterpretedOption.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool deprecated = 33 [default = false]; */
        if (message.deprecated !== undefined)
            writer.tag(33, WireType.Varint).bool(message.deprecated);
        /* repeated google.protobuf.UninterpretedOption uninterpreted_option = 999; */
        for (let i = 0; i < message.uninterpretedOption.length; i++)
            UninterpretedOption.internalBinaryWrite(message.uninterpretedOption[i], writer.tag(999, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.ServiceOptions
 */
export const ServiceOptions = new ServiceOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MethodOptions$Type extends MessageType<MethodOptions> {
    constructor() {
        super("google.protobuf.MethodOptions", [
            { no: 33, name: "deprecated", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 34, name: "idempotency_level", kind: "enum", opt: true, T: () => ["google.protobuf.MethodOptions.IdempotencyLevel", MethodOptions_IdempotencyLevel] },
            { no: 999, name: "uninterpreted_option", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => UninterpretedOption }
        ]);
    }
    create(value?: PartialMessage<MethodOptions>): MethodOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uninterpretedOption = [];
        if (value !== undefined)
            reflectionMergePartial<MethodOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MethodOptions): MethodOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool deprecated = 33 [default = false] */ 33:
                    message.deprecated = reader.bool();
                    break;
                case /* optional google.protobuf.MethodOptions.IdempotencyLevel idempotency_level = 34 [default = IDEMPOTENCY_UNKNOWN] */ 34:
                    message.idempotencyLevel = reader.int32();
                    break;
                case /* repeated google.protobuf.UninterpretedOption uninterpreted_option */ 999:
                    message.uninterpretedOption.push(UninterpretedOption.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MethodOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool deprecated = 33 [default = false]; */
        if (message.deprecated !== undefined)
            writer.tag(33, WireType.Varint).bool(message.deprecated);
        /* optional google.protobuf.MethodOptions.IdempotencyLevel idempotency_level = 34 [default = IDEMPOTENCY_UNKNOWN]; */
        if (message.idempotencyLevel !== undefined)
            writer.tag(34, WireType.Varint).int32(message.idempotencyLevel);
        /* repeated google.protobuf.UninterpretedOption uninterpreted_option = 999; */
        for (let i = 0; i < message.uninterpretedOption.length; i++)
            UninterpretedOption.internalBinaryWrite(message.uninterpretedOption[i], writer.tag(999, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.MethodOptions
 */
export const MethodOptions = new MethodOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UninterpretedOption$Type extends MessageType<UninterpretedOption> {
    constructor() {
        super("google.protobuf.UninterpretedOption", [
            { no: 2, name: "name", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => UninterpretedOption_NamePart },
            { no: 3, name: "identifier_value", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "positive_int_value", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/ },
            { no: 5, name: "negative_int_value", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/ },
            { no: 6, name: "double_value", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 7, name: "string_value", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 8, name: "aggregate_value", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UninterpretedOption>): UninterpretedOption {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = [];
        if (value !== undefined)
            reflectionMergePartial<UninterpretedOption>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UninterpretedOption): UninterpretedOption {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.protobuf.UninterpretedOption.NamePart name */ 2:
                    message.name.push(UninterpretedOption_NamePart.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional string identifier_value */ 3:
                    message.identifierValue = reader.string();
                    break;
                case /* optional uint64 positive_int_value */ 4:
                    message.positiveIntValue = reader.uint64().toString();
                    break;
                case /* optional int64 negative_int_value */ 5:
                    message.negativeIntValue = reader.int64().toString();
                    break;
                case /* optional double double_value */ 6:
                    message.doubleValue = reader.double();
                    break;
                case /* optional bytes string_value */ 7:
                    message.stringValue = reader.bytes();
                    break;
                case /* optional string aggregate_value */ 8:
                    message.aggregateValue = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UninterpretedOption, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.protobuf.UninterpretedOption.NamePart name = 2; */
        for (let i = 0; i < message.name.length; i++)
            UninterpretedOption_NamePart.internalBinaryWrite(message.name[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional string identifier_value = 3; */
        if (message.identifierValue !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.identifierValue);
        /* optional uint64 positive_int_value = 4; */
        if (message.positiveIntValue !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.positiveIntValue);
        /* optional int64 negative_int_value = 5; */
        if (message.negativeIntValue !== undefined)
            writer.tag(5, WireType.Varint).int64(message.negativeIntValue);
        /* optional double double_value = 6; */
        if (message.doubleValue !== undefined)
            writer.tag(6, WireType.Bit64).double(message.doubleValue);
        /* optional bytes string_value = 7; */
        if (message.stringValue !== undefined)
            writer.tag(7, WireType.LengthDelimited).bytes(message.stringValue);
        /* optional string aggregate_value = 8; */
        if (message.aggregateValue !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.aggregateValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.UninterpretedOption
 */
export const UninterpretedOption = new UninterpretedOption$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UninterpretedOption_NamePart$Type extends MessageType<UninterpretedOption_NamePart> {
    constructor() {
        super("google.protobuf.UninterpretedOption.NamePart", [
            { no: 1, name: "name_part", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "is_extension", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UninterpretedOption_NamePart>): UninterpretedOption_NamePart {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.namePart = "";
        message.isExtension = false;
        if (value !== undefined)
            reflectionMergePartial<UninterpretedOption_NamePart>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UninterpretedOption_NamePart): UninterpretedOption_NamePart {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* required string name_part */ 1:
                    message.namePart = reader.string();
                    break;
                case /* required bool is_extension */ 2:
                    message.isExtension = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UninterpretedOption_NamePart, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* required string name_part = 1; */
        if (message.namePart !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.namePart);
        /* required bool is_extension = 2; */
        if (message.isExtension !== false)
            writer.tag(2, WireType.Varint).bool(message.isExtension);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.UninterpretedOption.NamePart
 */
export const UninterpretedOption_NamePart = new UninterpretedOption_NamePart$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SourceCodeInfo$Type extends MessageType<SourceCodeInfo> {
    constructor() {
        super("google.protobuf.SourceCodeInfo", [
            { no: 1, name: "location", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SourceCodeInfo_Location }
        ]);
    }
    create(value?: PartialMessage<SourceCodeInfo>): SourceCodeInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.location = [];
        if (value !== undefined)
            reflectionMergePartial<SourceCodeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SourceCodeInfo): SourceCodeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.protobuf.SourceCodeInfo.Location location */ 1:
                    message.location.push(SourceCodeInfo_Location.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SourceCodeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.protobuf.SourceCodeInfo.Location location = 1; */
        for (let i = 0; i < message.location.length; i++)
            SourceCodeInfo_Location.internalBinaryWrite(message.location[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.SourceCodeInfo
 */
export const SourceCodeInfo = new SourceCodeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SourceCodeInfo_Location$Type extends MessageType<SourceCodeInfo_Location> {
    constructor() {
        super("google.protobuf.SourceCodeInfo.Location", [
            { no: 1, name: "path", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "span", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "leading_comments", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "trailing_comments", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "leading_detached_comments", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SourceCodeInfo_Location>): SourceCodeInfo_Location {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.path = [];
        message.span = [];
        message.leadingDetachedComments = [];
        if (value !== undefined)
            reflectionMergePartial<SourceCodeInfo_Location>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SourceCodeInfo_Location): SourceCodeInfo_Location {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 path = 1 [packed = true] */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.path.push(reader.int32());
                    else
                        message.path.push(reader.int32());
                    break;
                case /* repeated int32 span = 2 [packed = true] */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.span.push(reader.int32());
                    else
                        message.span.push(reader.int32());
                    break;
                case /* optional string leading_comments */ 3:
                    message.leadingComments = reader.string();
                    break;
                case /* optional string trailing_comments */ 4:
                    message.trailingComments = reader.string();
                    break;
                case /* repeated string leading_detached_comments */ 6:
                    message.leadingDetachedComments.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SourceCodeInfo_Location, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 path = 1 [packed = true]; */
        if (message.path.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.path.length; i++)
                writer.int32(message.path[i]);
            writer.join();
        }
        /* repeated int32 span = 2 [packed = true]; */
        if (message.span.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.span.length; i++)
                writer.int32(message.span[i]);
            writer.join();
        }
        /* optional string leading_comments = 3; */
        if (message.leadingComments !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.leadingComments);
        /* optional string trailing_comments = 4; */
        if (message.trailingComments !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.trailingComments);
        /* repeated string leading_detached_comments = 6; */
        for (let i = 0; i < message.leadingDetachedComments.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.leadingDetachedComments[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.SourceCodeInfo.Location
 */
export const SourceCodeInfo_Location = new SourceCodeInfo_Location$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneratedCodeInfo$Type extends MessageType<GeneratedCodeInfo> {
    constructor() {
        super("google.protobuf.GeneratedCodeInfo", [
            { no: 1, name: "annotation", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => GeneratedCodeInfo_Annotation }
        ]);
    }
    create(value?: PartialMessage<GeneratedCodeInfo>): GeneratedCodeInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.annotation = [];
        if (value !== undefined)
            reflectionMergePartial<GeneratedCodeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeneratedCodeInfo): GeneratedCodeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated google.protobuf.GeneratedCodeInfo.Annotation annotation */ 1:
                    message.annotation.push(GeneratedCodeInfo_Annotation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GeneratedCodeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated google.protobuf.GeneratedCodeInfo.Annotation annotation = 1; */
        for (let i = 0; i < message.annotation.length; i++)
            GeneratedCodeInfo_Annotation.internalBinaryWrite(message.annotation[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.GeneratedCodeInfo
 */
export const GeneratedCodeInfo = new GeneratedCodeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneratedCodeInfo_Annotation$Type extends MessageType<GeneratedCodeInfo_Annotation> {
    constructor() {
        super("google.protobuf.GeneratedCodeInfo.Annotation", [
            { no: 1, name: "path", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "source_file", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "begin", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "end", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GeneratedCodeInfo_Annotation>): GeneratedCodeInfo_Annotation {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.path = [];
        if (value !== undefined)
            reflectionMergePartial<GeneratedCodeInfo_Annotation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeneratedCodeInfo_Annotation): GeneratedCodeInfo_Annotation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 path = 1 [packed = true] */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.path.push(reader.int32());
                    else
                        message.path.push(reader.int32());
                    break;
                case /* optional string source_file */ 2:
                    message.sourceFile = reader.string();
                    break;
                case /* optional int32 begin */ 3:
                    message.begin = reader.int32();
                    break;
                case /* optional int32 end */ 4:
                    message.end = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GeneratedCodeInfo_Annotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 path = 1 [packed = true]; */
        if (message.path.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.path.length; i++)
                writer.int32(message.path[i]);
            writer.join();
        }
        /* optional string source_file = 2; */
        if (message.sourceFile !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.sourceFile);
        /* optional int32 begin = 3; */
        if (message.begin !== undefined)
            writer.tag(3, WireType.Varint).int32(message.begin);
        /* optional int32 end = 4; */
        if (message.end !== undefined)
            writer.tag(4, WireType.Varint).int32(message.end);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.GeneratedCodeInfo.Annotation
 */
export const GeneratedCodeInfo_Annotation = new GeneratedCodeInfo_Annotation$Type();
// @generated by protobuf-ts 2.11.1 with parameter force_disable_services,force_client_none,force_exclude_all_options,keep_enum_prefix,add_pb_suffix,long_type_string
// @generated from protobuf file "google/protobuf/duration.proto" (package "google.protobuf", syntax proto3)
// tslint:disable
//
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
import type { JsonReadOptions, JsonValue, JsonWriteOptions } from "@protobuf-ts/runtime";
import { PbLong, typeofJsonValue } from "@protobuf-ts/runtime";
/**
 * A Duration represents a signed, fixed-length span of time represented
 * as a count of seconds and fractions of seconds at nanosecond
 * resolution. It is independent of any calendar and concepts like "day"
 * or "month". It is related to Timestamp in that the difference between
 * two Timestamp values is a Duration and it can be added or subtracted
 * from a Timestamp. Range is approximately +-10,000 years.
 *
 * # Examples
 *
 * Example 1: Compute Duration from two Timestamps in pseudo code.
 *
 *     Timestamp start = ...;
 *     Timestamp end = ...;
 *     Duration duration = ...;
 *
 *     duration.seconds = end.seconds - start.seconds;
 *     duration.nanos = end.nanos - start.nanos;
 *
 *     if (duration.seconds < 0 && duration.nanos > 0) {
 *       duration.seconds += 1;
 *       duration.nanos -= 1000000000;
 *     } else if (duration.seconds > 0 && duration.nanos < 0) {
 *       duration.seconds -= 1;
 *       duration.nanos += 1000000000;
 *     }
 *
 * Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.
 *
 *     Timestamp start = ...;
 *     Duration duration = ...;
 *     Timestamp end = ...;
 *
 *     end.seconds = start.seconds + duration.seconds;
 *     end.nanos = start.nanos + duration.nanos;
 *
 *     if (end.nanos < 0) {
 *       end.seconds -= 1;
 *       end.nanos += 1000000000;
 *     } else if (end.nanos >= 1000000000) {
 *       end.seconds += 1;
 *       end.nanos -= 1000000000;
 *     }
 *
 * Example 3: Compute Duration from datetime.timedelta in Python.
 *
 *     td = datetime.timedelta(days=3, minutes=10)
 *     duration = Duration()
 *     duration.FromTimedelta(td)
 *
 * # JSON Mapping
 *
 * In JSON format, the Duration type is encoded as a string rather than an
 * object, where the string ends in the suffix "s" (indicating seconds) and
 * is preceded by the number of seconds, with nanoseconds expressed as
 * fractional seconds. For example, 3 seconds with 0 nanoseconds should be
 * encoded in JSON format as "3s", while 3 seconds and 1 nanosecond should
 * be expressed in JSON format as "3.000000001s", and 3 seconds and 1
 * microsecond should be expressed in JSON format as "3.000001s".
 *
 *
 *
 * @generated from protobuf message google.protobuf.Duration
 */
export interface Duration {
    /**
     * Signed seconds of the span of time. Must be from -315,576,000,000
     * to +315,576,000,000 inclusive. Note: these bounds are computed from:
     * 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years
     *
     * @generated from protobuf field: int64 seconds = 1
     */
    seconds: string;
    /**
     * Signed fractions of a second at nanosecond resolution of the span
     * of time. Durations less than one second are represented with a 0
     * `seconds` field and a positive or negative `nanos` field. For durations
     * of one second or more, a non-zero value for the `nanos` field must be
     * of the same sign as the `seconds` field. Must be from -999,999,999
     * to +999,999,999 inclusive.
     *
     * @generated from protobuf field: int32 nanos = 2
     */
    nanos: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class Duration$Type extends MessageType<Duration> {
    constructor() {
        super("google.protobuf.Duration", [
            { no: 1, name: "seconds", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 2, name: "nanos", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    /**
     * Encode `Duration` to JSON string like "3.000001s".
     */
    internalJsonWrite(message: Duration, options: JsonWriteOptions): JsonValue {
        let s = PbLong.from(message.seconds).toNumber();
        if (s > 315576000000 || s < -315576000000)
            throw new Error("Duration value out of range.");
        let text = message.seconds.toString();
        if (s === 0 && message.nanos < 0)
            text = "-" + text;
        if (message.nanos !== 0) {
            let nanosStr = Math.abs(message.nanos).toString();
            nanosStr = "0".repeat(9 - nanosStr.length) + nanosStr;
            if (nanosStr.substring(3) === "000000")
                nanosStr = nanosStr.substring(0, 3);
            else if (nanosStr.substring(6) === "000")
                nanosStr = nanosStr.substring(0, 6);
            text += "." + nanosStr;
        }
        return text + "s";
    }
    /**
     * Decode `Duration` from JSON string like "3.000001s"
     */
    internalJsonRead(json: JsonValue, options: JsonReadOptions, target?: Duration): Duration {
        if (typeof json !== "string")
            throw new Error("Unable to parse Duration from JSON " + typeofJsonValue(json) + ". Expected string.");
        let match = json.match(/^(-?)([0-9]+)(?:\.([0-9]+))?s/);
        if (match === null)
            throw new Error("Unable to parse Duration from JSON string. Invalid format.");
        if (!target)
            target = this.create();
        let [, sign, secs, nanos] = match;
        let longSeconds = PbLong.from(sign + secs);
        if (longSeconds.toNumber() > 315576000000 || longSeconds.toNumber() < -315576000000)
            throw new Error("Unable to parse Duration from JSON string. Value out of range.");
        target.seconds = longSeconds.toString();
        if (typeof nanos == "string") {
            let nanosStr = sign + nanos + "0".repeat(9 - nanos.length);
            target.nanos = parseInt(nanosStr);
        }
        return target;
    }
    create(value?: PartialMessage<Duration>): Duration {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.seconds = "0";
        message.nanos = 0;
        if (value !== undefined)
            reflectionMergePartial<Duration>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Duration): Duration {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 seconds */ 1:
                    message.seconds = reader.int64().toString();
                    break;
                case /* int32 nanos */ 2:
                    message.nanos = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Duration, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 seconds = 1; */
        if (message.seconds !== "0")
            writer.tag(1, WireType.Varint).int64(message.seconds);
        /* int32 nanos = 2; */
        if (message.nanos !== 0)
            writer.tag(2, WireType.Varint).int32(message.nanos);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.Duration
 */
export const Duration = new Duration$Type();
// @generated by protobuf-ts 2.11.1 with parameter force_disable_services,force_client_none,force_exclude_all_options,keep_enum_prefix,add_pb_suffix,long_type_string
// @generated from protobuf file "google/protobuf/empty.proto" (package "google.protobuf", syntax proto3)
// tslint:disable
//
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
/**
 * A generic empty message that you can re-use to avoid defining duplicated
 * empty messages in your APIs. A typical example is to use it as the request
 * or the response type of an API method. For instance:
 *
 *     service Foo {
 *       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
 *     }
 *
 * The JSON representation for `Empty` is empty JSON object `{}`.
 *
 * @generated from protobuf message google.protobuf.Empty
 */
export interface Empty {
}
// @generated message type with reflection information, may provide speed optimized methods
class Empty$Type extends MessageType<Empty> {
    constructor() {
        super("google.protobuf.Empty", []);
    }
    create(value?: PartialMessage<Empty>): Empty {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Empty>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Empty): Empty {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Empty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.Empty
 */
export const Empty = new Empty$Type();
// @generated by protobuf-ts 2.11.1 with parameter force_disable_services,force_client_none,force_exclude_all_options,keep_enum_prefix,add_pb_suffix,long_type_string
// @generated from protobuf file "google/protobuf/timestamp.proto" (package "google.protobuf", syntax proto3)
// tslint:disable
//
// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
/**
 * A Timestamp represents a point in time independent of any time zone or local
 * calendar, encoded as a count of seconds and fractions of seconds at
 * nanosecond resolution. The count is relative to an epoch at UTC midnight on
 * January 1, 1970, in the proleptic Gregorian calendar which extends the
 * Gregorian calendar backwards to year one.
 *
 * All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap
 * second table is needed for interpretation, using a [24-hour linear
 * smear](https://developers.google.com/time/smear).
 *
 * The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By
 * restricting to that range, we ensure that we can convert to and from [RFC
 * 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.
 *
 * # Examples
 *
 * Example 1: Compute Timestamp from POSIX `time()`.
 *
 *     Timestamp timestamp;
 *     timestamp.set_seconds(time(NULL));
 *     timestamp.set_nanos(0);
 *
 * Example 2: Compute Timestamp from POSIX `gettimeofday()`.
 *
 *     struct timeval tv;
 *     gettimeofday(&tv, NULL);
 *
 *     Timestamp timestamp;
 *     timestamp.set_seconds(tv.tv_sec);
 *     timestamp.set_nanos(tv.tv_usec * 1000);
 *
 * Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.
 *
 *     FILETIME ft;
 *     GetSystemTimeAsFileTime(&ft);
 *     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;
 *
 *     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
 *     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
 *     Timestamp timestamp;
 *     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
 *     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));
 *
 * Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.
 *
 *     long millis = System.currentTimeMillis();
 *
 *     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
 *         .setNanos((int) ((millis % 1000) * 1000000)).build();
 *
 *
 * Example 5: Compute Timestamp from Java `Instant.now()`.
 *
 *     Instant now = Instant.now();
 *
 *     Timestamp timestamp =
 *         Timestamp.newBuilder().setSeconds(now.getEpochSecond())
 *             .setNanos(now.getNano()).build();
 *
 *
 * Example 6: Compute Timestamp from current time in Python.
 *
 *     timestamp = Timestamp()
 *     timestamp.GetCurrentTime()
 *
 * # JSON Mapping
 *
 * In JSON format, the Timestamp type is encoded as a string in the
 * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
 * format is "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z"
 * where {year} is always expressed using four digits while {month}, {day},
 * {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional
 * seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),
 * are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
 * is required. A proto3 JSON serializer should always use UTC (as indicated by
 * "Z") when printing the Timestamp type and a proto3 JSON parser should be
 * able to accept both UTC and other timezones (as indicated by an offset).
 *
 * For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past
 * 01:30 UTC on January 15, 2017.
 *
 * In JavaScript, one can convert a Date object to this format using the
 * standard
 * [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
 * method. In Python, a standard `datetime.datetime` object can be converted
 * to this format using
 * [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with
 * the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use
 * the Joda Time's [`ISODateTimeFormat.dateTime()`](
 * http://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime%2D%2D
 * ) to obtain a formatter capable of generating timestamps in this format.
 *
 *
 *
 * @generated from protobuf message google.protobuf.Timestamp
 */
export interface Timestamp {
    /**
     * Represents seconds of UTC time since Unix epoch
     * 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
     * 9999-12-31T23:59:59Z inclusive.
     *
     * @generated from protobuf field: int64 seconds = 1
     */
    seconds: string;
    /**
     * Non-negative fractions of a second at nanosecond resolution. Negative
     * second values with fractions must still have non-negative nanos values
     * that count forward in time. Must be from 0 to 999,999,999
     * inclusive.
     *
     * @generated from protobuf field: int32 nanos = 2
     */
    nanos: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class Timestamp$Type extends MessageType<Timestamp> {
    constructor() {
        super("google.protobuf.Timestamp", [
            { no: 1, name: "seconds", kind: "scalar", T: 3 /*ScalarType.INT64*/ },
            { no: 2, name: "nanos", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    /**
     * Creates a new `Timestamp` for the current time.
     */
    now(): Timestamp {
        const msg = this.create();
        const ms = Date.now();
        msg.seconds = PbLong.from(Math.floor(ms / 1000)).toString();
        msg.nanos = (ms % 1000) * 1000000;
        return msg;
    }
    /**
     * Converts a `Timestamp` to a JavaScript Date.
     */
    toDate(message: Timestamp): Date {
        return new Date(PbLong.from(message.seconds).toNumber() * 1000 + Math.ceil(message.nanos / 1000000));
    }
    /**
     * Converts a JavaScript Date to a `Timestamp`.
     */
    fromDate(date: Date): Timestamp {
        const msg = this.create();
        const ms = date.getTime();
        msg.seconds = PbLong.from(Math.floor(ms / 1000)).toString();
        msg.nanos = ((ms % 1000) + (ms < 0 && ms % 1000 !== 0 ? 1000 : 0)) * 1000000;
        return msg;
    }
    /**
     * In JSON format, the `Timestamp` type is encoded as a string
     * in the RFC 3339 format.
     */
    internalJsonWrite(message: Timestamp, options: JsonWriteOptions): JsonValue {
        let ms = PbLong.from(message.seconds).toNumber() * 1000;
        if (ms < Date.parse("0001-01-01T00:00:00Z") || ms > Date.parse("9999-12-31T23:59:59Z"))
            throw new Error("Unable to encode Timestamp to JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.");
        if (message.nanos < 0)
            throw new Error("Unable to encode invalid Timestamp to JSON. Nanos must not be negative.");
        let z = "Z";
        if (message.nanos > 0) {
            let nanosStr = (message.nanos + 1000000000).toString().substring(1);
            if (nanosStr.substring(3) === "000000")
                z = "." + nanosStr.substring(0, 3) + "Z";
            else if (nanosStr.substring(6) === "000")
                z = "." + nanosStr.substring(0, 6) + "Z";
            else
                z = "." + nanosStr + "Z";
        }
        return new Date(ms).toISOString().replace(".000Z", z);
    }
    /**
     * In JSON format, the `Timestamp` type is encoded as a string
     * in the RFC 3339 format.
     */
    internalJsonRead(json: JsonValue, options: JsonReadOptions, target?: Timestamp): Timestamp {
        if (typeof json !== "string")
            throw new Error("Unable to parse Timestamp from JSON " + typeofJsonValue(json) + ".");
        let matches = json.match(/^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/);
        if (!matches)
            throw new Error("Unable to parse Timestamp from JSON. Invalid format.");
        let ms = Date.parse(matches[1] + "-" + matches[2] + "-" + matches[3] + "T" + matches[4] + ":" + matches[5] + ":" + matches[6] + (matches[8] ? matches[8] : "Z"));
        if (Number.isNaN(ms))
            throw new Error("Unable to parse Timestamp from JSON. Invalid value.");
        if (ms < Date.parse("0001-01-01T00:00:00Z") || ms > Date.parse("9999-12-31T23:59:59Z"))
            throw new globalThis.Error("Unable to parse Timestamp from JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.");
        if (!target)
            target = this.create();
        target.seconds = PbLong.from(ms / 1000).toString();
        target.nanos = 0;
        if (matches[7])
            target.nanos = (parseInt("1" + matches[7] + "0".repeat(9 - matches[7].length)) - 1000000000);
        return target;
    }
    create(value?: PartialMessage<Timestamp>): Timestamp {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.seconds = "0";
        message.nanos = 0;
        if (value !== undefined)
            reflectionMergePartial<Timestamp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Timestamp): Timestamp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 seconds */ 1:
                    message.seconds = reader.int64().toString();
                    break;
                case /* int32 nanos */ 2:
                    message.nanos = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Timestamp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 seconds = 1; */
        if (message.seconds !== "0")
            writer.tag(1, WireType.Varint).int64(message.seconds);
        /* int32 nanos = 2; */
        if (message.nanos !== 0)
            writer.tag(2, WireType.Varint).int32(message.nanos);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message google.protobuf.Timestamp
 */
export const Timestamp = new Timestamp$Type();
