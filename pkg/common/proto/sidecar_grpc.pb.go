// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: sidecar.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SidecarService_Initialize_FullMethodName  = "/stroppy.SidecarService/Initialize"
	SidecarService_OnStepStart_FullMethodName = "/stroppy.SidecarService/OnStepStart"
	SidecarService_OnStepEnd_FullMethodName   = "/stroppy.SidecarService/OnStepEnd"
	SidecarService_Teardown_FullMethodName    = "/stroppy.SidecarService/Teardown"
)

// SidecarServiceClient is the client API for SidecarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// SidecarPlugin defines the gRPC service that sidecar plugins must implement.
type SidecarServiceClient interface {
	// *
	// Initialize is called once before the benchmark starts.
	// Used to initialize resources of SidecarPlugin.
	Initialize(ctx context.Context, in *GlobalConfig, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// *
	// OnStepStart is called once before each step starts.
	OnStepStart(ctx context.Context, in *StepContext, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// *
	// OnStepEnd is called once after each step ends.
	OnStepEnd(ctx context.Context, in *StepContext, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// *
	// Teardown is called once after the benchmark ends.
	// Used to clean up resources.
	Teardown(ctx context.Context, in *GlobalConfig, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sidecarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSidecarServiceClient(cc grpc.ClientConnInterface) SidecarServiceClient {
	return &sidecarServiceClient{cc}
}

func (c *sidecarServiceClient) Initialize(ctx context.Context, in *GlobalConfig, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SidecarService_Initialize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarServiceClient) OnStepStart(ctx context.Context, in *StepContext, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SidecarService_OnStepStart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarServiceClient) OnStepEnd(ctx context.Context, in *StepContext, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SidecarService_OnStepEnd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sidecarServiceClient) Teardown(ctx context.Context, in *GlobalConfig, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SidecarService_Teardown_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SidecarServiceServer is the server API for SidecarService service.
// All implementations must embed UnimplementedSidecarServiceServer
// for forward compatibility.
//
// *
// SidecarPlugin defines the gRPC service that sidecar plugins must implement.
type SidecarServiceServer interface {
	// *
	// Initialize is called once before the benchmark starts.
	// Used to initialize resources of SidecarPlugin.
	Initialize(context.Context, *GlobalConfig) (*emptypb.Empty, error)
	// *
	// OnStepStart is called once before each step starts.
	OnStepStart(context.Context, *StepContext) (*emptypb.Empty, error)
	// *
	// OnStepEnd is called once after each step ends.
	OnStepEnd(context.Context, *StepContext) (*emptypb.Empty, error)
	// *
	// Teardown is called once after the benchmark ends.
	// Used to clean up resources.
	Teardown(context.Context, *GlobalConfig) (*emptypb.Empty, error)
	mustEmbedUnimplementedSidecarServiceServer()
}

// UnimplementedSidecarServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSidecarServiceServer struct{}

func (UnimplementedSidecarServiceServer) Initialize(context.Context, *GlobalConfig) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initialize not implemented")
}
func (UnimplementedSidecarServiceServer) OnStepStart(context.Context, *StepContext) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnStepStart not implemented")
}
func (UnimplementedSidecarServiceServer) OnStepEnd(context.Context, *StepContext) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnStepEnd not implemented")
}
func (UnimplementedSidecarServiceServer) Teardown(context.Context, *GlobalConfig) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Teardown not implemented")
}
func (UnimplementedSidecarServiceServer) mustEmbedUnimplementedSidecarServiceServer() {}
func (UnimplementedSidecarServiceServer) testEmbeddedByValue()                        {}

// UnsafeSidecarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SidecarServiceServer will
// result in compilation errors.
type UnsafeSidecarServiceServer interface {
	mustEmbedUnimplementedSidecarServiceServer()
}

func RegisterSidecarServiceServer(s grpc.ServiceRegistrar, srv SidecarServiceServer) {
	// If the following call pancis, it indicates UnimplementedSidecarServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SidecarService_ServiceDesc, srv)
}

func _SidecarService_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServiceServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SidecarService_Initialize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServiceServer).Initialize(ctx, req.(*GlobalConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _SidecarService_OnStepStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServiceServer).OnStepStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SidecarService_OnStepStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServiceServer).OnStepStart(ctx, req.(*StepContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _SidecarService_OnStepEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepContext)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServiceServer).OnStepEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SidecarService_OnStepEnd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServiceServer).OnStepEnd(ctx, req.(*StepContext))
	}
	return interceptor(ctx, in, info, handler)
}

func _SidecarService_Teardown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SidecarServiceServer).Teardown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SidecarService_Teardown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SidecarServiceServer).Teardown(ctx, req.(*GlobalConfig))
	}
	return interceptor(ctx, in, info, handler)
}

// SidecarService_ServiceDesc is the grpc.ServiceDesc for SidecarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SidecarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stroppy.SidecarService",
	HandlerType: (*SidecarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initialize",
			Handler:    _SidecarService_Initialize_Handler,
		},
		{
			MethodName: "OnStepStart",
			Handler:    _SidecarService_OnStepStart_Handler,
		},
		{
			MethodName: "OnStepEnd",
			Handler:    _SidecarService_OnStepEnd_Handler,
		},
		{
			MethodName: "Teardown",
			Handler:    _SidecarService_Teardown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sidecar.proto",
}
