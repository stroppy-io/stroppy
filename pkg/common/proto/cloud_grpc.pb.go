// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: cloud.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CloudStatusService_NotifyRun_FullMethodName  = "/stroppy.CloudStatusService/NotifyRun"
	CloudStatusService_NotifyStep_FullMethodName = "/stroppy.CloudStatusService/NotifyStep"
)

// CloudStatusServiceClient is the client API for CloudStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// CloudStatusService is a service for notifying the cloud status of runs and steps.
type CloudStatusServiceClient interface {
	// * Notifies the cloud status of a benchmark run
	NotifyRun(ctx context.Context, in *StroppyRun, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// * Notifies the cloud status of a benchmark step
	NotifyStep(ctx context.Context, in *StroppyStepRun, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cloudStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudStatusServiceClient(cc grpc.ClientConnInterface) CloudStatusServiceClient {
	return &cloudStatusServiceClient{cc}
}

func (c *cloudStatusServiceClient) NotifyRun(ctx context.Context, in *StroppyRun, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudStatusService_NotifyRun_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudStatusServiceClient) NotifyStep(ctx context.Context, in *StroppyStepRun, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CloudStatusService_NotifyStep_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudStatusServiceServer is the server API for CloudStatusService service.
// All implementations must embed UnimplementedCloudStatusServiceServer
// for forward compatibility.
//
// *
// CloudStatusService is a service for notifying the cloud status of runs and steps.
type CloudStatusServiceServer interface {
	// * Notifies the cloud status of a benchmark run
	NotifyRun(context.Context, *StroppyRun) (*emptypb.Empty, error)
	// * Notifies the cloud status of a benchmark step
	NotifyStep(context.Context, *StroppyStepRun) (*emptypb.Empty, error)
	mustEmbedUnimplementedCloudStatusServiceServer()
}

// UnimplementedCloudStatusServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCloudStatusServiceServer struct{}

func (UnimplementedCloudStatusServiceServer) NotifyRun(context.Context, *StroppyRun) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyRun not implemented")
}
func (UnimplementedCloudStatusServiceServer) NotifyStep(context.Context, *StroppyStepRun) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyStep not implemented")
}
func (UnimplementedCloudStatusServiceServer) mustEmbedUnimplementedCloudStatusServiceServer() {}
func (UnimplementedCloudStatusServiceServer) testEmbeddedByValue()                            {}

// UnsafeCloudStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudStatusServiceServer will
// result in compilation errors.
type UnsafeCloudStatusServiceServer interface {
	mustEmbedUnimplementedCloudStatusServiceServer()
}

func RegisterCloudStatusServiceServer(s grpc.ServiceRegistrar, srv CloudStatusServiceServer) {
	// If the following call pancis, it indicates UnimplementedCloudStatusServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CloudStatusService_ServiceDesc, srv)
}

func _CloudStatusService_NotifyRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StroppyRun)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudStatusServiceServer).NotifyRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudStatusService_NotifyRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudStatusServiceServer).NotifyRun(ctx, req.(*StroppyRun))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudStatusService_NotifyStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StroppyStepRun)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudStatusServiceServer).NotifyStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CloudStatusService_NotifyStep_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudStatusServiceServer).NotifyStep(ctx, req.(*StroppyStepRun))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudStatusService_ServiceDesc is the grpc.ServiceDesc for CloudStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stroppy.CloudStatusService",
	HandlerType: (*CloudStatusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyRun",
			Handler:    _CloudStatusService_NotifyRun_Handler,
		},
		{
			MethodName: "NotifyStep",
			Handler:    _CloudStatusService_NotifyStep_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cloud.proto",
}
