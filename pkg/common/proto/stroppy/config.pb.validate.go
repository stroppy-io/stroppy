// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: stroppy/config.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DriverConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DriverConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DriverConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DriverConfigMultiError, or
// nil if none found.
func (m *DriverConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *DriverConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, err := url.Parse(m.GetUrl()); err != nil {
		err = DriverConfigValidationError{
			field:  "Url",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := DriverConfig_DriverType_name[int32(m.GetDriverType())]; !ok {
		err := DriverConfigValidationError{
			field:  "DriverType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.DbSpecific != nil {

		if all {
			switch v := interface{}(m.GetDbSpecific()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DriverConfigValidationError{
						field:  "DbSpecific",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DriverConfigValidationError{
						field:  "DbSpecific",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDbSpecific()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DriverConfigValidationError{
					field:  "DbSpecific",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DriverConfigMultiError(errors)
	}

	return nil
}

// DriverConfigMultiError is an error wrapping multiple validation errors
// returned by DriverConfig.ValidateAll() if the designated constraints aren't met.
type DriverConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DriverConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DriverConfigMultiError) AllErrors() []error { return m }

// DriverConfigValidationError is the validation error returned by
// DriverConfig.Validate if the designated constraints aren't met.
type DriverConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DriverConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DriverConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DriverConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DriverConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DriverConfigValidationError) ErrorName() string { return "DriverConfigValidationError" }

// Error satisfies the builtin error interface
func (e DriverConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDriverConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DriverConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DriverConfigValidationError{}

// Validate checks the field values on LoggerConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoggerConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoggerConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoggerConfigMultiError, or
// nil if none found.
func (m *LoggerConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *LoggerConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := LoggerConfig_LogLevel_name[int32(m.GetLogLevel())]; !ok {
		err := LoggerConfigValidationError{
			field:  "LogLevel",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := LoggerConfig_LogMode_name[int32(m.GetLogMode())]; !ok {
		err := LoggerConfigValidationError{
			field:  "LogMode",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoggerConfigMultiError(errors)
	}

	return nil
}

// LoggerConfigMultiError is an error wrapping multiple validation errors
// returned by LoggerConfig.ValidateAll() if the designated constraints aren't met.
type LoggerConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoggerConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoggerConfigMultiError) AllErrors() []error { return m }

// LoggerConfigValidationError is the validation error returned by
// LoggerConfig.Validate if the designated constraints aren't met.
type LoggerConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoggerConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoggerConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoggerConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoggerConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoggerConfigValidationError) ErrorName() string { return "LoggerConfigValidationError" }

// Error satisfies the builtin error interface
func (e LoggerConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoggerConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoggerConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoggerConfigValidationError{}

// Validate checks the field values on ExporterConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExporterConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExporterConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExporterConfigMultiError,
// or nil if none found.
func (m *ExporterConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ExporterConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ExporterConfigValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOtlpExport() == nil {
		err := ExporterConfigValidationError{
			field:  "OtlpExport",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetOtlpExport()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExporterConfigValidationError{
					field:  "OtlpExport",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExporterConfigValidationError{
					field:  "OtlpExport",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOtlpExport()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExporterConfigValidationError{
				field:  "OtlpExport",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExporterConfigMultiError(errors)
	}

	return nil
}

// ExporterConfigMultiError is an error wrapping multiple validation errors
// returned by ExporterConfig.ValidateAll() if the designated constraints
// aren't met.
type ExporterConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExporterConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExporterConfigMultiError) AllErrors() []error { return m }

// ExporterConfigValidationError is the validation error returned by
// ExporterConfig.Validate if the designated constraints aren't met.
type ExporterConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExporterConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExporterConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExporterConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExporterConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExporterConfigValidationError) ErrorName() string { return "ExporterConfigValidationError" }

// Error satisfies the builtin error interface
func (e ExporterConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExporterConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExporterConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExporterConfigValidationError{}

// Validate checks the field values on ExecutorConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExecutorConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExecutorConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExecutorConfigMultiError,
// or nil if none found.
func (m *ExecutorConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ExecutorConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ExecutorConfigValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetK6()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExecutorConfigValidationError{
					field:  "K6",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExecutorConfigValidationError{
					field:  "K6",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetK6()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExecutorConfigValidationError{
				field:  "K6",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExecutorConfigMultiError(errors)
	}

	return nil
}

// ExecutorConfigMultiError is an error wrapping multiple validation errors
// returned by ExecutorConfig.ValidateAll() if the designated constraints
// aren't met.
type ExecutorConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExecutorConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExecutorConfigMultiError) AllErrors() []error { return m }

// ExecutorConfigValidationError is the validation error returned by
// ExecutorConfig.Validate if the designated constraints aren't met.
type ExecutorConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExecutorConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExecutorConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExecutorConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExecutorConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExecutorConfigValidationError) ErrorName() string { return "ExecutorConfigValidationError" }

// Error satisfies the builtin error interface
func (e ExecutorConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExecutorConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExecutorConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExecutorConfigValidationError{}

// Validate checks the field values on Step with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Step) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Step with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StepMultiError, or nil if none found.
func (m *Step) ValidateAll() error {
	return m.validate(true)
}

func (m *Step) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := StepValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetWorkload()) < 1 {
		err := StepValidationError{
			field:  "Workload",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetExecutor()) < 1 {
		err := StepValidationError{
			field:  "Executor",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Exporter != nil {
		// no validation rules for Exporter
	}

	if len(errors) > 0 {
		return StepMultiError(errors)
	}

	return nil
}

// StepMultiError is an error wrapping multiple validation errors returned by
// Step.ValidateAll() if the designated constraints aren't met.
type StepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StepMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StepMultiError) AllErrors() []error { return m }

// StepValidationError is the validation error returned by Step.Validate if the
// designated constraints aren't met.
type StepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StepValidationError) ErrorName() string { return "StepValidationError" }

// Error satisfies the builtin error interface
func (e StepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StepValidationError{}

// Validate checks the field values on SideCarConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SideCarConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SideCarConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SideCarConfigMultiError, or
// nil if none found.
func (m *SideCarConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *SideCarConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, err := url.Parse(m.GetUrl()); err != nil {
		err = SideCarConfigValidationError{
			field:  "Url",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Settings != nil {

		if all {
			switch v := interface{}(m.GetSettings()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SideCarConfigValidationError{
						field:  "Settings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SideCarConfigValidationError{
						field:  "Settings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SideCarConfigValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SideCarConfigMultiError(errors)
	}

	return nil
}

// SideCarConfigMultiError is an error wrapping multiple validation errors
// returned by SideCarConfig.ValidateAll() if the designated constraints
// aren't met.
type SideCarConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SideCarConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SideCarConfigMultiError) AllErrors() []error { return m }

// SideCarConfigValidationError is the validation error returned by
// SideCarConfig.Validate if the designated constraints aren't met.
type SideCarConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SideCarConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SideCarConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SideCarConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SideCarConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SideCarConfigValidationError) ErrorName() string { return "SideCarConfigValidationError" }

// Error satisfies the builtin error interface
func (e SideCarConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSideCarConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SideCarConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SideCarConfigValidationError{}

// Validate checks the field values on CloudConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CloudConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloudConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CloudConfigMultiError, or
// nil if none found.
func (m *CloudConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *CloudConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CloudConfigMultiError(errors)
	}

	return nil
}

// CloudConfigMultiError is an error wrapping multiple validation errors
// returned by CloudConfig.ValidateAll() if the designated constraints aren't met.
type CloudConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloudConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloudConfigMultiError) AllErrors() []error { return m }

// CloudConfigValidationError is the validation error returned by
// CloudConfig.Validate if the designated constraints aren't met.
type CloudConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloudConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloudConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloudConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloudConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloudConfigValidationError) ErrorName() string { return "CloudConfigValidationError" }

// Error satisfies the builtin error interface
func (e CloudConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloudConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloudConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloudConfigValidationError{}

// Validate checks the field values on GlobalConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GlobalConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GlobalConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GlobalConfigMultiError, or
// nil if none found.
func (m *GlobalConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *GlobalConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for RunId

	if m.GetSeed() < 0 {
		err := GlobalConfigValidationError{
			field:  "Seed",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Metadata

	if m.GetDriver() == nil {
		err := GlobalConfigValidationError{
			field:  "Driver",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDriver()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalConfigValidationError{
					field:  "Driver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalConfigValidationError{
					field:  "Driver",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDriver()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalConfigValidationError{
				field:  "Driver",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLogger()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GlobalConfigValidationError{
					field:  "Logger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GlobalConfigValidationError{
					field:  "Logger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLogger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GlobalConfigValidationError{
				field:  "Logger",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GlobalConfigMultiError(errors)
	}

	return nil
}

// GlobalConfigMultiError is an error wrapping multiple validation errors
// returned by GlobalConfig.ValidateAll() if the designated constraints aren't met.
type GlobalConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GlobalConfigMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GlobalConfigMultiError) AllErrors() []error { return m }

// GlobalConfigValidationError is the validation error returned by
// GlobalConfig.Validate if the designated constraints aren't met.
type GlobalConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GlobalConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GlobalConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GlobalConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GlobalConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GlobalConfigValidationError) ErrorName() string { return "GlobalConfigValidationError" }

// Error satisfies the builtin error interface
func (e GlobalConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGlobalConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GlobalConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GlobalConfigValidationError{}

// Validate checks the field values on ConfigFile with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConfigFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigFile with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConfigFileMultiError, or
// nil if none found.
func (m *ConfigFile) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetGlobal()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigFileValidationError{
					field:  "Global",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigFileValidationError{
					field:  "Global",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGlobal()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigFileValidationError{
				field:  "Global",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetExporters() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigFileValidationError{
						field:  fmt.Sprintf("Exporters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigFileValidationError{
						field:  fmt.Sprintf("Exporters[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigFileValidationError{
					field:  fmt.Sprintf("Exporters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetExecutors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigFileValidationError{
						field:  fmt.Sprintf("Executors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigFileValidationError{
						field:  fmt.Sprintf("Executors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigFileValidationError{
					field:  fmt.Sprintf("Executors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSteps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigFileValidationError{
						field:  fmt.Sprintf("Steps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigFileValidationError{
						field:  fmt.Sprintf("Steps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigFileValidationError{
					field:  fmt.Sprintf("Steps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSideCars() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigFileValidationError{
						field:  fmt.Sprintf("SideCars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigFileValidationError{
						field:  fmt.Sprintf("SideCars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigFileValidationError{
					field:  fmt.Sprintf("SideCars[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.GetBenchmark() == nil {
		err := ConfigFileValidationError{
			field:  "Benchmark",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetBenchmark()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigFileValidationError{
					field:  "Benchmark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigFileValidationError{
					field:  "Benchmark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBenchmark()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigFileValidationError{
				field:  "Benchmark",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfigFileMultiError(errors)
	}

	return nil
}

// ConfigFileMultiError is an error wrapping multiple validation errors
// returned by ConfigFile.ValidateAll() if the designated constraints aren't met.
type ConfigFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigFileMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigFileMultiError) AllErrors() []error { return m }

// ConfigFileValidationError is the validation error returned by
// ConfigFile.Validate if the designated constraints aren't met.
type ConfigFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigFileValidationError) ErrorName() string { return "ConfigFileValidationError" }

// Error satisfies the builtin error interface
func (e ConfigFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigFileValidationError{}
