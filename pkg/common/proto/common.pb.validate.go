// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: stroppy/common.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _common_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on OtlpExport with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OtlpExport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OtlpExport with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OtlpExportMultiError, or
// nil if none found.
func (m *OtlpExport) ValidateAll() error {
	return m.validate(true)
}

func (m *OtlpExport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.OtlpGrpcEndpoint != nil {
		// no validation rules for OtlpGrpcEndpoint
	}

	if m.OtlpHttpEndpoint != nil {
		// no validation rules for OtlpHttpEndpoint
	}

	if m.OtlpHttpExporterUrlPath != nil {
		// no validation rules for OtlpHttpExporterUrlPath
	}

	if m.OtlpEndpointInsecure != nil {
		// no validation rules for OtlpEndpointInsecure
	}

	if m.OtlpHeaders != nil {
		// no validation rules for OtlpHeaders
	}

	if m.OtlpMetricsPrefix != nil {
		// no validation rules for OtlpMetricsPrefix
	}

	if len(errors) > 0 {
		return OtlpExportMultiError(errors)
	}

	return nil
}

// OtlpExportMultiError is an error wrapping multiple validation errors
// returned by OtlpExport.ValidateAll() if the designated constraints aren't met.
type OtlpExportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OtlpExportMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OtlpExportMultiError) AllErrors() []error { return m }

// OtlpExportValidationError is the validation error returned by
// OtlpExport.Validate if the designated constraints aren't met.
type OtlpExportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OtlpExportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OtlpExportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OtlpExportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OtlpExportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OtlpExportValidationError) ErrorName() string { return "OtlpExportValidationError" }

// Error satisfies the builtin error interface
func (e OtlpExportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOtlpExport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OtlpExportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OtlpExportValidationError{}

// Validate checks the field values on Decimal with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Decimal) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Decimal with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DecimalMultiError, or nil if none found.
func (m *Decimal) ValidateAll() error {
	return m.validate(true)
}

func (m *Decimal) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetValue()) < 1 {
		err := DecimalValidationError{
			field:  "Value",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DecimalMultiError(errors)
	}

	return nil
}

// DecimalMultiError is an error wrapping multiple validation errors returned
// by Decimal.ValidateAll() if the designated constraints aren't met.
type DecimalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DecimalMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DecimalMultiError) AllErrors() []error { return m }

// DecimalValidationError is the validation error returned by Decimal.Validate
// if the designated constraints aren't met.
type DecimalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DecimalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DecimalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DecimalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DecimalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DecimalValidationError) ErrorName() string { return "DecimalValidationError" }

// Error satisfies the builtin error interface
func (e DecimalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDecimal.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DecimalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DecimalValidationError{}

// Validate checks the field values on Uuid with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Uuid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Uuid with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UuidMultiError, or nil if none found.
func (m *Uuid) ValidateAll() error {
	return m.validate(true)
}

func (m *Uuid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetValue()); err != nil {
		err = UuidValidationError{
			field:  "Value",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UuidMultiError(errors)
	}

	return nil
}

func (m *Uuid) _validateUuid(uuid string) error {
	if matched := _common_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UuidMultiError is an error wrapping multiple validation errors returned by
// Uuid.ValidateAll() if the designated constraints aren't met.
type UuidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UuidMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UuidMultiError) AllErrors() []error { return m }

// UuidValidationError is the validation error returned by Uuid.Validate if the
// designated constraints aren't met.
type UuidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UuidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UuidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UuidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UuidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UuidValidationError) ErrorName() string { return "UuidValidationError" }

// Error satisfies the builtin error interface
func (e UuidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUuid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UuidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UuidValidationError{}

// Validate checks the field values on DateTime with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DateTime) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DateTime with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DateTimeMultiError, or nil
// if none found.
func (m *DateTime) ValidateAll() error {
	return m.validate(true)
}

func (m *DateTime) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DateTimeValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DateTimeValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DateTimeValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DateTimeMultiError(errors)
	}

	return nil
}

// DateTimeMultiError is an error wrapping multiple validation errors returned
// by DateTime.ValidateAll() if the designated constraints aren't met.
type DateTimeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DateTimeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DateTimeMultiError) AllErrors() []error { return m }

// DateTimeValidationError is the validation error returned by
// DateTime.Validate if the designated constraints aren't met.
type DateTimeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DateTimeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DateTimeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DateTimeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DateTimeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DateTimeValidationError) ErrorName() string { return "DateTimeValidationError" }

// Error satisfies the builtin error interface
func (e DateTimeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDateTime.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DateTimeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DateTimeValidationError{}

// Validate checks the field values on Ulid with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Ulid) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Ulid with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UlidMultiError, or nil if none found.
func (m *Ulid) ValidateAll() error {
	return m.validate(true)
}

func (m *Ulid) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetValue()) != 26 {
		err := UlidValidationError{
			field:  "Value",
			reason: "value length must be 26 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return UlidMultiError(errors)
	}

	return nil
}

// UlidMultiError is an error wrapping multiple validation errors returned by
// Ulid.ValidateAll() if the designated constraints aren't met.
type UlidMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UlidMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UlidMultiError) AllErrors() []error { return m }

// UlidValidationError is the validation error returned by Ulid.Validate if the
// designated constraints aren't met.
type UlidValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UlidValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UlidValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UlidValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UlidValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UlidValidationError) ErrorName() string { return "UlidValidationError" }

// Error satisfies the builtin error interface
func (e UlidValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUlid.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UlidValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UlidValidationError{}

// Validate checks the field values on Value with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Value) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Value with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ValueMultiError, or nil if none found.
func (m *Value) ValidateAll() error {
	return m.validate(true)
}

func (m *Value) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	switch v := m.Type.(type) {
	case *Value_Null:
		if v == nil {
			err := ValueValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Null
	case *Value_Int32:
		if v == nil {
			err := ValueValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Int32
	case *Value_Uint32:
		if v == nil {
			err := ValueValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Uint32
	case *Value_Int64:
		if v == nil {
			err := ValueValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Int64
	case *Value_Uint64:
		if v == nil {
			err := ValueValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Uint64
	case *Value_Float:
		if v == nil {
			err := ValueValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Float
	case *Value_Double:
		if v == nil {
			err := ValueValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Double
	case *Value_String_:
		if v == nil {
			err := ValueValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for String_
	case *Value_Bool:
		if v == nil {
			err := ValueValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Bool
	case *Value_Decimal:
		if v == nil {
			err := ValueValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDecimal()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "Decimal",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "Decimal",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDecimal()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "Decimal",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_Uuid:
		if v == nil {
			err := ValueValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUuid()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "Uuid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "Uuid",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUuid()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "Uuid",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_Datetime:
		if v == nil {
			err := ValueValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDatetime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "Datetime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "Datetime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDatetime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "Datetime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_Struct_:
		if v == nil {
			err := ValueValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetStruct()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "Struct",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "Struct",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStruct()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "Struct",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Value_List_:
		if v == nil {
			err := ValueValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetList()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "List",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ValueValidationError{
						field:  "List",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ValueValidationError{
					field:  "List",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ValueMultiError(errors)
	}

	return nil
}

// ValueMultiError is an error wrapping multiple validation errors returned by
// Value.ValidateAll() if the designated constraints aren't met.
type ValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValueMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValueMultiError) AllErrors() []error { return m }

// ValueValidationError is the validation error returned by Value.Validate if
// the designated constraints aren't met.
type ValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValueValidationError) ErrorName() string { return "ValueValidationError" }

// Error satisfies the builtin error interface
func (e ValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValueValidationError{}

// Validate checks the field values on Generation with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Generation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Generation with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GenerationMultiError, or
// nil if none found.
func (m *Generation) ValidateAll() error {
	return m.validate(true)
}

func (m *Generation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GenerationMultiError(errors)
	}

	return nil
}

// GenerationMultiError is an error wrapping multiple validation errors
// returned by Generation.ValidateAll() if the designated constraints aren't met.
type GenerationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerationMultiError) AllErrors() []error { return m }

// GenerationValidationError is the validation error returned by
// Generation.Validate if the designated constraints aren't met.
type GenerationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerationValidationError) ErrorName() string { return "GenerationValidationError" }

// Error satisfies the builtin error interface
func (e GenerationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerationValidationError{}

// Validate checks the field values on Value_List with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Value_List) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Value_List with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Value_ListMultiError, or
// nil if none found.
func (m *Value_List) ValidateAll() error {
	return m.validate(true)
}

func (m *Value_List) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetValues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Value_ListValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Value_ListValidationError{
						field:  fmt.Sprintf("Values[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Value_ListValidationError{
					field:  fmt.Sprintf("Values[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Value_ListMultiError(errors)
	}

	return nil
}

// Value_ListMultiError is an error wrapping multiple validation errors
// returned by Value_List.ValidateAll() if the designated constraints aren't met.
type Value_ListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Value_ListMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Value_ListMultiError) AllErrors() []error { return m }

// Value_ListValidationError is the validation error returned by
// Value_List.Validate if the designated constraints aren't met.
type Value_ListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Value_ListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Value_ListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Value_ListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Value_ListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Value_ListValidationError) ErrorName() string { return "Value_ListValidationError" }

// Error satisfies the builtin error interface
func (e Value_ListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValue_List.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Value_ListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Value_ListValidationError{}

// Validate checks the field values on Value_Struct with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Value_Struct) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Value_Struct with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in Value_StructMultiError, or
// nil if none found.
func (m *Value_Struct) ValidateAll() error {
	return m.validate(true)
}

func (m *Value_Struct) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Value_StructValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Value_StructValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Value_StructValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Value_StructMultiError(errors)
	}

	return nil
}

// Value_StructMultiError is an error wrapping multiple validation errors
// returned by Value_Struct.ValidateAll() if the designated constraints aren't met.
type Value_StructMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Value_StructMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Value_StructMultiError) AllErrors() []error { return m }

// Value_StructValidationError is the validation error returned by
// Value_Struct.Validate if the designated constraints aren't met.
type Value_StructValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Value_StructValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Value_StructValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Value_StructValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Value_StructValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Value_StructValidationError) ErrorName() string { return "Value_StructValidationError" }

// Error satisfies the builtin error interface
func (e Value_StructValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValue_Struct.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Value_StructValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Value_StructValidationError{}

// Validate checks the field values on Generation_Alphabet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Generation_Alphabet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Generation_Alphabet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Generation_AlphabetMultiError, or nil if none found.
func (m *Generation_Alphabet) ValidateAll() error {
	return m.validate(true)
}

func (m *Generation_Alphabet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetRanges()) < 1 {
		err := Generation_AlphabetValidationError{
			field:  "Ranges",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRanges() {
		_, _ = idx, item

		if item == nil {
			err := Generation_AlphabetValidationError{
				field:  fmt.Sprintf("Ranges[%v]", idx),
				reason: "value is required",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Generation_AlphabetValidationError{
						field:  fmt.Sprintf("Ranges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Generation_AlphabetValidationError{
						field:  fmt.Sprintf("Ranges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Generation_AlphabetValidationError{
					field:  fmt.Sprintf("Ranges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return Generation_AlphabetMultiError(errors)
	}

	return nil
}

// Generation_AlphabetMultiError is an error wrapping multiple validation
// errors returned by Generation_Alphabet.ValidateAll() if the designated
// constraints aren't met.
type Generation_AlphabetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Generation_AlphabetMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Generation_AlphabetMultiError) AllErrors() []error { return m }

// Generation_AlphabetValidationError is the validation error returned by
// Generation_Alphabet.Validate if the designated constraints aren't met.
type Generation_AlphabetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Generation_AlphabetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Generation_AlphabetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Generation_AlphabetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Generation_AlphabetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Generation_AlphabetValidationError) ErrorName() string {
	return "Generation_AlphabetValidationError"
}

// Error satisfies the builtin error interface
func (e Generation_AlphabetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneration_Alphabet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Generation_AlphabetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Generation_AlphabetValidationError{}

// Validate checks the field values on Generation_Distribution with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Generation_Distribution) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Generation_Distribution with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Generation_DistributionMultiError, or nil if none found.
func (m *Generation_Distribution) ValidateAll() error {
	return m.validate(true)
}

func (m *Generation_Distribution) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := Generation_Distribution_DistributionType_name[int32(m.GetType())]; !ok {
		err := Generation_DistributionValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetScrew() < 0 {
		err := Generation_DistributionValidationError{
			field:  "Screw",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Generation_DistributionMultiError(errors)
	}

	return nil
}

// Generation_DistributionMultiError is an error wrapping multiple validation
// errors returned by Generation_Distribution.ValidateAll() if the designated
// constraints aren't met.
type Generation_DistributionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Generation_DistributionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Generation_DistributionMultiError) AllErrors() []error { return m }

// Generation_DistributionValidationError is the validation error returned by
// Generation_Distribution.Validate if the designated constraints aren't met.
type Generation_DistributionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Generation_DistributionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Generation_DistributionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Generation_DistributionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Generation_DistributionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Generation_DistributionValidationError) ErrorName() string {
	return "Generation_DistributionValidationError"
}

// Error satisfies the builtin error interface
func (e Generation_DistributionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneration_Distribution.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Generation_DistributionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Generation_DistributionValidationError{}

// Validate checks the field values on Generation_Range with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Generation_Range) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Generation_Range with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Generation_RangeMultiError, or nil if none found.
func (m *Generation_Range) ValidateAll() error {
	return m.validate(true)
}

func (m *Generation_Range) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return Generation_RangeMultiError(errors)
	}

	return nil
}

// Generation_RangeMultiError is an error wrapping multiple validation errors
// returned by Generation_Range.ValidateAll() if the designated constraints
// aren't met.
type Generation_RangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Generation_RangeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Generation_RangeMultiError) AllErrors() []error { return m }

// Generation_RangeValidationError is the validation error returned by
// Generation_Range.Validate if the designated constraints aren't met.
type Generation_RangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Generation_RangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Generation_RangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Generation_RangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Generation_RangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Generation_RangeValidationError) ErrorName() string { return "Generation_RangeValidationError" }

// Error satisfies the builtin error interface
func (e Generation_RangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneration_Range.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Generation_RangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Generation_RangeValidationError{}

// Validate checks the field values on Generation_Rule with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Generation_Rule) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Generation_Rule with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Generation_RuleMultiError, or nil if none found.
func (m *Generation_Rule) ValidateAll() error {
	return m.validate(true)
}

func (m *Generation_Rule) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofKindPresent := false
	switch v := m.Kind.(type) {
	case *Generation_Rule_Int32Range:
		if v == nil {
			err := Generation_RuleValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true

		if all {
			switch v := interface{}(m.GetInt32Range()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "Int32Range",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "Int32Range",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInt32Range()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Generation_RuleValidationError{
					field:  "Int32Range",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Generation_Rule_Int64Range:
		if v == nil {
			err := Generation_RuleValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true

		if all {
			switch v := interface{}(m.GetInt64Range()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "Int64Range",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "Int64Range",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInt64Range()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Generation_RuleValidationError{
					field:  "Int64Range",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Generation_Rule_Uint32Range:
		if v == nil {
			err := Generation_RuleValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true

		if all {
			switch v := interface{}(m.GetUint32Range()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "Uint32Range",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "Uint32Range",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUint32Range()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Generation_RuleValidationError{
					field:  "Uint32Range",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Generation_Rule_Uint64Range:
		if v == nil {
			err := Generation_RuleValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true

		if all {
			switch v := interface{}(m.GetUint64Range()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "Uint64Range",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "Uint64Range",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUint64Range()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Generation_RuleValidationError{
					field:  "Uint64Range",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Generation_Rule_FloatRange:
		if v == nil {
			err := Generation_RuleValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true

		if all {
			switch v := interface{}(m.GetFloatRange()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "FloatRange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "FloatRange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFloatRange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Generation_RuleValidationError{
					field:  "FloatRange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Generation_Rule_DoubleRange:
		if v == nil {
			err := Generation_RuleValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true

		if all {
			switch v := interface{}(m.GetDoubleRange()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "DoubleRange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "DoubleRange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDoubleRange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Generation_RuleValidationError{
					field:  "DoubleRange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Generation_Rule_DecimalRange:
		if v == nil {
			err := Generation_RuleValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true

		if all {
			switch v := interface{}(m.GetDecimalRange()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "DecimalRange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "DecimalRange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDecimalRange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Generation_RuleValidationError{
					field:  "DecimalRange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Generation_Rule_StringRange:
		if v == nil {
			err := Generation_RuleValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true

		if all {
			switch v := interface{}(m.GetStringRange()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "StringRange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "StringRange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStringRange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Generation_RuleValidationError{
					field:  "StringRange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Generation_Rule_BoolRange:
		if v == nil {
			err := Generation_RuleValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true

		if all {
			switch v := interface{}(m.GetBoolRange()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "BoolRange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "BoolRange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBoolRange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Generation_RuleValidationError{
					field:  "BoolRange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Generation_Rule_DatetimeRange:
		if v == nil {
			err := Generation_RuleValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true

		if all {
			switch v := interface{}(m.GetDatetimeRange()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "DatetimeRange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "DatetimeRange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDatetimeRange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Generation_RuleValidationError{
					field:  "DatetimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Generation_Rule_Int32Const:
		if v == nil {
			err := Generation_RuleValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true
		// no validation rules for Int32Const
	case *Generation_Rule_Int64Const:
		if v == nil {
			err := Generation_RuleValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true
		// no validation rules for Int64Const
	case *Generation_Rule_Uint32Const:
		if v == nil {
			err := Generation_RuleValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true
		// no validation rules for Uint32Const
	case *Generation_Rule_Uint64Const:
		if v == nil {
			err := Generation_RuleValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true
		// no validation rules for Uint64Const
	case *Generation_Rule_FloatConst:
		if v == nil {
			err := Generation_RuleValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true
		// no validation rules for FloatConst
	case *Generation_Rule_DoubleConst:
		if v == nil {
			err := Generation_RuleValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true
		// no validation rules for DoubleConst
	case *Generation_Rule_DecimalConst:
		if v == nil {
			err := Generation_RuleValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true

		if all {
			switch v := interface{}(m.GetDecimalConst()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "DecimalConst",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "DecimalConst",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDecimalConst()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Generation_RuleValidationError{
					field:  "DecimalConst",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Generation_Rule_StringConst:
		if v == nil {
			err := Generation_RuleValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true
		// no validation rules for StringConst
	case *Generation_Rule_BoolConst:
		if v == nil {
			err := Generation_RuleValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true
		// no validation rules for BoolConst
	case *Generation_Rule_DatetimeConst:
		if v == nil {
			err := Generation_RuleValidationError{
				field:  "Kind",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofKindPresent = true

		if all {
			switch v := interface{}(m.GetDatetimeConst()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "DatetimeConst",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "DatetimeConst",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDatetimeConst()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Generation_RuleValidationError{
					field:  "DatetimeConst",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofKindPresent {
		err := Generation_RuleValidationError{
			field:  "Kind",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Distribution != nil {

		if all {
			switch v := interface{}(m.GetDistribution()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "Distribution",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Generation_RuleValidationError{
						field:  "Distribution",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDistribution()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Generation_RuleValidationError{
					field:  "Distribution",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.NullPercentage != nil {

		if val := m.GetNullPercentage(); val < 0 || val > 100 {
			err := Generation_RuleValidationError{
				field:  "NullPercentage",
				reason: "value must be inside range [0, 100]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Unique != nil {
		// no validation rules for Unique
	}

	if len(errors) > 0 {
		return Generation_RuleMultiError(errors)
	}

	return nil
}

// Generation_RuleMultiError is an error wrapping multiple validation errors
// returned by Generation_Rule.ValidateAll() if the designated constraints
// aren't met.
type Generation_RuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Generation_RuleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Generation_RuleMultiError) AllErrors() []error { return m }

// Generation_RuleValidationError is the validation error returned by
// Generation_Rule.Validate if the designated constraints aren't met.
type Generation_RuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Generation_RuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Generation_RuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Generation_RuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Generation_RuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Generation_RuleValidationError) ErrorName() string { return "Generation_RuleValidationError" }

// Error satisfies the builtin error interface
func (e Generation_RuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneration_Rule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Generation_RuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Generation_RuleValidationError{}

// Validate checks the field values on Generation_Range_Bool with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Generation_Range_Bool) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Generation_Range_Bool with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Generation_Range_BoolMultiError, or nil if none found.
func (m *Generation_Range_Bool) ValidateAll() error {
	return m.validate(true)
}

func (m *Generation_Range_Bool) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ratio

	if len(errors) > 0 {
		return Generation_Range_BoolMultiError(errors)
	}

	return nil
}

// Generation_Range_BoolMultiError is an error wrapping multiple validation
// errors returned by Generation_Range_Bool.ValidateAll() if the designated
// constraints aren't met.
type Generation_Range_BoolMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Generation_Range_BoolMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Generation_Range_BoolMultiError) AllErrors() []error { return m }

// Generation_Range_BoolValidationError is the validation error returned by
// Generation_Range_Bool.Validate if the designated constraints aren't met.
type Generation_Range_BoolValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Generation_Range_BoolValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Generation_Range_BoolValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Generation_Range_BoolValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Generation_Range_BoolValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Generation_Range_BoolValidationError) ErrorName() string {
	return "Generation_Range_BoolValidationError"
}

// Error satisfies the builtin error interface
func (e Generation_Range_BoolValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneration_Range_Bool.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Generation_Range_BoolValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Generation_Range_BoolValidationError{}

// Validate checks the field values on Generation_Range_String with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Generation_Range_String) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Generation_Range_String with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Generation_Range_StringMultiError, or nil if none found.
func (m *Generation_Range_String) ValidateAll() error {
	return m.validate(true)
}

func (m *Generation_Range_String) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MaxLen

	if m.Alphabet != nil {

		if all {
			switch v := interface{}(m.GetAlphabet()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Generation_Range_StringValidationError{
						field:  "Alphabet",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Generation_Range_StringValidationError{
						field:  "Alphabet",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAlphabet()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Generation_Range_StringValidationError{
					field:  "Alphabet",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.MinLen != nil {
		// no validation rules for MinLen
	}

	if len(errors) > 0 {
		return Generation_Range_StringMultiError(errors)
	}

	return nil
}

// Generation_Range_StringMultiError is an error wrapping multiple validation
// errors returned by Generation_Range_String.ValidateAll() if the designated
// constraints aren't met.
type Generation_Range_StringMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Generation_Range_StringMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Generation_Range_StringMultiError) AllErrors() []error { return m }

// Generation_Range_StringValidationError is the validation error returned by
// Generation_Range_String.Validate if the designated constraints aren't met.
type Generation_Range_StringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Generation_Range_StringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Generation_Range_StringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Generation_Range_StringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Generation_Range_StringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Generation_Range_StringValidationError) ErrorName() string {
	return "Generation_Range_StringValidationError"
}

// Error satisfies the builtin error interface
func (e Generation_Range_StringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneration_Range_String.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Generation_Range_StringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Generation_Range_StringValidationError{}

// Validate checks the field values on Generation_Range_AnyString with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Generation_Range_AnyString) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Generation_Range_AnyString with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Generation_Range_AnyStringMultiError, or nil if none found.
func (m *Generation_Range_AnyString) ValidateAll() error {
	return m.validate(true)
}

func (m *Generation_Range_AnyString) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Min

	// no validation rules for Max

	if len(errors) > 0 {
		return Generation_Range_AnyStringMultiError(errors)
	}

	return nil
}

// Generation_Range_AnyStringMultiError is an error wrapping multiple
// validation errors returned by Generation_Range_AnyString.ValidateAll() if
// the designated constraints aren't met.
type Generation_Range_AnyStringMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Generation_Range_AnyStringMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Generation_Range_AnyStringMultiError) AllErrors() []error { return m }

// Generation_Range_AnyStringValidationError is the validation error returned
// by Generation_Range_AnyString.Validate if the designated constraints aren't met.
type Generation_Range_AnyStringValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Generation_Range_AnyStringValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Generation_Range_AnyStringValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Generation_Range_AnyStringValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Generation_Range_AnyStringValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Generation_Range_AnyStringValidationError) ErrorName() string {
	return "Generation_Range_AnyStringValidationError"
}

// Error satisfies the builtin error interface
func (e Generation_Range_AnyStringValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneration_Range_AnyString.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Generation_Range_AnyStringValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Generation_Range_AnyStringValidationError{}

// Validate checks the field values on Generation_Range_Float with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Generation_Range_Float) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Generation_Range_Float with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Generation_Range_FloatMultiError, or nil if none found.
func (m *Generation_Range_Float) ValidateAll() error {
	return m.validate(true)
}

func (m *Generation_Range_Float) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Max

	if m.Min != nil {
		// no validation rules for Min
	}

	if len(errors) > 0 {
		return Generation_Range_FloatMultiError(errors)
	}

	return nil
}

// Generation_Range_FloatMultiError is an error wrapping multiple validation
// errors returned by Generation_Range_Float.ValidateAll() if the designated
// constraints aren't met.
type Generation_Range_FloatMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Generation_Range_FloatMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Generation_Range_FloatMultiError) AllErrors() []error { return m }

// Generation_Range_FloatValidationError is the validation error returned by
// Generation_Range_Float.Validate if the designated constraints aren't met.
type Generation_Range_FloatValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Generation_Range_FloatValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Generation_Range_FloatValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Generation_Range_FloatValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Generation_Range_FloatValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Generation_Range_FloatValidationError) ErrorName() string {
	return "Generation_Range_FloatValidationError"
}

// Error satisfies the builtin error interface
func (e Generation_Range_FloatValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneration_Range_Float.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Generation_Range_FloatValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Generation_Range_FloatValidationError{}

// Validate checks the field values on Generation_Range_Double with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Generation_Range_Double) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Generation_Range_Double with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Generation_Range_DoubleMultiError, or nil if none found.
func (m *Generation_Range_Double) ValidateAll() error {
	return m.validate(true)
}

func (m *Generation_Range_Double) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Max

	if m.Min != nil {
		// no validation rules for Min
	}

	if len(errors) > 0 {
		return Generation_Range_DoubleMultiError(errors)
	}

	return nil
}

// Generation_Range_DoubleMultiError is an error wrapping multiple validation
// errors returned by Generation_Range_Double.ValidateAll() if the designated
// constraints aren't met.
type Generation_Range_DoubleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Generation_Range_DoubleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Generation_Range_DoubleMultiError) AllErrors() []error { return m }

// Generation_Range_DoubleValidationError is the validation error returned by
// Generation_Range_Double.Validate if the designated constraints aren't met.
type Generation_Range_DoubleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Generation_Range_DoubleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Generation_Range_DoubleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Generation_Range_DoubleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Generation_Range_DoubleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Generation_Range_DoubleValidationError) ErrorName() string {
	return "Generation_Range_DoubleValidationError"
}

// Error satisfies the builtin error interface
func (e Generation_Range_DoubleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneration_Range_Double.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Generation_Range_DoubleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Generation_Range_DoubleValidationError{}

// Validate checks the field values on Generation_Range_Int32 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Generation_Range_Int32) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Generation_Range_Int32 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Generation_Range_Int32MultiError, or nil if none found.
func (m *Generation_Range_Int32) ValidateAll() error {
	return m.validate(true)
}

func (m *Generation_Range_Int32) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Max

	if m.Min != nil {
		// no validation rules for Min
	}

	if len(errors) > 0 {
		return Generation_Range_Int32MultiError(errors)
	}

	return nil
}

// Generation_Range_Int32MultiError is an error wrapping multiple validation
// errors returned by Generation_Range_Int32.ValidateAll() if the designated
// constraints aren't met.
type Generation_Range_Int32MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Generation_Range_Int32MultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Generation_Range_Int32MultiError) AllErrors() []error { return m }

// Generation_Range_Int32ValidationError is the validation error returned by
// Generation_Range_Int32.Validate if the designated constraints aren't met.
type Generation_Range_Int32ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Generation_Range_Int32ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Generation_Range_Int32ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Generation_Range_Int32ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Generation_Range_Int32ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Generation_Range_Int32ValidationError) ErrorName() string {
	return "Generation_Range_Int32ValidationError"
}

// Error satisfies the builtin error interface
func (e Generation_Range_Int32ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneration_Range_Int32.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Generation_Range_Int32ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Generation_Range_Int32ValidationError{}

// Validate checks the field values on Generation_Range_Int64 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Generation_Range_Int64) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Generation_Range_Int64 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Generation_Range_Int64MultiError, or nil if none found.
func (m *Generation_Range_Int64) ValidateAll() error {
	return m.validate(true)
}

func (m *Generation_Range_Int64) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Max

	if m.Min != nil {
		// no validation rules for Min
	}

	if len(errors) > 0 {
		return Generation_Range_Int64MultiError(errors)
	}

	return nil
}

// Generation_Range_Int64MultiError is an error wrapping multiple validation
// errors returned by Generation_Range_Int64.ValidateAll() if the designated
// constraints aren't met.
type Generation_Range_Int64MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Generation_Range_Int64MultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Generation_Range_Int64MultiError) AllErrors() []error { return m }

// Generation_Range_Int64ValidationError is the validation error returned by
// Generation_Range_Int64.Validate if the designated constraints aren't met.
type Generation_Range_Int64ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Generation_Range_Int64ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Generation_Range_Int64ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Generation_Range_Int64ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Generation_Range_Int64ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Generation_Range_Int64ValidationError) ErrorName() string {
	return "Generation_Range_Int64ValidationError"
}

// Error satisfies the builtin error interface
func (e Generation_Range_Int64ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneration_Range_Int64.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Generation_Range_Int64ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Generation_Range_Int64ValidationError{}

// Validate checks the field values on Generation_Range_UInt32 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Generation_Range_UInt32) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Generation_Range_UInt32 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Generation_Range_UInt32MultiError, or nil if none found.
func (m *Generation_Range_UInt32) ValidateAll() error {
	return m.validate(true)
}

func (m *Generation_Range_UInt32) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Max

	if m.Min != nil {
		// no validation rules for Min
	}

	if len(errors) > 0 {
		return Generation_Range_UInt32MultiError(errors)
	}

	return nil
}

// Generation_Range_UInt32MultiError is an error wrapping multiple validation
// errors returned by Generation_Range_UInt32.ValidateAll() if the designated
// constraints aren't met.
type Generation_Range_UInt32MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Generation_Range_UInt32MultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Generation_Range_UInt32MultiError) AllErrors() []error { return m }

// Generation_Range_UInt32ValidationError is the validation error returned by
// Generation_Range_UInt32.Validate if the designated constraints aren't met.
type Generation_Range_UInt32ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Generation_Range_UInt32ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Generation_Range_UInt32ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Generation_Range_UInt32ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Generation_Range_UInt32ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Generation_Range_UInt32ValidationError) ErrorName() string {
	return "Generation_Range_UInt32ValidationError"
}

// Error satisfies the builtin error interface
func (e Generation_Range_UInt32ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneration_Range_UInt32.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Generation_Range_UInt32ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Generation_Range_UInt32ValidationError{}

// Validate checks the field values on Generation_Range_UInt64 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Generation_Range_UInt64) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Generation_Range_UInt64 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Generation_Range_UInt64MultiError, or nil if none found.
func (m *Generation_Range_UInt64) ValidateAll() error {
	return m.validate(true)
}

func (m *Generation_Range_UInt64) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Max

	if m.Min != nil {
		// no validation rules for Min
	}

	if len(errors) > 0 {
		return Generation_Range_UInt64MultiError(errors)
	}

	return nil
}

// Generation_Range_UInt64MultiError is an error wrapping multiple validation
// errors returned by Generation_Range_UInt64.ValidateAll() if the designated
// constraints aren't met.
type Generation_Range_UInt64MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Generation_Range_UInt64MultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Generation_Range_UInt64MultiError) AllErrors() []error { return m }

// Generation_Range_UInt64ValidationError is the validation error returned by
// Generation_Range_UInt64.Validate if the designated constraints aren't met.
type Generation_Range_UInt64ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Generation_Range_UInt64ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Generation_Range_UInt64ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Generation_Range_UInt64ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Generation_Range_UInt64ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Generation_Range_UInt64ValidationError) ErrorName() string {
	return "Generation_Range_UInt64ValidationError"
}

// Error satisfies the builtin error interface
func (e Generation_Range_UInt64ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneration_Range_UInt64.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Generation_Range_UInt64ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Generation_Range_UInt64ValidationError{}

// Validate checks the field values on Generation_Range_DecimalRange with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Generation_Range_DecimalRange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Generation_Range_DecimalRange with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// Generation_Range_DecimalRangeMultiError, or nil if none found.
func (m *Generation_Range_DecimalRange) ValidateAll() error {
	return m.validate(true)
}

func (m *Generation_Range_DecimalRange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofTypePresent := false
	switch v := m.Type.(type) {
	case *Generation_Range_DecimalRange_Float:
		if v == nil {
			err := Generation_Range_DecimalRangeValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetFloat()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Generation_Range_DecimalRangeValidationError{
						field:  "Float",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Generation_Range_DecimalRangeValidationError{
						field:  "Float",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFloat()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Generation_Range_DecimalRangeValidationError{
					field:  "Float",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Generation_Range_DecimalRange_Double:
		if v == nil {
			err := Generation_Range_DecimalRangeValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetDouble()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Generation_Range_DecimalRangeValidationError{
						field:  "Double",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Generation_Range_DecimalRangeValidationError{
						field:  "Double",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDouble()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Generation_Range_DecimalRangeValidationError{
					field:  "Double",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Generation_Range_DecimalRange_String_:
		if v == nil {
			err := Generation_Range_DecimalRangeValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetString_()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Generation_Range_DecimalRangeValidationError{
						field:  "String_",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Generation_Range_DecimalRangeValidationError{
						field:  "String_",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetString_()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Generation_Range_DecimalRangeValidationError{
					field:  "String_",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofTypePresent {
		err := Generation_Range_DecimalRangeValidationError{
			field:  "Type",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Generation_Range_DecimalRangeMultiError(errors)
	}

	return nil
}

// Generation_Range_DecimalRangeMultiError is an error wrapping multiple
// validation errors returned by Generation_Range_DecimalRange.ValidateAll()
// if the designated constraints aren't met.
type Generation_Range_DecimalRangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Generation_Range_DecimalRangeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Generation_Range_DecimalRangeMultiError) AllErrors() []error { return m }

// Generation_Range_DecimalRangeValidationError is the validation error
// returned by Generation_Range_DecimalRange.Validate if the designated
// constraints aren't met.
type Generation_Range_DecimalRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Generation_Range_DecimalRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Generation_Range_DecimalRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Generation_Range_DecimalRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Generation_Range_DecimalRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Generation_Range_DecimalRangeValidationError) ErrorName() string {
	return "Generation_Range_DecimalRangeValidationError"
}

// Error satisfies the builtin error interface
func (e Generation_Range_DecimalRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneration_Range_DecimalRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Generation_Range_DecimalRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Generation_Range_DecimalRangeValidationError{}

// Validate checks the field values on Generation_Range_DateTime with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Generation_Range_DateTime) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Generation_Range_DateTime with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Generation_Range_DateTimeMultiError, or nil if none found.
func (m *Generation_Range_DateTime) ValidateAll() error {
	return m.validate(true)
}

func (m *Generation_Range_DateTime) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofTypePresent := false
	switch v := m.Type.(type) {
	case *Generation_Range_DateTime_String_:
		if v == nil {
			err := Generation_Range_DateTimeValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetString_()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Generation_Range_DateTimeValidationError{
						field:  "String_",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Generation_Range_DateTimeValidationError{
						field:  "String_",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetString_()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Generation_Range_DateTimeValidationError{
					field:  "String_",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Generation_Range_DateTime_TimestampPb_:
		if v == nil {
			err := Generation_Range_DateTimeValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetTimestampPb()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Generation_Range_DateTimeValidationError{
						field:  "TimestampPb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Generation_Range_DateTimeValidationError{
						field:  "TimestampPb",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimestampPb()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Generation_Range_DateTimeValidationError{
					field:  "TimestampPb",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Generation_Range_DateTime_Timestamp:
		if v == nil {
			err := Generation_Range_DateTimeValidationError{
				field:  "Type",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofTypePresent = true

		if all {
			switch v := interface{}(m.GetTimestamp()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, Generation_Range_DateTimeValidationError{
						field:  "Timestamp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, Generation_Range_DateTimeValidationError{
						field:  "Timestamp",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return Generation_Range_DateTimeValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofTypePresent {
		err := Generation_Range_DateTimeValidationError{
			field:  "Type",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return Generation_Range_DateTimeMultiError(errors)
	}

	return nil
}

// Generation_Range_DateTimeMultiError is an error wrapping multiple validation
// errors returned by Generation_Range_DateTime.ValidateAll() if the
// designated constraints aren't met.
type Generation_Range_DateTimeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Generation_Range_DateTimeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Generation_Range_DateTimeMultiError) AllErrors() []error { return m }

// Generation_Range_DateTimeValidationError is the validation error returned by
// Generation_Range_DateTime.Validate if the designated constraints aren't met.
type Generation_Range_DateTimeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Generation_Range_DateTimeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Generation_Range_DateTimeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Generation_Range_DateTimeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Generation_Range_DateTimeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Generation_Range_DateTimeValidationError) ErrorName() string {
	return "Generation_Range_DateTimeValidationError"
}

// Error satisfies the builtin error interface
func (e Generation_Range_DateTimeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneration_Range_DateTime.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Generation_Range_DateTimeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Generation_Range_DateTimeValidationError{}

// Validate checks the field values on Generation_Range_DateTime_TimestampPb
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *Generation_Range_DateTime_TimestampPb) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Generation_Range_DateTime_TimestampPb
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// Generation_Range_DateTime_TimestampPbMultiError, or nil if none found.
func (m *Generation_Range_DateTime_TimestampPb) ValidateAll() error {
	return m.validate(true)
}

func (m *Generation_Range_DateTime_TimestampPb) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Generation_Range_DateTime_TimestampPbValidationError{
					field:  "Min",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Generation_Range_DateTime_TimestampPbValidationError{
					field:  "Min",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Generation_Range_DateTime_TimestampPbValidationError{
				field:  "Min",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMax()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Generation_Range_DateTime_TimestampPbValidationError{
					field:  "Max",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Generation_Range_DateTime_TimestampPbValidationError{
					field:  "Max",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMax()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Generation_Range_DateTime_TimestampPbValidationError{
				field:  "Max",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return Generation_Range_DateTime_TimestampPbMultiError(errors)
	}

	return nil
}

// Generation_Range_DateTime_TimestampPbMultiError is an error wrapping
// multiple validation errors returned by
// Generation_Range_DateTime_TimestampPb.ValidateAll() if the designated
// constraints aren't met.
type Generation_Range_DateTime_TimestampPbMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Generation_Range_DateTime_TimestampPbMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Generation_Range_DateTime_TimestampPbMultiError) AllErrors() []error { return m }

// Generation_Range_DateTime_TimestampPbValidationError is the validation error
// returned by Generation_Range_DateTime_TimestampPb.Validate if the
// designated constraints aren't met.
type Generation_Range_DateTime_TimestampPbValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Generation_Range_DateTime_TimestampPbValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Generation_Range_DateTime_TimestampPbValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Generation_Range_DateTime_TimestampPbValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Generation_Range_DateTime_TimestampPbValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Generation_Range_DateTime_TimestampPbValidationError) ErrorName() string {
	return "Generation_Range_DateTime_TimestampPbValidationError"
}

// Error satisfies the builtin error interface
func (e Generation_Range_DateTime_TimestampPbValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneration_Range_DateTime_TimestampPb.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Generation_Range_DateTime_TimestampPbValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Generation_Range_DateTime_TimestampPbValidationError{}

// Validate checks the field values on Generation_Range_DateTime_TimestampUnix
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *Generation_Range_DateTime_TimestampUnix) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// Generation_Range_DateTime_TimestampUnix with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// Generation_Range_DateTime_TimestampUnixMultiError, or nil if none found.
func (m *Generation_Range_DateTime_TimestampUnix) ValidateAll() error {
	return m.validate(true)
}

func (m *Generation_Range_DateTime_TimestampUnix) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Min

	// no validation rules for Max

	if len(errors) > 0 {
		return Generation_Range_DateTime_TimestampUnixMultiError(errors)
	}

	return nil
}

// Generation_Range_DateTime_TimestampUnixMultiError is an error wrapping
// multiple validation errors returned by
// Generation_Range_DateTime_TimestampUnix.ValidateAll() if the designated
// constraints aren't met.
type Generation_Range_DateTime_TimestampUnixMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Generation_Range_DateTime_TimestampUnixMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Generation_Range_DateTime_TimestampUnixMultiError) AllErrors() []error { return m }

// Generation_Range_DateTime_TimestampUnixValidationError is the validation
// error returned by Generation_Range_DateTime_TimestampUnix.Validate if the
// designated constraints aren't met.
type Generation_Range_DateTime_TimestampUnixValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Generation_Range_DateTime_TimestampUnixValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Generation_Range_DateTime_TimestampUnixValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Generation_Range_DateTime_TimestampUnixValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Generation_Range_DateTime_TimestampUnixValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Generation_Range_DateTime_TimestampUnixValidationError) ErrorName() string {
	return "Generation_Range_DateTime_TimestampUnixValidationError"
}

// Error satisfies the builtin error interface
func (e Generation_Range_DateTime_TimestampUnixValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGeneration_Range_DateTime_TimestampUnix.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Generation_Range_DateTime_TimestampUnixValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Generation_Range_DateTime_TimestampUnixValidationError{}
