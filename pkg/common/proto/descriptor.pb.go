// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: stroppy/descriptor.proto

package proto

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// * Data insertion method
type InsertMethod int32

const (
	InsertMethod_PLAIN_QUERY InsertMethod = 0
	InsertMethod_COPY_FROM   InsertMethod = 1
)

// Enum value maps for InsertMethod.
var (
	InsertMethod_name = map[int32]string{
		0: "PLAIN_QUERY",
		1: "COPY_FROM",
	}
	InsertMethod_value = map[string]int32{
		"PLAIN_QUERY": 0,
		"COPY_FROM":   1,
	}
)

func (x InsertMethod) Enum() *InsertMethod {
	p := new(InsertMethod)
	*p = x
	return p
}

func (x InsertMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InsertMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_stroppy_descriptor_proto_enumTypes[0].Descriptor()
}

func (InsertMethod) Type() protoreflect.EnumType {
	return &file_stroppy_descriptor_proto_enumTypes[0]
}

func (x InsertMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InsertMethod.Descriptor instead.
func (InsertMethod) EnumDescriptor() ([]byte, []int) {
	return file_stroppy_descriptor_proto_rawDescGZIP(), []int{0}
}

// *
// TransactionIsolationLevel defines the isolation level for a database
// transaction.
type TxIsolationLevel int32

const (
	TxIsolationLevel_UNSPECIFIED      TxIsolationLevel = 0
	TxIsolationLevel_READ_UNCOMMITTED TxIsolationLevel = 1
	TxIsolationLevel_READ_COMMITTED   TxIsolationLevel = 2
	TxIsolationLevel_REPEATABLE_READ  TxIsolationLevel = 3
	TxIsolationLevel_SERIALIZABLE     TxIsolationLevel = 4
)

// Enum value maps for TxIsolationLevel.
var (
	TxIsolationLevel_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "READ_UNCOMMITTED",
		2: "READ_COMMITTED",
		3: "REPEATABLE_READ",
		4: "SERIALIZABLE",
	}
	TxIsolationLevel_value = map[string]int32{
		"UNSPECIFIED":      0,
		"READ_UNCOMMITTED": 1,
		"READ_COMMITTED":   2,
		"REPEATABLE_READ":  3,
		"SERIALIZABLE":     4,
	}
)

func (x TxIsolationLevel) Enum() *TxIsolationLevel {
	p := new(TxIsolationLevel)
	*p = x
	return p
}

func (x TxIsolationLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxIsolationLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_stroppy_descriptor_proto_enumTypes[1].Descriptor()
}

func (TxIsolationLevel) Type() protoreflect.EnumType {
	return &file_stroppy_descriptor_proto_enumTypes[1]
}

func (x TxIsolationLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxIsolationLevel.Descriptor instead.
func (TxIsolationLevel) EnumDescriptor() ([]byte, []int) {
	return file_stroppy_descriptor_proto_rawDescGZIP(), []int{1}
}

// *
// IndexDescriptor defines the structure of a database index.
type IndexDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Name of the index
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// * List of column names that are part of this index
	Columns []string `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	// * Type of index (e.g., BTREE, HASH, etc.)
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// * Whether this is a unique index
	Unique bool `protobuf:"varint,4,opt,name=unique,proto3" json:"unique,omitempty"`
	// * Database-specific index properties
	DbSpecific    *Value_Struct `protobuf:"bytes,5,opt,name=db_specific,json=dbSpecific,proto3,oneof" json:"db_specific,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IndexDescriptor) Reset() {
	*x = IndexDescriptor{}
	mi := &file_stroppy_descriptor_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexDescriptor) ProtoMessage() {}

func (x *IndexDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_stroppy_descriptor_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexDescriptor.ProtoReflect.Descriptor instead.
func (*IndexDescriptor) Descriptor() ([]byte, []int) {
	return file_stroppy_descriptor_proto_rawDescGZIP(), []int{0}
}

func (x *IndexDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IndexDescriptor) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *IndexDescriptor) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IndexDescriptor) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

func (x *IndexDescriptor) GetDbSpecific() *Value_Struct {
	if x != nil {
		return x.DbSpecific
	}
	return nil
}

// *
// ColumnDescriptor defines the structure of a database column.
type ColumnDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Name of the column
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// * SQL data type of the column
	SqlType string `protobuf:"bytes,2,opt,name=sql_type,json=sqlType,proto3" json:"sql_type,omitempty"`
	// * Whether the column can be NULL
	Nullable *bool `protobuf:"varint,3,opt,name=nullable,proto3,oneof" json:"nullable,omitempty"`
	// *
	// Whether the column is part of the primary key.
	// Multiple primary keys creates composite primary key.
	PrimaryKey *bool `protobuf:"varint,4,opt,name=primary_key,json=primaryKey,proto3,oneof" json:"primary_key,omitempty"`
	// * Whether the column has a UNIQUE constraint
	Unique *bool `protobuf:"varint,5,opt,name=unique,proto3,oneof" json:"unique,omitempty"`
	// * SQL constraint definition for the column in free form
	Constraint    *string `protobuf:"bytes,6,opt,name=constraint,proto3,oneof" json:"constraint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ColumnDescriptor) Reset() {
	*x = ColumnDescriptor{}
	mi := &file_stroppy_descriptor_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnDescriptor) ProtoMessage() {}

func (x *ColumnDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_stroppy_descriptor_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnDescriptor.ProtoReflect.Descriptor instead.
func (*ColumnDescriptor) Descriptor() ([]byte, []int) {
	return file_stroppy_descriptor_proto_rawDescGZIP(), []int{1}
}

func (x *ColumnDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ColumnDescriptor) GetSqlType() string {
	if x != nil {
		return x.SqlType
	}
	return ""
}

func (x *ColumnDescriptor) GetNullable() bool {
	if x != nil && x.Nullable != nil {
		return *x.Nullable
	}
	return false
}

func (x *ColumnDescriptor) GetPrimaryKey() bool {
	if x != nil && x.PrimaryKey != nil {
		return *x.PrimaryKey
	}
	return false
}

func (x *ColumnDescriptor) GetUnique() bool {
	if x != nil && x.Unique != nil {
		return *x.Unique
	}
	return false
}

func (x *ColumnDescriptor) GetConstraint() string {
	if x != nil && x.Constraint != nil {
		return *x.Constraint
	}
	return ""
}

// *
// TableDescriptor defines the structure of a database table.
type TableDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Name of the table
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// * List of indexes defined on this table
	TableIndexes []*IndexDescriptor `protobuf:"bytes,3,rep,name=table_indexes,json=tableIndexes,proto3" json:"table_indexes,omitempty"`
	// * Table-level constraints
	Constraint *string `protobuf:"bytes,5,opt,name=constraint,proto3,oneof" json:"constraint,omitempty"`
	// * Database-specific table properties
	DbSpecific *Value_Struct `protobuf:"bytes,6,opt,name=db_specific,json=dbSpecific,proto3,oneof" json:"db_specific,omitempty"`
	// * Columns defined in this table
	Columns       []*ColumnDescriptor `protobuf:"bytes,100,rep,name=columns,proto3" json:"columns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TableDescriptor) Reset() {
	*x = TableDescriptor{}
	mi := &file_stroppy_descriptor_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableDescriptor) ProtoMessage() {}

func (x *TableDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_stroppy_descriptor_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableDescriptor.ProtoReflect.Descriptor instead.
func (*TableDescriptor) Descriptor() ([]byte, []int) {
	return file_stroppy_descriptor_proto_rawDescGZIP(), []int{2}
}

func (x *TableDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableDescriptor) GetTableIndexes() []*IndexDescriptor {
	if x != nil {
		return x.TableIndexes
	}
	return nil
}

func (x *TableDescriptor) GetConstraint() string {
	if x != nil && x.Constraint != nil {
		return *x.Constraint
	}
	return ""
}

func (x *TableDescriptor) GetDbSpecific() *Value_Struct {
	if x != nil {
		return x.DbSpecific
	}
	return nil
}

func (x *TableDescriptor) GetColumns() []*ColumnDescriptor {
	if x != nil {
		return x.Columns
	}
	return nil
}

// *
// InsertDescription defines data to fill database.
type InsertDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Name of the Insert query
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// * Which table to insert the values
	TableName string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// * Allows to use a percise method of data insertion
	Method *InsertMethod `protobuf:"varint,3,opt,name=method,proto3,enum=stroppy.InsertMethod,oneof" json:"method,omitempty"`
	// *
	// Parameters used in the insert.
	// Names threated as db columns names, regexp is ignored.
	Params []*QueryParamDescriptor `protobuf:"bytes,4,rep,name=params,proto3" json:"params,omitempty"`
	// * Groups of the columns
	Groups        []*QueryParamGroup `protobuf:"bytes,5,rep,name=groups,proto3" json:"groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InsertDescriptor) Reset() {
	*x = InsertDescriptor{}
	mi := &file_stroppy_descriptor_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsertDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertDescriptor) ProtoMessage() {}

func (x *InsertDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_stroppy_descriptor_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertDescriptor.ProtoReflect.Descriptor instead.
func (*InsertDescriptor) Descriptor() ([]byte, []int) {
	return file_stroppy_descriptor_proto_rawDescGZIP(), []int{3}
}

func (x *InsertDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InsertDescriptor) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *InsertDescriptor) GetMethod() InsertMethod {
	if x != nil && x.Method != nil {
		return *x.Method
	}
	return InsertMethod_PLAIN_QUERY
}

func (x *InsertDescriptor) GetParams() []*QueryParamDescriptor {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *InsertDescriptor) GetGroups() []*QueryParamGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

// *
// QueryParamDescriptor defines a parameter that can be used in a query.
type QueryParamDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Name of the parameter
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// * Regular expression pattern to replace with the parameter value default
	// is "${<param_name>}"
	ReplaceRegex *string `protobuf:"bytes,2,opt,name=replace_regex,json=replaceRegex,proto3,oneof" json:"replace_regex,omitempty"`
	// * Rule for generating parameter values
	GenerationRule *Generation_Rule `protobuf:"bytes,3,opt,name=generation_rule,json=generationRule,proto3" json:"generation_rule,omitempty"`
	// * Database-specific parameter properties
	DbSpecific    *Value_Struct `protobuf:"bytes,4,opt,name=db_specific,json=dbSpecific,proto3,oneof" json:"db_specific,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryParamDescriptor) Reset() {
	*x = QueryParamDescriptor{}
	mi := &file_stroppy_descriptor_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryParamDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParamDescriptor) ProtoMessage() {}

func (x *QueryParamDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_stroppy_descriptor_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParamDescriptor.ProtoReflect.Descriptor instead.
func (*QueryParamDescriptor) Descriptor() ([]byte, []int) {
	return file_stroppy_descriptor_proto_rawDescGZIP(), []int{4}
}

func (x *QueryParamDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryParamDescriptor) GetReplaceRegex() string {
	if x != nil && x.ReplaceRegex != nil {
		return *x.ReplaceRegex
	}
	return ""
}

func (x *QueryParamDescriptor) GetGenerationRule() *Generation_Rule {
	if x != nil {
		return x.GenerationRule
	}
	return nil
}

func (x *QueryParamDescriptor) GetDbSpecific() *Value_Struct {
	if x != nil {
		return x.DbSpecific
	}
	return nil
}

// *
// QueryParamGroup defines a group of dependent parameters.
// New values generated in Carthesian product manner.
// It's useful to define composite primary keys.
// Every evaluation step only one param changes.
type QueryParamGroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Group name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// * Grouped dependent parameters
	Params        []*QueryParamDescriptor `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryParamGroup) Reset() {
	*x = QueryParamGroup{}
	mi := &file_stroppy_descriptor_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryParamGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryParamGroup) ProtoMessage() {}

func (x *QueryParamGroup) ProtoReflect() protoreflect.Message {
	mi := &file_stroppy_descriptor_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryParamGroup.ProtoReflect.Descriptor instead.
func (*QueryParamGroup) Descriptor() ([]byte, []int) {
	return file_stroppy_descriptor_proto_rawDescGZIP(), []int{5}
}

func (x *QueryParamGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryParamGroup) GetParams() []*QueryParamDescriptor {
	if x != nil {
		return x.Params
	}
	return nil
}

// *
// QueryDescriptor defines a database query with its parameters and execution
// count.
type QueryDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Name of the query
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// * SQL query text
	Sql string `protobuf:"bytes,2,opt,name=sql,proto3" json:"sql,omitempty"`
	// * Parameters used in the query
	Params []*QueryParamDescriptor `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty"`
	// * Groups of the parameters
	Groups []*QueryParamGroup `protobuf:"bytes,4,rep,name=groups,proto3" json:"groups,omitempty"`
	// * Database-specific query properties
	DbSpecific    *Value_Struct `protobuf:"bytes,5,opt,name=db_specific,json=dbSpecific,proto3,oneof" json:"db_specific,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryDescriptor) Reset() {
	*x = QueryDescriptor{}
	mi := &file_stroppy_descriptor_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDescriptor) ProtoMessage() {}

func (x *QueryDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_stroppy_descriptor_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDescriptor.ProtoReflect.Descriptor instead.
func (*QueryDescriptor) Descriptor() ([]byte, []int) {
	return file_stroppy_descriptor_proto_rawDescGZIP(), []int{6}
}

func (x *QueryDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *QueryDescriptor) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *QueryDescriptor) GetParams() []*QueryParamDescriptor {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *QueryDescriptor) GetGroups() []*QueryParamGroup {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *QueryDescriptor) GetDbSpecific() *Value_Struct {
	if x != nil {
		return x.DbSpecific
	}
	return nil
}

// *
// TransactionDescriptor defines a database transaction with its queries and
// execution count.
type TransactionDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Name of the transaction
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// * Transaction isolation level
	IsolationLevel TxIsolationLevel `protobuf:"varint,2,opt,name=isolation_level,json=isolationLevel,proto3,enum=stroppy.TxIsolationLevel" json:"isolation_level,omitempty"`
	// * List of queries to execute in this transaction
	Queries []*QueryDescriptor `protobuf:"bytes,3,rep,name=queries,proto3" json:"queries,omitempty"`
	// * Database-specific transaction properties
	DbSpecific    *Value_Struct `protobuf:"bytes,5,opt,name=db_specific,json=dbSpecific,proto3,oneof" json:"db_specific,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TransactionDescriptor) Reset() {
	*x = TransactionDescriptor{}
	mi := &file_stroppy_descriptor_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransactionDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionDescriptor) ProtoMessage() {}

func (x *TransactionDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_stroppy_descriptor_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionDescriptor.ProtoReflect.Descriptor instead.
func (*TransactionDescriptor) Descriptor() ([]byte, []int) {
	return file_stroppy_descriptor_proto_rawDescGZIP(), []int{7}
}

func (x *TransactionDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TransactionDescriptor) GetIsolationLevel() TxIsolationLevel {
	if x != nil {
		return x.IsolationLevel
	}
	return TxIsolationLevel_UNSPECIFIED
}

func (x *TransactionDescriptor) GetQueries() []*QueryDescriptor {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *TransactionDescriptor) GetDbSpecific() *Value_Struct {
	if x != nil {
		return x.DbSpecific
	}
	return nil
}

// *
// UnitDescriptor represents a single workload.
// It can be a table creation operation, a query execution operation, or a
// transaction execution operation.
type UnitDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*UnitDescriptor_CreateTable
	//	*UnitDescriptor_Insert
	//	*UnitDescriptor_Query
	//	*UnitDescriptor_Transaction
	Type          isUnitDescriptor_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnitDescriptor) Reset() {
	*x = UnitDescriptor{}
	mi := &file_stroppy_descriptor_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnitDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitDescriptor) ProtoMessage() {}

func (x *UnitDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_stroppy_descriptor_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitDescriptor.ProtoReflect.Descriptor instead.
func (*UnitDescriptor) Descriptor() ([]byte, []int) {
	return file_stroppy_descriptor_proto_rawDescGZIP(), []int{8}
}

func (x *UnitDescriptor) GetType() isUnitDescriptor_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *UnitDescriptor) GetCreateTable() *TableDescriptor {
	if x != nil {
		if x, ok := x.Type.(*UnitDescriptor_CreateTable); ok {
			return x.CreateTable
		}
	}
	return nil
}

func (x *UnitDescriptor) GetInsert() *InsertDescriptor {
	if x != nil {
		if x, ok := x.Type.(*UnitDescriptor_Insert); ok {
			return x.Insert
		}
	}
	return nil
}

func (x *UnitDescriptor) GetQuery() *QueryDescriptor {
	if x != nil {
		if x, ok := x.Type.(*UnitDescriptor_Query); ok {
			return x.Query
		}
	}
	return nil
}

func (x *UnitDescriptor) GetTransaction() *TransactionDescriptor {
	if x != nil {
		if x, ok := x.Type.(*UnitDescriptor_Transaction); ok {
			return x.Transaction
		}
	}
	return nil
}

type isUnitDescriptor_Type interface {
	isUnitDescriptor_Type()
}

type UnitDescriptor_CreateTable struct {
	// * Table creation operation
	CreateTable *TableDescriptor `protobuf:"bytes,1,opt,name=create_table,json=createTable,proto3,oneof"`
}

type UnitDescriptor_Insert struct {
	// * Data insertion operation
	Insert *InsertDescriptor `protobuf:"bytes,5,opt,name=insert,proto3,oneof"`
}

type UnitDescriptor_Query struct {
	// * Query execution operation
	Query *QueryDescriptor `protobuf:"bytes,2,opt,name=query,proto3,oneof"`
}

type UnitDescriptor_Transaction struct {
	// * Transaction execution operation
	Transaction *TransactionDescriptor `protobuf:"bytes,4,opt,name=transaction,proto3,oneof"`
}

func (*UnitDescriptor_CreateTable) isUnitDescriptor_Type() {}

func (*UnitDescriptor_Insert) isUnitDescriptor_Type() {}

func (*UnitDescriptor_Query) isUnitDescriptor_Type() {}

func (*UnitDescriptor_Transaction) isUnitDescriptor_Type() {}

// *
// WorkloadUnitDescriptor represents a single unit of work.
// It can be a table creation operation, a query execution operation, or a
// transaction execution operation.
type WorkloadUnitDescriptor struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	Descriptor_ *UnitDescriptor        `protobuf:"bytes,6,opt,name=descriptor,proto3" json:"descriptor,omitempty"`
	// * Number of times to execute this unit
	Count         uint64 `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadUnitDescriptor) Reset() {
	*x = WorkloadUnitDescriptor{}
	mi := &file_stroppy_descriptor_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadUnitDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadUnitDescriptor) ProtoMessage() {}

func (x *WorkloadUnitDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_stroppy_descriptor_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadUnitDescriptor.ProtoReflect.Descriptor instead.
func (*WorkloadUnitDescriptor) Descriptor() ([]byte, []int) {
	return file_stroppy_descriptor_proto_rawDescGZIP(), []int{9}
}

func (x *WorkloadUnitDescriptor) GetDescriptor_() *UnitDescriptor {
	if x != nil {
		return x.Descriptor_
	}
	return nil
}

func (x *WorkloadUnitDescriptor) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// *
// WorkloadDescriptor represents a logical step in a benchmark.
// It contains a list of operations to perform in this step.
type WorkloadDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Name of the step
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// * Whether to execute all operations in this workload asynchronously
	Async *bool `protobuf:"varint,2,opt,name=async,proto3,oneof" json:"async,omitempty"`
	// * List of operations to perform in this step
	Units         []*WorkloadUnitDescriptor `protobuf:"bytes,3,rep,name=units,proto3" json:"units,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkloadDescriptor) Reset() {
	*x = WorkloadDescriptor{}
	mi := &file_stroppy_descriptor_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkloadDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkloadDescriptor) ProtoMessage() {}

func (x *WorkloadDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_stroppy_descriptor_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkloadDescriptor.ProtoReflect.Descriptor instead.
func (*WorkloadDescriptor) Descriptor() ([]byte, []int) {
	return file_stroppy_descriptor_proto_rawDescGZIP(), []int{10}
}

func (x *WorkloadDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkloadDescriptor) GetAsync() bool {
	if x != nil && x.Async != nil {
		return *x.Async
	}
	return false
}

func (x *WorkloadDescriptor) GetUnits() []*WorkloadUnitDescriptor {
	if x != nil {
		return x.Units
	}
	return nil
}

// *
// BenchmarkDescriptor defines a complete benchmark consisting of multiple
// steps.
type BenchmarkDescriptor struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Name of the benchmark
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// * List of steps to execute in the benchmark
	Workloads     []*WorkloadDescriptor `protobuf:"bytes,100,rep,name=workloads,proto3" json:"workloads,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BenchmarkDescriptor) Reset() {
	*x = BenchmarkDescriptor{}
	mi := &file_stroppy_descriptor_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BenchmarkDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkDescriptor) ProtoMessage() {}

func (x *BenchmarkDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_stroppy_descriptor_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkDescriptor.ProtoReflect.Descriptor instead.
func (*BenchmarkDescriptor) Descriptor() ([]byte, []int) {
	return file_stroppy_descriptor_proto_rawDescGZIP(), []int{11}
}

func (x *BenchmarkDescriptor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BenchmarkDescriptor) GetWorkloads() []*WorkloadDescriptor {
	if x != nil {
		return x.Workloads
	}
	return nil
}

var File_stroppy_descriptor_proto protoreflect.FileDescriptor

const file_stroppy_descriptor_proto_rawDesc = "" +
	"\n" +
	"\x18stroppy/descriptor.proto\x12\astroppy\x1a\x14stroppy/common.proto\x1a\x17validate/validate.proto\"\xd2\x01\n" +
	"\x0fIndexDescriptor\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x12)\n" +
	"\acolumns\x18\x02 \x03(\tB\x0f\xfaB\f\x92\x01\t\x18\x01\"\x05\x8a\x01\x02\x10\x01R\acolumns\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x12\x16\n" +
	"\x06unique\x18\x04 \x01(\bR\x06unique\x12;\n" +
	"\vdb_specific\x18\x05 \x01(\v2\x15.stroppy.Value.StructH\x00R\n" +
	"dbSpecific\x88\x01\x01B\x0e\n" +
	"\f_db_specific\"\x93\x02\n" +
	"\x10ColumnDescriptor\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x12\"\n" +
	"\bsql_type\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\asqlType\x12\x1f\n" +
	"\bnullable\x18\x03 \x01(\bH\x00R\bnullable\x88\x01\x01\x12$\n" +
	"\vprimary_key\x18\x04 \x01(\bH\x01R\n" +
	"primaryKey\x88\x01\x01\x12\x1b\n" +
	"\x06unique\x18\x05 \x01(\bH\x02R\x06unique\x88\x01\x01\x12#\n" +
	"\n" +
	"constraint\x18\x06 \x01(\tH\x03R\n" +
	"constraint\x88\x01\x01B\v\n" +
	"\t_nullableB\x0e\n" +
	"\f_primary_keyB\t\n" +
	"\a_uniqueB\r\n" +
	"\v_constraint\"\xb2\x02\n" +
	"\x0fTableDescriptor\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x12L\n" +
	"\rtable_indexes\x18\x03 \x03(\v2\x18.stroppy.IndexDescriptorB\r\xfaB\n" +
	"\x92\x01\a\"\x05\x8a\x01\x02\x10\x01R\ftableIndexes\x12#\n" +
	"\n" +
	"constraint\x18\x05 \x01(\tH\x00R\n" +
	"constraint\x88\x01\x01\x12;\n" +
	"\vdb_specific\x18\x06 \x01(\v2\x15.stroppy.Value.StructH\x01R\n" +
	"dbSpecific\x88\x01\x01\x123\n" +
	"\acolumns\x18d \x03(\v2\x19.stroppy.ColumnDescriptorR\acolumnsB\r\n" +
	"\v_constraintB\x0e\n" +
	"\f_db_specific\"\x8e\x02\n" +
	"\x10InsertDescriptor\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x12&\n" +
	"\n" +
	"table_name\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\ttableName\x122\n" +
	"\x06method\x18\x03 \x01(\x0e2\x15.stroppy.InsertMethodH\x00R\x06method\x88\x01\x01\x12D\n" +
	"\x06params\x18\x04 \x03(\v2\x1d.stroppy.QueryParamDescriptorB\r\xfaB\n" +
	"\x92\x01\a\"\x05\x8a\x01\x02\x10\x01R\x06params\x120\n" +
	"\x06groups\x18\x05 \x03(\v2\x18.stroppy.QueryParamGroupR\x06groupsB\t\n" +
	"\a_method\"\x89\x02\n" +
	"\x14QueryParamDescriptor\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x12(\n" +
	"\rreplace_regex\x18\x02 \x01(\tH\x00R\freplaceRegex\x88\x01\x01\x12K\n" +
	"\x0fgeneration_rule\x18\x03 \x01(\v2\x18.stroppy.Generation.RuleB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x0egenerationRule\x12;\n" +
	"\vdb_specific\x18\x04 \x01(\v2\x15.stroppy.Value.StructH\x01R\n" +
	"dbSpecific\x88\x01\x01B\x10\n" +
	"\x0e_replace_regexB\x0e\n" +
	"\f_db_specific\"\\\n" +
	"\x0fQueryParamGroup\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x125\n" +
	"\x06params\x18\x02 \x03(\v2\x1d.stroppy.QueryParamDescriptorR\x06params\"\x8e\x02\n" +
	"\x0fQueryDescriptor\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x12\x19\n" +
	"\x03sql\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x03sql\x12D\n" +
	"\x06params\x18\x03 \x03(\v2\x1d.stroppy.QueryParamDescriptorB\r\xfaB\n" +
	"\x92\x01\a\"\x05\x8a\x01\x02\x10\x01R\x06params\x120\n" +
	"\x06groups\x18\x04 \x03(\v2\x18.stroppy.QueryParamGroupR\x06groups\x12;\n" +
	"\vdb_specific\x18\x05 \x01(\v2\x15.stroppy.Value.StructH\x00R\n" +
	"dbSpecific\x88\x01\x01B\x0e\n" +
	"\f_db_specific\"\x8a\x02\n" +
	"\x15TransactionDescriptor\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x12B\n" +
	"\x0fisolation_level\x18\x02 \x01(\x0e2\x19.stroppy.TxIsolationLevelR\x0eisolationLevel\x12C\n" +
	"\aqueries\x18\x03 \x03(\v2\x18.stroppy.QueryDescriptorB\x0f\xfaB\f\x92\x01\t\b\x01\"\x05\x8a\x01\x02\x10\x01R\aqueries\x12;\n" +
	"\vdb_specific\x18\x05 \x01(\v2\x15.stroppy.Value.StructH\x00R\n" +
	"dbSpecific\x88\x01\x01B\x0e\n" +
	"\f_db_specific\"\x87\x02\n" +
	"\x0eUnitDescriptor\x12=\n" +
	"\fcreate_table\x18\x01 \x01(\v2\x18.stroppy.TableDescriptorH\x00R\vcreateTable\x123\n" +
	"\x06insert\x18\x05 \x01(\v2\x19.stroppy.InsertDescriptorH\x00R\x06insert\x120\n" +
	"\x05query\x18\x02 \x01(\v2\x18.stroppy.QueryDescriptorH\x00R\x05query\x12B\n" +
	"\vtransaction\x18\x04 \x01(\v2\x1e.stroppy.TransactionDescriptorH\x00R\vtransactionB\v\n" +
	"\x04type\x12\x03\xf8B\x01\"p\n" +
	"\x16WorkloadUnitDescriptor\x127\n" +
	"\n" +
	"descriptor\x18\x06 \x01(\v2\x17.stroppy.UnitDescriptorR\n" +
	"descriptor\x12\x1d\n" +
	"\x05count\x18\x05 \x01(\x04B\a\xfaB\x042\x02 \x00R\x05count\"\x9e\x01\n" +
	"\x12WorkloadDescriptor\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x12\x19\n" +
	"\x05async\x18\x02 \x01(\bH\x00R\x05async\x88\x01\x01\x12F\n" +
	"\x05units\x18\x03 \x03(\v2\x1f.stroppy.WorkloadUnitDescriptorB\x0f\xfaB\f\x92\x01\t\b\x01\"\x05\x8a\x01\x02\x10\x01R\x05unitsB\b\n" +
	"\x06_async\"~\n" +
	"\x13BenchmarkDescriptor\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x12J\n" +
	"\tworkloads\x18d \x03(\v2\x1b.stroppy.WorkloadDescriptorB\x0f\xfaB\f\x92\x01\t\b\x01\"\x05\x8a\x01\x02\x10\x01R\tworkloads*.\n" +
	"\fInsertMethod\x12\x0f\n" +
	"\vPLAIN_QUERY\x10\x00\x12\r\n" +
	"\tCOPY_FROM\x10\x01*t\n" +
	"\x10TxIsolationLevel\x12\x0f\n" +
	"\vUNSPECIFIED\x10\x00\x12\x14\n" +
	"\x10READ_UNCOMMITTED\x10\x01\x12\x12\n" +
	"\x0eREAD_COMMITTED\x10\x02\x12\x13\n" +
	"\x0fREPEATABLE_READ\x10\x03\x12\x10\n" +
	"\fSERIALIZABLE\x10\x04B0Z.github.com/stroppy-io/stroppy/pkg/common/protob\x06proto3"

var (
	file_stroppy_descriptor_proto_rawDescOnce sync.Once
	file_stroppy_descriptor_proto_rawDescData []byte
)

func file_stroppy_descriptor_proto_rawDescGZIP() []byte {
	file_stroppy_descriptor_proto_rawDescOnce.Do(func() {
		file_stroppy_descriptor_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_stroppy_descriptor_proto_rawDesc), len(file_stroppy_descriptor_proto_rawDesc)))
	})
	return file_stroppy_descriptor_proto_rawDescData
}

var file_stroppy_descriptor_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_stroppy_descriptor_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_stroppy_descriptor_proto_goTypes = []any{
	(InsertMethod)(0),              // 0: stroppy.InsertMethod
	(TxIsolationLevel)(0),          // 1: stroppy.TxIsolationLevel
	(*IndexDescriptor)(nil),        // 2: stroppy.IndexDescriptor
	(*ColumnDescriptor)(nil),       // 3: stroppy.ColumnDescriptor
	(*TableDescriptor)(nil),        // 4: stroppy.TableDescriptor
	(*InsertDescriptor)(nil),       // 5: stroppy.InsertDescriptor
	(*QueryParamDescriptor)(nil),   // 6: stroppy.QueryParamDescriptor
	(*QueryParamGroup)(nil),        // 7: stroppy.QueryParamGroup
	(*QueryDescriptor)(nil),        // 8: stroppy.QueryDescriptor
	(*TransactionDescriptor)(nil),  // 9: stroppy.TransactionDescriptor
	(*UnitDescriptor)(nil),         // 10: stroppy.UnitDescriptor
	(*WorkloadUnitDescriptor)(nil), // 11: stroppy.WorkloadUnitDescriptor
	(*WorkloadDescriptor)(nil),     // 12: stroppy.WorkloadDescriptor
	(*BenchmarkDescriptor)(nil),    // 13: stroppy.BenchmarkDescriptor
	(*Value_Struct)(nil),           // 14: stroppy.Value.Struct
	(*Generation_Rule)(nil),        // 15: stroppy.Generation.Rule
}
var file_stroppy_descriptor_proto_depIdxs = []int32{
	14, // 0: stroppy.IndexDescriptor.db_specific:type_name -> stroppy.Value.Struct
	2,  // 1: stroppy.TableDescriptor.table_indexes:type_name -> stroppy.IndexDescriptor
	14, // 2: stroppy.TableDescriptor.db_specific:type_name -> stroppy.Value.Struct
	3,  // 3: stroppy.TableDescriptor.columns:type_name -> stroppy.ColumnDescriptor
	0,  // 4: stroppy.InsertDescriptor.method:type_name -> stroppy.InsertMethod
	6,  // 5: stroppy.InsertDescriptor.params:type_name -> stroppy.QueryParamDescriptor
	7,  // 6: stroppy.InsertDescriptor.groups:type_name -> stroppy.QueryParamGroup
	15, // 7: stroppy.QueryParamDescriptor.generation_rule:type_name -> stroppy.Generation.Rule
	14, // 8: stroppy.QueryParamDescriptor.db_specific:type_name -> stroppy.Value.Struct
	6,  // 9: stroppy.QueryParamGroup.params:type_name -> stroppy.QueryParamDescriptor
	6,  // 10: stroppy.QueryDescriptor.params:type_name -> stroppy.QueryParamDescriptor
	7,  // 11: stroppy.QueryDescriptor.groups:type_name -> stroppy.QueryParamGroup
	14, // 12: stroppy.QueryDescriptor.db_specific:type_name -> stroppy.Value.Struct
	1,  // 13: stroppy.TransactionDescriptor.isolation_level:type_name -> stroppy.TxIsolationLevel
	8,  // 14: stroppy.TransactionDescriptor.queries:type_name -> stroppy.QueryDescriptor
	14, // 15: stroppy.TransactionDescriptor.db_specific:type_name -> stroppy.Value.Struct
	4,  // 16: stroppy.UnitDescriptor.create_table:type_name -> stroppy.TableDescriptor
	5,  // 17: stroppy.UnitDescriptor.insert:type_name -> stroppy.InsertDescriptor
	8,  // 18: stroppy.UnitDescriptor.query:type_name -> stroppy.QueryDescriptor
	9,  // 19: stroppy.UnitDescriptor.transaction:type_name -> stroppy.TransactionDescriptor
	10, // 20: stroppy.WorkloadUnitDescriptor.descriptor:type_name -> stroppy.UnitDescriptor
	11, // 21: stroppy.WorkloadDescriptor.units:type_name -> stroppy.WorkloadUnitDescriptor
	12, // 22: stroppy.BenchmarkDescriptor.workloads:type_name -> stroppy.WorkloadDescriptor
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_stroppy_descriptor_proto_init() }
func file_stroppy_descriptor_proto_init() {
	if File_stroppy_descriptor_proto != nil {
		return
	}
	file_stroppy_common_proto_init()
	file_stroppy_descriptor_proto_msgTypes[0].OneofWrappers = []any{}
	file_stroppy_descriptor_proto_msgTypes[1].OneofWrappers = []any{}
	file_stroppy_descriptor_proto_msgTypes[2].OneofWrappers = []any{}
	file_stroppy_descriptor_proto_msgTypes[3].OneofWrappers = []any{}
	file_stroppy_descriptor_proto_msgTypes[4].OneofWrappers = []any{}
	file_stroppy_descriptor_proto_msgTypes[6].OneofWrappers = []any{}
	file_stroppy_descriptor_proto_msgTypes[7].OneofWrappers = []any{}
	file_stroppy_descriptor_proto_msgTypes[8].OneofWrappers = []any{
		(*UnitDescriptor_CreateTable)(nil),
		(*UnitDescriptor_Insert)(nil),
		(*UnitDescriptor_Query)(nil),
		(*UnitDescriptor_Transaction)(nil),
	}
	file_stroppy_descriptor_proto_msgTypes[10].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_stroppy_descriptor_proto_rawDesc), len(file_stroppy_descriptor_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stroppy_descriptor_proto_goTypes,
		DependencyIndexes: file_stroppy_descriptor_proto_depIdxs,
		EnumInfos:         file_stroppy_descriptor_proto_enumTypes,
		MessageInfos:      file_stroppy_descriptor_proto_msgTypes,
	}.Build()
	File_stroppy_descriptor_proto = out.File
	file_stroppy_descriptor_proto_goTypes = nil
	file_stroppy_descriptor_proto_depIdxs = nil
}
