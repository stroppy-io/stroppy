// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: config.proto

package proto

import (
	_ "github.com/stroppy-io/stroppy/pkg/common/proto/gen/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DriverConfig_DriverType int32

const (
	DriverConfig_DRIVER_TYPE_UNSPECIFIED DriverConfig_DriverType = 0
	DriverConfig_DRIVER_TYPE_POSTGRES    DriverConfig_DriverType = 1
)

// Enum value maps for DriverConfig_DriverType.
var (
	DriverConfig_DriverType_name = map[int32]string{
		0: "DRIVER_TYPE_UNSPECIFIED",
		1: "DRIVER_TYPE_POSTGRES",
	}
	DriverConfig_DriverType_value = map[string]int32{
		"DRIVER_TYPE_UNSPECIFIED": 0,
		"DRIVER_TYPE_POSTGRES":    1,
	}
)

func (x DriverConfig_DriverType) Enum() *DriverConfig_DriverType {
	p := new(DriverConfig_DriverType)
	*p = x
	return p
}

func (x DriverConfig_DriverType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DriverConfig_DriverType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[0].Descriptor()
}

func (DriverConfig_DriverType) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[0]
}

func (x DriverConfig_DriverType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DriverConfig_DriverType.Descriptor instead.
func (DriverConfig_DriverType) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0, 0}
}

type LoggerConfig_LogLevel int32

const (
	LoggerConfig_LOG_LEVEL_DEBUG LoggerConfig_LogLevel = 0
	LoggerConfig_LOG_LEVEL_INFO  LoggerConfig_LogLevel = 1
	LoggerConfig_LOG_LEVEL_WARN  LoggerConfig_LogLevel = 2
	LoggerConfig_LOG_LEVEL_ERROR LoggerConfig_LogLevel = 3
	LoggerConfig_LOG_LEVEL_FATAL LoggerConfig_LogLevel = 4
)

// Enum value maps for LoggerConfig_LogLevel.
var (
	LoggerConfig_LogLevel_name = map[int32]string{
		0: "LOG_LEVEL_DEBUG",
		1: "LOG_LEVEL_INFO",
		2: "LOG_LEVEL_WARN",
		3: "LOG_LEVEL_ERROR",
		4: "LOG_LEVEL_FATAL",
	}
	LoggerConfig_LogLevel_value = map[string]int32{
		"LOG_LEVEL_DEBUG": 0,
		"LOG_LEVEL_INFO":  1,
		"LOG_LEVEL_WARN":  2,
		"LOG_LEVEL_ERROR": 3,
		"LOG_LEVEL_FATAL": 4,
	}
)

func (x LoggerConfig_LogLevel) Enum() *LoggerConfig_LogLevel {
	p := new(LoggerConfig_LogLevel)
	*p = x
	return p
}

func (x LoggerConfig_LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoggerConfig_LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[1].Descriptor()
}

func (LoggerConfig_LogLevel) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[1]
}

func (x LoggerConfig_LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoggerConfig_LogLevel.Descriptor instead.
func (LoggerConfig_LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1, 0}
}

type LoggerConfig_LogMode int32

const (
	LoggerConfig_LOG_MODE_DEVELOPMENT LoggerConfig_LogMode = 0
	LoggerConfig_LOG_MODE_PRODUCTION  LoggerConfig_LogMode = 1
)

// Enum value maps for LoggerConfig_LogMode.
var (
	LoggerConfig_LogMode_name = map[int32]string{
		0: "LOG_MODE_DEVELOPMENT",
		1: "LOG_MODE_PRODUCTION",
	}
	LoggerConfig_LogMode_value = map[string]int32{
		"LOG_MODE_DEVELOPMENT": 0,
		"LOG_MODE_PRODUCTION":  1,
	}
)

func (x LoggerConfig_LogMode) Enum() *LoggerConfig_LogMode {
	p := new(LoggerConfig_LogMode)
	*p = x
	return p
}

func (x LoggerConfig_LogMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoggerConfig_LogMode) Descriptor() protoreflect.EnumDescriptor {
	return file_config_proto_enumTypes[2].Descriptor()
}

func (LoggerConfig_LogMode) Type() protoreflect.EnumType {
	return &file_config_proto_enumTypes[2]
}

func (x LoggerConfig_LogMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoggerConfig_LogMode.Descriptor instead.
func (LoggerConfig_LogMode) EnumDescriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1, 1}
}

// *
// DriverConfig contains configuration for connecting to a database driver.
// It includes the driver plugin path, connection URL, and database-specific settings.
type DriverConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Database connection URL
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// * Database-specific configuration options
	DbSpecific *Value_Struct `protobuf:"bytes,2,opt,name=db_specific,json=dbSpecific,proto3,oneof" json:"db_specific,omitempty"`
	// * Name/Type of chosen driver
	DriverType    DriverConfig_DriverType `protobuf:"varint,3,opt,name=driver_type,json=driverType,proto3,enum=stroppy.DriverConfig_DriverType" json:"driver_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DriverConfig) Reset() {
	*x = DriverConfig{}
	mi := &file_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DriverConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverConfig) ProtoMessage() {}

func (x *DriverConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverConfig.ProtoReflect.Descriptor instead.
func (*DriverConfig) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{0}
}

func (x *DriverConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *DriverConfig) GetDbSpecific() *Value_Struct {
	if x != nil {
		return x.DbSpecific
	}
	return nil
}

func (x *DriverConfig) GetDriverType() DriverConfig_DriverType {
	if x != nil {
		return x.DriverType
	}
	return DriverConfig_DRIVER_TYPE_UNSPECIFIED
}

// *
// LoggerConfig contains configuration for the logging system.
// It controls log levels and output formatting.
type LoggerConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Minimum log level to output
	LogLevel LoggerConfig_LogLevel `protobuf:"varint,1,opt,name=log_level,json=logLevel,proto3,enum=stroppy.LoggerConfig_LogLevel" json:"log_level,omitempty"`
	// * Logging mode (development or production)
	LogMode       LoggerConfig_LogMode `protobuf:"varint,2,opt,name=log_mode,json=logMode,proto3,enum=stroppy.LoggerConfig_LogMode" json:"log_mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoggerConfig) Reset() {
	*x = LoggerConfig{}
	mi := &file_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoggerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggerConfig) ProtoMessage() {}

func (x *LoggerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggerConfig.ProtoReflect.Descriptor instead.
func (*LoggerConfig) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{1}
}

func (x *LoggerConfig) GetLogLevel() LoggerConfig_LogLevel {
	if x != nil {
		return x.LogLevel
	}
	return LoggerConfig_LOG_LEVEL_DEBUG
}

func (x *LoggerConfig) GetLogMode() LoggerConfig_LogMode {
	if x != nil {
		return x.LogMode
	}
	return LoggerConfig_LOG_MODE_DEVELOPMENT
}

// *
// OtlpExporterConfig contains named configuration for an OTLP exporter.
type ExporterConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Name of the OTLP exporter
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// * Configuration for the OTLP exporter
	OtlpExport    *OtlpExport `protobuf:"bytes,2,opt,name=otlp_export,json=otlpExport,proto3" json:"otlp_export,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExporterConfig) Reset() {
	*x = ExporterConfig{}
	mi := &file_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExporterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExporterConfig) ProtoMessage() {}

func (x *ExporterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExporterConfig.ProtoReflect.Descriptor instead.
func (*ExporterConfig) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{2}
}

func (x *ExporterConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExporterConfig) GetOtlpExport() *OtlpExport {
	if x != nil {
		return x.OtlpExport
	}
	return nil
}

// *
// ExecutorConfig contains configuration for an executor.
type ExecutorConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Name of the executor
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// * Configuration for the executor
	K6            *K6Options `protobuf:"bytes,2,opt,name=k6,proto3" json:"k6,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutorConfig) Reset() {
	*x = ExecutorConfig{}
	mi := &file_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutorConfig) ProtoMessage() {}

func (x *ExecutorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutorConfig.ProtoReflect.Descriptor instead.
func (*ExecutorConfig) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{3}
}

func (x *ExecutorConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecutorConfig) GetK6() *K6Options {
	if x != nil {
		return x.K6
	}
	return nil
}

// *
// StepExecutorMappingConfig contains configuration for mapping steps to executors.
type StepExecutionMapping struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Name of the step
	StepName string `protobuf:"bytes,1,opt,name=step_name,json=stepName,proto3" json:"step_name,omitempty"`
	// * Name of the executor
	ExecutorName string `protobuf:"bytes,2,opt,name=executor_name,json=executorName,proto3" json:"executor_name,omitempty"`
	// * Name of the exporter
	ExporterName *string `protobuf:"bytes,3,opt,name=exporter_name,json=exporterName,proto3,oneof" json:"exporter_name,omitempty"`
	// * Whether to execute all operations in this step asynchronously
	Async         bool `protobuf:"varint,4,opt,name=async,proto3" json:"async,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StepExecutionMapping) Reset() {
	*x = StepExecutionMapping{}
	mi := &file_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StepExecutionMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepExecutionMapping) ProtoMessage() {}

func (x *StepExecutionMapping) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepExecutionMapping.ProtoReflect.Descriptor instead.
func (*StepExecutionMapping) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{4}
}

func (x *StepExecutionMapping) GetStepName() string {
	if x != nil {
		return x.StepName
	}
	return ""
}

func (x *StepExecutionMapping) GetExecutorName() string {
	if x != nil {
		return x.ExecutorName
	}
	return ""
}

func (x *StepExecutionMapping) GetExporterName() string {
	if x != nil && x.ExporterName != nil {
		return *x.ExporterName
	}
	return ""
}

func (x *StepExecutionMapping) GetAsync() bool {
	if x != nil {
		return x.Async
	}
	return false
}

// *
// SideCar contains configuration for plugins.
type SideCarConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Url to connect the plugin instance
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// * Additional plugin settings
	Settings      *Value_Struct `protobuf:"bytes,3,opt,name=settings,proto3,oneof" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SideCarConfig) Reset() {
	*x = SideCarConfig{}
	mi := &file_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SideCarConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SideCarConfig) ProtoMessage() {}

func (x *SideCarConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SideCarConfig.ProtoReflect.Descriptor instead.
func (*SideCarConfig) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{5}
}

func (x *SideCarConfig) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *SideCarConfig) GetSettings() *Value_Struct {
	if x != nil {
		return x.Settings
	}
	return nil
}

// *
// CloudConfig contains configuration for stroppy cloud backend.
type CloudConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloudConfig) Reset() {
	*x = CloudConfig{}
	mi := &file_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloudConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudConfig) ProtoMessage() {}

func (x *CloudConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudConfig.ProtoReflect.Descriptor instead.
func (*CloudConfig) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{6}
}

type GlobalConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Version of the configuration format e.g. proto files version.
	// This is used for backward compatibility of configs
	// and will be set automatically from binary run if not present.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// *
	// Run identifier for reproducible test runs or debugging
	// If set to "generate()" stroppy eval ulid for run_id
	RunId string `protobuf:"bytes,2,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	// * Random seed for reproducible test runs
	Seed uint64 `protobuf:"varint,3,opt,name=seed,proto3" json:"seed,omitempty"`
	// * Arbitrary metadata, may be passed to result labels and json output
	Metadata map[string]string `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// * Database driver configuration
	Driver *DriverConfig `protobuf:"bytes,5,opt,name=driver,proto3" json:"driver,omitempty"`
	// * Logging configuration
	Logger        *LoggerConfig `protobuf:"bytes,6,opt,name=logger,proto3" json:"logger,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GlobalConfig) Reset() {
	*x = GlobalConfig{}
	mi := &file_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GlobalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalConfig) ProtoMessage() {}

func (x *GlobalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalConfig.ProtoReflect.Descriptor instead.
func (*GlobalConfig) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{7}
}

func (x *GlobalConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GlobalConfig) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *GlobalConfig) GetSeed() uint64 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *GlobalConfig) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *GlobalConfig) GetDriver() *DriverConfig {
	if x != nil {
		return x.Driver
	}
	return nil
}

func (x *GlobalConfig) GetLogger() *LoggerConfig {
	if x != nil {
		return x.Logger
	}
	return nil
}

// *
// ConfigFile contains the complete configuration for a benchmark run in file.
type ConfigFile struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Global configuration
	Global *GlobalConfig `protobuf:"bytes,1,opt,name=global,proto3" json:"global,omitempty"`
	// * Exporters configuration
	Exporters []*ExporterConfig `protobuf:"bytes,2,rep,name=exporters,proto3" json:"exporters,omitempty"`
	// * Executors configuration
	Executors []*ExecutorConfig `protobuf:"bytes,3,rep,name=executors,proto3" json:"executors,omitempty"`
	// * Step to executor mapping configuration
	StepExecutorMappings []*StepExecutionMapping `protobuf:"bytes,4,rep,name=step_executor_mappings,json=stepExecutorMappings,proto3" json:"step_executor_mappings,omitempty"`
	// * Plugins configuration
	SideCars []*SideCarConfig `protobuf:"bytes,5,rep,name=side_cars,json=sideCars,proto3" json:"side_cars,omitempty"`
	// * BenchmarkDescriptor defines a complete benchmark consisting of multiple steps.
	Benchmark     *BenchmarkDescriptor `protobuf:"bytes,6,opt,name=benchmark,proto3" json:"benchmark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigFile) Reset() {
	*x = ConfigFile{}
	mi := &file_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigFile) ProtoMessage() {}

func (x *ConfigFile) ProtoReflect() protoreflect.Message {
	mi := &file_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigFile.ProtoReflect.Descriptor instead.
func (*ConfigFile) Descriptor() ([]byte, []int) {
	return file_config_proto_rawDescGZIP(), []int{8}
}

func (x *ConfigFile) GetGlobal() *GlobalConfig {
	if x != nil {
		return x.Global
	}
	return nil
}

func (x *ConfigFile) GetExporters() []*ExporterConfig {
	if x != nil {
		return x.Exporters
	}
	return nil
}

func (x *ConfigFile) GetExecutors() []*ExecutorConfig {
	if x != nil {
		return x.Executors
	}
	return nil
}

func (x *ConfigFile) GetStepExecutorMappings() []*StepExecutionMapping {
	if x != nil {
		return x.StepExecutorMappings
	}
	return nil
}

func (x *ConfigFile) GetSideCars() []*SideCarConfig {
	if x != nil {
		return x.SideCars
	}
	return nil
}

func (x *ConfigFile) GetBenchmark() *BenchmarkDescriptor {
	if x != nil {
		return x.Benchmark
	}
	return nil
}

var File_config_proto protoreflect.FileDescriptor

const file_config_proto_rawDesc = "" +
	"\n" +
	"\fconfig.proto\x12\astroppy\x1a\fcommon.proto\x1a\x10descriptor.proto\x1a\x1bgen/validate/validate.proto\x1a\bk6.proto\"\x89\x02\n" +
	"\fDriverConfig\x12\x1a\n" +
	"\x03url\x18\x01 \x01(\tB\b\xfaB\x05r\x03\x90\x01\x01R\x03url\x12;\n" +
	"\vdb_specific\x18\x02 \x01(\v2\x15.stroppy.Value.StructH\x00R\n" +
	"dbSpecific\x88\x01\x01\x12K\n" +
	"\vdriver_type\x18\x03 \x01(\x0e2 .stroppy.DriverConfig.DriverTypeB\b\xfaB\x05\x82\x01\x02\x10\x01R\n" +
	"driverType\"C\n" +
	"\n" +
	"DriverType\x12\x1b\n" +
	"\x17DRIVER_TYPE_UNSPECIFIED\x10\x00\x12\x18\n" +
	"\x14DRIVER_TYPE_POSTGRES\x10\x01B\x0e\n" +
	"\f_db_specific\"\xca\x02\n" +
	"\fLoggerConfig\x12E\n" +
	"\tlog_level\x18\x01 \x01(\x0e2\x1e.stroppy.LoggerConfig.LogLevelB\b\xfaB\x05\x82\x01\x02\x10\x01R\blogLevel\x12B\n" +
	"\blog_mode\x18\x02 \x01(\x0e2\x1d.stroppy.LoggerConfig.LogModeB\b\xfaB\x05\x82\x01\x02\x10\x01R\alogMode\"q\n" +
	"\bLogLevel\x12\x13\n" +
	"\x0fLOG_LEVEL_DEBUG\x10\x00\x12\x12\n" +
	"\x0eLOG_LEVEL_INFO\x10\x01\x12\x12\n" +
	"\x0eLOG_LEVEL_WARN\x10\x02\x12\x13\n" +
	"\x0fLOG_LEVEL_ERROR\x10\x03\x12\x13\n" +
	"\x0fLOG_LEVEL_FATAL\x10\x04\"<\n" +
	"\aLogMode\x12\x18\n" +
	"\x14LOG_MODE_DEVELOPMENT\x10\x00\x12\x17\n" +
	"\x13LOG_MODE_PRODUCTION\x10\x01\"m\n" +
	"\x0eExporterConfig\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x12>\n" +
	"\votlp_export\x18\x02 \x01(\v2\x13.stroppy.OtlpExportB\b\xfaB\x05\x8a\x01\x02\x10\x01R\n" +
	"otlpExport\"Q\n" +
	"\x0eExecutorConfig\x12\x1b\n" +
	"\x04name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\x04name\x12\"\n" +
	"\x02k6\x18\x02 \x01(\v2\x12.stroppy.K6OptionsR\x02k6\"\xbc\x01\n" +
	"\x14StepExecutionMapping\x12$\n" +
	"\tstep_name\x18\x01 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\bstepName\x12,\n" +
	"\rexecutor_name\x18\x02 \x01(\tB\a\xfaB\x04r\x02\x10\x01R\fexecutorName\x12(\n" +
	"\rexporter_name\x18\x03 \x01(\tH\x00R\fexporterName\x88\x01\x01\x12\x14\n" +
	"\x05async\x18\x04 \x01(\bR\x05asyncB\x10\n" +
	"\x0e_exporter_name\"p\n" +
	"\rSideCarConfig\x12\x1a\n" +
	"\x03url\x18\x02 \x01(\tB\b\xfaB\x05r\x03\x90\x01\x01R\x03url\x126\n" +
	"\bsettings\x18\x03 \x01(\v2\x15.stroppy.Value.StructH\x00R\bsettings\x88\x01\x01B\v\n" +
	"\t_settings\"\r\n" +
	"\vCloudConfig\"\xc2\x02\n" +
	"\fGlobalConfig\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\x12\x15\n" +
	"\x06run_id\x18\x02 \x01(\tR\x05runId\x12\x1b\n" +
	"\x04seed\x18\x03 \x01(\x04B\a\xfaB\x042\x02(\x00R\x04seed\x12?\n" +
	"\bmetadata\x18\x04 \x03(\v2#.stroppy.GlobalConfig.MetadataEntryR\bmetadata\x127\n" +
	"\x06driver\x18\x05 \x01(\v2\x15.stroppy.DriverConfigB\b\xfaB\x05\x8a\x01\x02\x10\x01R\x06driver\x12-\n" +
	"\x06logger\x18\x06 \x01(\v2\x15.stroppy.LoggerConfigR\x06logger\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xf9\x02\n" +
	"\n" +
	"ConfigFile\x12-\n" +
	"\x06global\x18\x01 \x01(\v2\x15.stroppy.GlobalConfigR\x06global\x125\n" +
	"\texporters\x18\x02 \x03(\v2\x17.stroppy.ExporterConfigR\texporters\x125\n" +
	"\texecutors\x18\x03 \x03(\v2\x17.stroppy.ExecutorConfigR\texecutors\x12S\n" +
	"\x16step_executor_mappings\x18\x04 \x03(\v2\x1d.stroppy.StepExecutionMappingR\x14stepExecutorMappings\x123\n" +
	"\tside_cars\x18\x05 \x03(\v2\x16.stroppy.SideCarConfigR\bsideCars\x12D\n" +
	"\tbenchmark\x18\x06 \x01(\v2\x1c.stroppy.BenchmarkDescriptorB\b\xfaB\x05\x8a\x01\x02\x10\x01R\tbenchmarkB.Z,github.com/stroppy-io/stroppy/pkg/core/protob\x06proto3"

var (
	file_config_proto_rawDescOnce sync.Once
	file_config_proto_rawDescData []byte
)

func file_config_proto_rawDescGZIP() []byte {
	file_config_proto_rawDescOnce.Do(func() {
		file_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_config_proto_rawDesc), len(file_config_proto_rawDesc)))
	})
	return file_config_proto_rawDescData
}

var file_config_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_config_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_config_proto_goTypes = []any{
	(DriverConfig_DriverType)(0), // 0: stroppy.DriverConfig.DriverType
	(LoggerConfig_LogLevel)(0),   // 1: stroppy.LoggerConfig.LogLevel
	(LoggerConfig_LogMode)(0),    // 2: stroppy.LoggerConfig.LogMode
	(*DriverConfig)(nil),         // 3: stroppy.DriverConfig
	(*LoggerConfig)(nil),         // 4: stroppy.LoggerConfig
	(*ExporterConfig)(nil),       // 5: stroppy.ExporterConfig
	(*ExecutorConfig)(nil),       // 6: stroppy.ExecutorConfig
	(*StepExecutionMapping)(nil), // 7: stroppy.StepExecutionMapping
	(*SideCarConfig)(nil),        // 8: stroppy.SideCarConfig
	(*CloudConfig)(nil),          // 9: stroppy.CloudConfig
	(*GlobalConfig)(nil),         // 10: stroppy.GlobalConfig
	(*ConfigFile)(nil),           // 11: stroppy.ConfigFile
	nil,                          // 12: stroppy.GlobalConfig.MetadataEntry
	(*Value_Struct)(nil),         // 13: stroppy.Value.Struct
	(*OtlpExport)(nil),           // 14: stroppy.OtlpExport
	(*K6Options)(nil),            // 15: stroppy.K6Options
	(*BenchmarkDescriptor)(nil),  // 16: stroppy.BenchmarkDescriptor
}
var file_config_proto_depIdxs = []int32{
	13, // 0: stroppy.DriverConfig.db_specific:type_name -> stroppy.Value.Struct
	0,  // 1: stroppy.DriverConfig.driver_type:type_name -> stroppy.DriverConfig.DriverType
	1,  // 2: stroppy.LoggerConfig.log_level:type_name -> stroppy.LoggerConfig.LogLevel
	2,  // 3: stroppy.LoggerConfig.log_mode:type_name -> stroppy.LoggerConfig.LogMode
	14, // 4: stroppy.ExporterConfig.otlp_export:type_name -> stroppy.OtlpExport
	15, // 5: stroppy.ExecutorConfig.k6:type_name -> stroppy.K6Options
	13, // 6: stroppy.SideCarConfig.settings:type_name -> stroppy.Value.Struct
	12, // 7: stroppy.GlobalConfig.metadata:type_name -> stroppy.GlobalConfig.MetadataEntry
	3,  // 8: stroppy.GlobalConfig.driver:type_name -> stroppy.DriverConfig
	4,  // 9: stroppy.GlobalConfig.logger:type_name -> stroppy.LoggerConfig
	10, // 10: stroppy.ConfigFile.global:type_name -> stroppy.GlobalConfig
	5,  // 11: stroppy.ConfigFile.exporters:type_name -> stroppy.ExporterConfig
	6,  // 12: stroppy.ConfigFile.executors:type_name -> stroppy.ExecutorConfig
	7,  // 13: stroppy.ConfigFile.step_executor_mappings:type_name -> stroppy.StepExecutionMapping
	8,  // 14: stroppy.ConfigFile.side_cars:type_name -> stroppy.SideCarConfig
	16, // 15: stroppy.ConfigFile.benchmark:type_name -> stroppy.BenchmarkDescriptor
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_config_proto_init() }
func file_config_proto_init() {
	if File_config_proto != nil {
		return
	}
	file_common_proto_init()
	file_descriptor_proto_init()
	file_k6_proto_init()
	file_config_proto_msgTypes[0].OneofWrappers = []any{}
	file_config_proto_msgTypes[4].OneofWrappers = []any{}
	file_config_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_config_proto_rawDesc), len(file_config_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_proto_goTypes,
		DependencyIndexes: file_config_proto_depIdxs,
		EnumInfos:         file_config_proto_enumTypes,
		MessageInfos:      file_config_proto_msgTypes,
	}.Build()
	File_config_proto = out.File
	file_config_proto_goTypes = nil
	file_config_proto_depIdxs = nil
}
