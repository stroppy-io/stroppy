// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: k6.proto

package proto

import (
	_ "github.com/stroppy-io/stroppy/pkg/common/proto/gen/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// *
// K6Executor contains configuration for k6 load testing tool integration.
// It contains paths to the k6 binary and the k6 test script, as well as
// additional arguments to pass to the k6 binary.
type K6Options struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Additional arguments to pass to the k6 binary
	K6Args []string `protobuf:"bytes,2,rep,name=k6_args,json=k6Args,proto3" json:"k6_args,omitempty"`
	// * Timeout for k6 setup phase
	SetupTimeout *durationpb.Duration `protobuf:"bytes,10,opt,name=setup_timeout,json=setupTimeout,proto3,oneof" json:"setup_timeout,omitempty"`
	// * Scenario configuration
	Scenario      *K6Scenario `protobuf:"bytes,200,opt,name=scenario,proto3" json:"scenario,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *K6Options) Reset() {
	*x = K6Options{}
	mi := &file_k6_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *K6Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K6Options) ProtoMessage() {}

func (x *K6Options) ProtoReflect() protoreflect.Message {
	mi := &file_k6_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K6Options.ProtoReflect.Descriptor instead.
func (*K6Options) Descriptor() ([]byte, []int) {
	return file_k6_proto_rawDescGZIP(), []int{0}
}

func (x *K6Options) GetK6Args() []string {
	if x != nil {
		return x.K6Args
	}
	return nil
}

func (x *K6Options) GetSetupTimeout() *durationpb.Duration {
	if x != nil {
		return x.SetupTimeout
	}
	return nil
}

func (x *K6Options) GetScenario() *K6Scenario {
	if x != nil {
		return x.Scenario
	}
	return nil
}

// *
// Scenario defines the overall test scenario configuration.
// It contains user tags, maximum duration, and executor configuration.
// Documentation: https://grafana.com/docs/k6/latest/using-k6/scenarios/
type K6Scenario struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Maximum duration for scenario execution.
	// Used as a time limiter if main parameters (iterations, stages, duration)
	// do not complete in time.
	MaxDuration *durationpb.Duration `protobuf:"bytes,3,opt,name=max_duration,json=maxDuration,proto3" json:"max_duration,omitempty"`
	// * Executor configuration (exactly one of these must be specified)
	// Types that are valid to be assigned to Executor:
	//
	//	*K6Scenario_SharedIterations
	//	*K6Scenario_PerVuIterations
	//	*K6Scenario_ConstantVus
	//	*K6Scenario_RampingVus
	//	*K6Scenario_ConstantArrivalRate
	//	*K6Scenario_RampingArrivalRate
	Executor      isK6Scenario_Executor `protobuf_oneof:"executor"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *K6Scenario) Reset() {
	*x = K6Scenario{}
	mi := &file_k6_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *K6Scenario) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*K6Scenario) ProtoMessage() {}

func (x *K6Scenario) ProtoReflect() protoreflect.Message {
	mi := &file_k6_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use K6Scenario.ProtoReflect.Descriptor instead.
func (*K6Scenario) Descriptor() ([]byte, []int) {
	return file_k6_proto_rawDescGZIP(), []int{1}
}

func (x *K6Scenario) GetMaxDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxDuration
	}
	return nil
}

func (x *K6Scenario) GetExecutor() isK6Scenario_Executor {
	if x != nil {
		return x.Executor
	}
	return nil
}

func (x *K6Scenario) GetSharedIterations() *SharedIterations {
	if x != nil {
		if x, ok := x.Executor.(*K6Scenario_SharedIterations); ok {
			return x.SharedIterations
		}
	}
	return nil
}

func (x *K6Scenario) GetPerVuIterations() *PerVuIterations {
	if x != nil {
		if x, ok := x.Executor.(*K6Scenario_PerVuIterations); ok {
			return x.PerVuIterations
		}
	}
	return nil
}

func (x *K6Scenario) GetConstantVus() *ConstantVUs {
	if x != nil {
		if x, ok := x.Executor.(*K6Scenario_ConstantVus); ok {
			return x.ConstantVus
		}
	}
	return nil
}

func (x *K6Scenario) GetRampingVus() *RampingVUs {
	if x != nil {
		if x, ok := x.Executor.(*K6Scenario_RampingVus); ok {
			return x.RampingVus
		}
	}
	return nil
}

func (x *K6Scenario) GetConstantArrivalRate() *ConstantArrivalRate {
	if x != nil {
		if x, ok := x.Executor.(*K6Scenario_ConstantArrivalRate); ok {
			return x.ConstantArrivalRate
		}
	}
	return nil
}

func (x *K6Scenario) GetRampingArrivalRate() *RampingArrivalRate {
	if x != nil {
		if x, ok := x.Executor.(*K6Scenario_RampingArrivalRate); ok {
			return x.RampingArrivalRate
		}
	}
	return nil
}

type isK6Scenario_Executor interface {
	isK6Scenario_Executor()
}

type K6Scenario_SharedIterations struct {
	// * Shared iterations executor
	SharedIterations *SharedIterations `protobuf:"bytes,10,opt,name=shared_iterations,json=sharedIterations,proto3,oneof"`
}

type K6Scenario_PerVuIterations struct {
	// * Per-VU iterations executor
	PerVuIterations *PerVuIterations `protobuf:"bytes,11,opt,name=per_vu_iterations,json=perVuIterations,proto3,oneof"`
}

type K6Scenario_ConstantVus struct {
	// * Constant VUs executor
	ConstantVus *ConstantVUs `protobuf:"bytes,12,opt,name=constant_vus,json=constantVus,proto3,oneof"`
}

type K6Scenario_RampingVus struct {
	// * Ramping VUs executor
	RampingVus *RampingVUs `protobuf:"bytes,13,opt,name=ramping_vus,json=rampingVus,proto3,oneof"`
}

type K6Scenario_ConstantArrivalRate struct {
	// * Constant arrival rate executor
	ConstantArrivalRate *ConstantArrivalRate `protobuf:"bytes,14,opt,name=constant_arrival_rate,json=constantArrivalRate,proto3,oneof"`
}

type K6Scenario_RampingArrivalRate struct {
	// * Ramping arrival rate executor
	RampingArrivalRate *RampingArrivalRate `protobuf:"bytes,15,opt,name=ramping_arrival_rate,json=rampingArrivalRate,proto3,oneof"`
}

func (*K6Scenario_SharedIterations) isK6Scenario_Executor() {}

func (*K6Scenario_PerVuIterations) isK6Scenario_Executor() {}

func (*K6Scenario_ConstantVus) isK6Scenario_Executor() {}

func (*K6Scenario_RampingVus) isK6Scenario_Executor() {}

func (*K6Scenario_ConstantArrivalRate) isK6Scenario_Executor() {}

func (*K6Scenario_RampingArrivalRate) isK6Scenario_Executor() {}

// *
// SharedIterations executor configuration.
// Documentation:
// https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/shared-iterations/
type SharedIterations struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Total number of iterations to be executed by all VUs together.
	// Iterations are distributed dynamically among available VUs.
	// "-1" is a special value to run all the units from step.
	Iterations int64 `protobuf:"varint,1,opt,name=iterations,proto3" json:"iterations,omitempty"`
	// *
	// Number of virtual users that will execute these iterations in parallel
	Vus           uint32 `protobuf:"varint,2,opt,name=vus,proto3" json:"vus,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SharedIterations) Reset() {
	*x = SharedIterations{}
	mi := &file_k6_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SharedIterations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SharedIterations) ProtoMessage() {}

func (x *SharedIterations) ProtoReflect() protoreflect.Message {
	mi := &file_k6_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SharedIterations.ProtoReflect.Descriptor instead.
func (*SharedIterations) Descriptor() ([]byte, []int) {
	return file_k6_proto_rawDescGZIP(), []int{2}
}

func (x *SharedIterations) GetIterations() int64 {
	if x != nil {
		return x.Iterations
	}
	return 0
}

func (x *SharedIterations) GetVus() uint32 {
	if x != nil {
		return x.Vus
	}
	return 0
}

// *
// PerVuIterations executor configuration.
// Documentation:
// https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/per-vu-iterations/
type PerVuIterations struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Number of virtual users
	Vus uint32 `protobuf:"varint,1,opt,name=vus,proto3" json:"vus,omitempty"`
	// * Number of iterations that each VU should execute
	// "-1" is a special value to run all the units from by every vu.
	Iterations    int64 `protobuf:"varint,2,opt,name=iterations,proto3" json:"iterations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PerVuIterations) Reset() {
	*x = PerVuIterations{}
	mi := &file_k6_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PerVuIterations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerVuIterations) ProtoMessage() {}

func (x *PerVuIterations) ProtoReflect() protoreflect.Message {
	mi := &file_k6_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerVuIterations.ProtoReflect.Descriptor instead.
func (*PerVuIterations) Descriptor() ([]byte, []int) {
	return file_k6_proto_rawDescGZIP(), []int{3}
}

func (x *PerVuIterations) GetVus() uint32 {
	if x != nil {
		return x.Vus
	}
	return 0
}

func (x *PerVuIterations) GetIterations() int64 {
	if x != nil {
		return x.Iterations
	}
	return 0
}

// *
// ConstantVUs executor configuration.
// Documentation:
// https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/constant-vus/
type ConstantVUs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Fixed number of virtual users that will be simultaneously active at all
	// times
	Vus uint32 `protobuf:"varint,1,opt,name=vus,proto3" json:"vus,omitempty"`
	// * Duration of the scenario execution.
	// All VUs will start and execute iterations until this time is completed.
	Duration      *durationpb.Duration `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConstantVUs) Reset() {
	*x = ConstantVUs{}
	mi := &file_k6_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConstantVUs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstantVUs) ProtoMessage() {}

func (x *ConstantVUs) ProtoReflect() protoreflect.Message {
	mi := &file_k6_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstantVUs.ProtoReflect.Descriptor instead.
func (*ConstantVUs) Descriptor() ([]byte, []int) {
	return file_k6_proto_rawDescGZIP(), []int{4}
}

func (x *ConstantVUs) GetVus() uint32 {
	if x != nil {
		return x.Vus
	}
	return 0
}

func (x *ConstantVUs) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

// *
// RampingVUs executor configuration.
// Documentation:
// https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/ramping-vus/
type RampingVUs struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Initial number of virtual users
	StartVus uint32 `protobuf:"varint,1,opt,name=start_vus,json=startVus,proto3" json:"start_vus,omitempty"`
	// * List of stages where VU count changes to target value over specified
	// time
	Stages []*RampingVUs_VUStage `protobuf:"bytes,2,rep,name=stages,proto3" json:"stages,omitempty"`
	// * Number of VUs allocated in advance.
	// Helps avoid delays when creating new VUs during the test.
	PreAllocatedVus uint32 `protobuf:"varint,3,opt,name=pre_allocated_vus,json=preAllocatedVus,proto3" json:"pre_allocated_vus,omitempty"`
	// * Maximum number of VUs available for pool expansion
	MaxVus        uint32 `protobuf:"varint,4,opt,name=max_vus,json=maxVus,proto3" json:"max_vus,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RampingVUs) Reset() {
	*x = RampingVUs{}
	mi := &file_k6_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RampingVUs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RampingVUs) ProtoMessage() {}

func (x *RampingVUs) ProtoReflect() protoreflect.Message {
	mi := &file_k6_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RampingVUs.ProtoReflect.Descriptor instead.
func (*RampingVUs) Descriptor() ([]byte, []int) {
	return file_k6_proto_rawDescGZIP(), []int{5}
}

func (x *RampingVUs) GetStartVus() uint32 {
	if x != nil {
		return x.StartVus
	}
	return 0
}

func (x *RampingVUs) GetStages() []*RampingVUs_VUStage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *RampingVUs) GetPreAllocatedVus() uint32 {
	if x != nil {
		return x.PreAllocatedVus
	}
	return 0
}

func (x *RampingVUs) GetMaxVus() uint32 {
	if x != nil {
		return x.MaxVus
	}
	return 0
}

// *
// ConstantArrivalRate executor configuration.
// Documentation:
// https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/constant-arrival-rate/
type ConstantArrivalRate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Rate of iteration generation (number per time unit)
	Rate uint32 `protobuf:"varint,1,opt,name=rate,proto3" json:"rate,omitempty"`
	// * Time unit for the "rate" field (e.g., "1s")
	TimeUnit *durationpb.Duration `protobuf:"bytes,2,opt,name=time_unit,json=timeUnit,proto3" json:"time_unit,omitempty"`
	// * Duration of the scenario
	Duration *durationpb.Duration `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	// * Number of VUs allocated in advance
	PreAllocatedVus uint32 `protobuf:"varint,4,opt,name=pre_allocated_vus,json=preAllocatedVus,proto3" json:"pre_allocated_vus,omitempty"`
	// * Maximum allowed number of VUs if load increases
	MaxVus        uint32 `protobuf:"varint,5,opt,name=max_vus,json=maxVus,proto3" json:"max_vus,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConstantArrivalRate) Reset() {
	*x = ConstantArrivalRate{}
	mi := &file_k6_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConstantArrivalRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstantArrivalRate) ProtoMessage() {}

func (x *ConstantArrivalRate) ProtoReflect() protoreflect.Message {
	mi := &file_k6_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstantArrivalRate.ProtoReflect.Descriptor instead.
func (*ConstantArrivalRate) Descriptor() ([]byte, []int) {
	return file_k6_proto_rawDescGZIP(), []int{6}
}

func (x *ConstantArrivalRate) GetRate() uint32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *ConstantArrivalRate) GetTimeUnit() *durationpb.Duration {
	if x != nil {
		return x.TimeUnit
	}
	return nil
}

func (x *ConstantArrivalRate) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ConstantArrivalRate) GetPreAllocatedVus() uint32 {
	if x != nil {
		return x.PreAllocatedVus
	}
	return 0
}

func (x *ConstantArrivalRate) GetMaxVus() uint32 {
	if x != nil {
		return x.MaxVus
	}
	return 0
}

// *
// RampingArrivalRate executor configuration.
// Documentation:
// https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/ramping-arrival-rate/
type RampingArrivalRate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Initial rate (iterations per time_unit)
	StartRate uint32 `protobuf:"varint,1,opt,name=start_rate,json=startRate,proto3" json:"start_rate,omitempty"`
	// * Time unit for the rate (e.g., "1s")
	TimeUnit *durationpb.Duration `protobuf:"bytes,2,opt,name=time_unit,json=timeUnit,proto3" json:"time_unit,omitempty"`
	// * List of rate change stages
	Stages []*RampingArrivalRate_RateStage `protobuf:"bytes,3,rep,name=stages,proto3" json:"stages,omitempty"`
	// * Number of VUs allocated in advance
	PreAllocatedVus uint32 `protobuf:"varint,4,opt,name=pre_allocated_vus,json=preAllocatedVus,proto3" json:"pre_allocated_vus,omitempty"`
	// * Maximum number of VUs available for pool expansion
	MaxVus        uint32 `protobuf:"varint,5,opt,name=max_vus,json=maxVus,proto3" json:"max_vus,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RampingArrivalRate) Reset() {
	*x = RampingArrivalRate{}
	mi := &file_k6_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RampingArrivalRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RampingArrivalRate) ProtoMessage() {}

func (x *RampingArrivalRate) ProtoReflect() protoreflect.Message {
	mi := &file_k6_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RampingArrivalRate.ProtoReflect.Descriptor instead.
func (*RampingArrivalRate) Descriptor() ([]byte, []int) {
	return file_k6_proto_rawDescGZIP(), []int{7}
}

func (x *RampingArrivalRate) GetStartRate() uint32 {
	if x != nil {
		return x.StartRate
	}
	return 0
}

func (x *RampingArrivalRate) GetTimeUnit() *durationpb.Duration {
	if x != nil {
		return x.TimeUnit
	}
	return nil
}

func (x *RampingArrivalRate) GetStages() []*RampingArrivalRate_RateStage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *RampingArrivalRate) GetPreAllocatedVus() uint32 {
	if x != nil {
		return x.PreAllocatedVus
	}
	return 0
}

func (x *RampingArrivalRate) GetMaxVus() uint32 {
	if x != nil {
		return x.MaxVus
	}
	return 0
}

// * VU stage configuration for ramping
type RampingVUs_VUStage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Duration of the stage (e.g., "30s")
	Duration *durationpb.Duration `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	// * Target number of VUs at the end of the stage
	Target        uint32 `protobuf:"varint,2,opt,name=target,proto3" json:"target,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RampingVUs_VUStage) Reset() {
	*x = RampingVUs_VUStage{}
	mi := &file_k6_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RampingVUs_VUStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RampingVUs_VUStage) ProtoMessage() {}

func (x *RampingVUs_VUStage) ProtoReflect() protoreflect.Message {
	mi := &file_k6_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RampingVUs_VUStage.ProtoReflect.Descriptor instead.
func (*RampingVUs_VUStage) Descriptor() ([]byte, []int) {
	return file_k6_proto_rawDescGZIP(), []int{5, 0}
}

func (x *RampingVUs_VUStage) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *RampingVUs_VUStage) GetTarget() uint32 {
	if x != nil {
		return x.Target
	}
	return 0
}

// * Rate stage configuration for ramping arrival rate
type RampingArrivalRate_RateStage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// * Target rate (iterations per time_unit) at the end of the stage
	Target uint32 `protobuf:"varint,1,opt,name=target,proto3" json:"target,omitempty"`
	// * Duration of the stage
	Duration      *durationpb.Duration `protobuf:"bytes,2,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RampingArrivalRate_RateStage) Reset() {
	*x = RampingArrivalRate_RateStage{}
	mi := &file_k6_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RampingArrivalRate_RateStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RampingArrivalRate_RateStage) ProtoMessage() {}

func (x *RampingArrivalRate_RateStage) ProtoReflect() protoreflect.Message {
	mi := &file_k6_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RampingArrivalRate_RateStage.ProtoReflect.Descriptor instead.
func (*RampingArrivalRate_RateStage) Descriptor() ([]byte, []int) {
	return file_k6_proto_rawDescGZIP(), []int{7, 0}
}

func (x *RampingArrivalRate_RateStage) GetTarget() uint32 {
	if x != nil {
		return x.Target
	}
	return 0
}

func (x *RampingArrivalRate_RateStage) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

var File_k6_proto protoreflect.FileDescriptor

const file_k6_proto_rawDesc = "" +
	"\n" +
	"\bk6.proto\x12\astroppy\x1a\x1bgen/validate/validate.proto\x1a\x1egoogle/protobuf/duration.proto\"\xc1\x01\n" +
	"\tK6Options\x12!\n" +
	"\ak6_args\x18\x02 \x03(\tB\b\xfaB\x05\x92\x01\x02\x18\x01R\x06k6Args\x12C\n" +
	"\rsetup_timeout\x18\n" +
	" \x01(\v2\x19.google.protobuf.DurationH\x00R\fsetupTimeout\x88\x01\x01\x12:\n" +
	"\bscenario\x18\xc8\x01 \x01(\v2\x13.stroppy.K6ScenarioB\b\xfaB\x05\x8a\x01\x02\x10\x01R\bscenarioB\x10\n" +
	"\x0e_setup_timeout\"\x80\x04\n" +
	"\n" +
	"K6Scenario\x12<\n" +
	"\fmax_duration\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\vmaxDuration\x12H\n" +
	"\x11shared_iterations\x18\n" +
	" \x01(\v2\x19.stroppy.SharedIterationsH\x00R\x10sharedIterations\x12F\n" +
	"\x11per_vu_iterations\x18\v \x01(\v2\x18.stroppy.PerVuIterationsH\x00R\x0fperVuIterations\x129\n" +
	"\fconstant_vus\x18\f \x01(\v2\x14.stroppy.ConstantVUsH\x00R\vconstantVus\x126\n" +
	"\vramping_vus\x18\r \x01(\v2\x13.stroppy.RampingVUsH\x00R\n" +
	"rampingVus\x12R\n" +
	"\x15constant_arrival_rate\x18\x0e \x01(\v2\x1c.stroppy.ConstantArrivalRateH\x00R\x13constantArrivalRate\x12O\n" +
	"\x14ramping_arrival_rate\x18\x0f \x01(\v2\x1b.stroppy.RampingArrivalRateH\x00R\x12rampingArrivalRateB\n" +
	"\n" +
	"\bexecutor\"D\n" +
	"\x10SharedIterations\x12\x1e\n" +
	"\n" +
	"iterations\x18\x01 \x01(\x03R\n" +
	"iterations\x12\x10\n" +
	"\x03vus\x18\x02 \x01(\rR\x03vus\"C\n" +
	"\x0fPerVuIterations\x12\x10\n" +
	"\x03vus\x18\x01 \x01(\rR\x03vus\x12\x1e\n" +
	"\n" +
	"iterations\x18\x02 \x01(\x03R\n" +
	"iterations\"V\n" +
	"\vConstantVUs\x12\x10\n" +
	"\x03vus\x18\x01 \x01(\rR\x03vus\x125\n" +
	"\bduration\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\bduration\"\xfd\x01\n" +
	"\n" +
	"RampingVUs\x12\x1b\n" +
	"\tstart_vus\x18\x01 \x01(\rR\bstartVus\x123\n" +
	"\x06stages\x18\x02 \x03(\v2\x1b.stroppy.RampingVUs.VUStageR\x06stages\x12*\n" +
	"\x11pre_allocated_vus\x18\x03 \x01(\rR\x0fpreAllocatedVus\x12\x17\n" +
	"\amax_vus\x18\x04 \x01(\rR\x06maxVus\x1aX\n" +
	"\aVUStage\x125\n" +
	"\bduration\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\bduration\x12\x16\n" +
	"\x06target\x18\x02 \x01(\rR\x06target\"\xdd\x01\n" +
	"\x13ConstantArrivalRate\x12\x12\n" +
	"\x04rate\x18\x01 \x01(\rR\x04rate\x126\n" +
	"\ttime_unit\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\btimeUnit\x125\n" +
	"\bduration\x18\x03 \x01(\v2\x19.google.protobuf.DurationR\bduration\x12*\n" +
	"\x11pre_allocated_vus\x18\x04 \x01(\rR\x0fpreAllocatedVus\x12\x17\n" +
	"\amax_vus\x18\x05 \x01(\rR\x06maxVus\"\xcb\x02\n" +
	"\x12RampingArrivalRate\x12\x1d\n" +
	"\n" +
	"start_rate\x18\x01 \x01(\rR\tstartRate\x126\n" +
	"\ttime_unit\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\btimeUnit\x12=\n" +
	"\x06stages\x18\x03 \x03(\v2%.stroppy.RampingArrivalRate.RateStageR\x06stages\x12*\n" +
	"\x11pre_allocated_vus\x18\x04 \x01(\rR\x0fpreAllocatedVus\x12\x17\n" +
	"\amax_vus\x18\x05 \x01(\rR\x06maxVus\x1aZ\n" +
	"\tRateStage\x12\x16\n" +
	"\x06target\x18\x01 \x01(\rR\x06target\x125\n" +
	"\bduration\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\bdurationB0Z.github.com/stroppy-io/stroppy/pkg/common/protob\x06proto3"

var (
	file_k6_proto_rawDescOnce sync.Once
	file_k6_proto_rawDescData []byte
)

func file_k6_proto_rawDescGZIP() []byte {
	file_k6_proto_rawDescOnce.Do(func() {
		file_k6_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_k6_proto_rawDesc), len(file_k6_proto_rawDesc)))
	})
	return file_k6_proto_rawDescData
}

var file_k6_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_k6_proto_goTypes = []any{
	(*K6Options)(nil),                    // 0: stroppy.K6Options
	(*K6Scenario)(nil),                   // 1: stroppy.K6Scenario
	(*SharedIterations)(nil),             // 2: stroppy.SharedIterations
	(*PerVuIterations)(nil),              // 3: stroppy.PerVuIterations
	(*ConstantVUs)(nil),                  // 4: stroppy.ConstantVUs
	(*RampingVUs)(nil),                   // 5: stroppy.RampingVUs
	(*ConstantArrivalRate)(nil),          // 6: stroppy.ConstantArrivalRate
	(*RampingArrivalRate)(nil),           // 7: stroppy.RampingArrivalRate
	(*RampingVUs_VUStage)(nil),           // 8: stroppy.RampingVUs.VUStage
	(*RampingArrivalRate_RateStage)(nil), // 9: stroppy.RampingArrivalRate.RateStage
	(*durationpb.Duration)(nil),          // 10: google.protobuf.Duration
}
var file_k6_proto_depIdxs = []int32{
	10, // 0: stroppy.K6Options.setup_timeout:type_name -> google.protobuf.Duration
	1,  // 1: stroppy.K6Options.scenario:type_name -> stroppy.K6Scenario
	10, // 2: stroppy.K6Scenario.max_duration:type_name -> google.protobuf.Duration
	2,  // 3: stroppy.K6Scenario.shared_iterations:type_name -> stroppy.SharedIterations
	3,  // 4: stroppy.K6Scenario.per_vu_iterations:type_name -> stroppy.PerVuIterations
	4,  // 5: stroppy.K6Scenario.constant_vus:type_name -> stroppy.ConstantVUs
	5,  // 6: stroppy.K6Scenario.ramping_vus:type_name -> stroppy.RampingVUs
	6,  // 7: stroppy.K6Scenario.constant_arrival_rate:type_name -> stroppy.ConstantArrivalRate
	7,  // 8: stroppy.K6Scenario.ramping_arrival_rate:type_name -> stroppy.RampingArrivalRate
	10, // 9: stroppy.ConstantVUs.duration:type_name -> google.protobuf.Duration
	8,  // 10: stroppy.RampingVUs.stages:type_name -> stroppy.RampingVUs.VUStage
	10, // 11: stroppy.ConstantArrivalRate.time_unit:type_name -> google.protobuf.Duration
	10, // 12: stroppy.ConstantArrivalRate.duration:type_name -> google.protobuf.Duration
	10, // 13: stroppy.RampingArrivalRate.time_unit:type_name -> google.protobuf.Duration
	9,  // 14: stroppy.RampingArrivalRate.stages:type_name -> stroppy.RampingArrivalRate.RateStage
	10, // 15: stroppy.RampingVUs.VUStage.duration:type_name -> google.protobuf.Duration
	10, // 16: stroppy.RampingArrivalRate.RateStage.duration:type_name -> google.protobuf.Duration
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_k6_proto_init() }
func file_k6_proto_init() {
	if File_k6_proto != nil {
		return
	}
	file_k6_proto_msgTypes[0].OneofWrappers = []any{}
	file_k6_proto_msgTypes[1].OneofWrappers = []any{
		(*K6Scenario_SharedIterations)(nil),
		(*K6Scenario_PerVuIterations)(nil),
		(*K6Scenario_ConstantVus)(nil),
		(*K6Scenario_RampingVus)(nil),
		(*K6Scenario_ConstantArrivalRate)(nil),
		(*K6Scenario_RampingArrivalRate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_k6_proto_rawDesc), len(file_k6_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_k6_proto_goTypes,
		DependencyIndexes: file_k6_proto_depIdxs,
		MessageInfos:      file_k6_proto_msgTypes,
	}.Build()
	File_k6_proto = out.File
	file_k6_proto_goTypes = nil
	file_k6_proto_depIdxs = nil
}
