// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: stroppy/sidecar.proto

package protoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	proto "github.com/stroppy-io/stroppy/pkg/common/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SidecarServiceName is the fully-qualified name of the SidecarService service.
	SidecarServiceName = "stroppy.SidecarService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SidecarServiceInitializeProcedure is the fully-qualified name of the SidecarService's Initialize
	// RPC.
	SidecarServiceInitializeProcedure = "/stroppy.SidecarService/Initialize"
	// SidecarServiceOnStepStartProcedure is the fully-qualified name of the SidecarService's
	// OnStepStart RPC.
	SidecarServiceOnStepStartProcedure = "/stroppy.SidecarService/OnStepStart"
	// SidecarServiceOnStepEndProcedure is the fully-qualified name of the SidecarService's OnStepEnd
	// RPC.
	SidecarServiceOnStepEndProcedure = "/stroppy.SidecarService/OnStepEnd"
	// SidecarServiceTeardownProcedure is the fully-qualified name of the SidecarService's Teardown RPC.
	SidecarServiceTeardownProcedure = "/stroppy.SidecarService/Teardown"
)

// SidecarServiceClient is a client for the stroppy.SidecarService service.
type SidecarServiceClient interface {
	// *
	// Initialize is called once before the benchmark starts.
	// Used to initialize resources of SidecarPlugin.
	Initialize(context.Context, *proto.GlobalConfig) (*emptypb.Empty, error)
	// *
	// OnStepStart is called once before each step starts.
	OnStepStart(context.Context, *proto.StepContext) (*emptypb.Empty, error)
	// *
	// OnStepEnd is called once after each step ends.
	OnStepEnd(context.Context, *proto.StepContext) (*emptypb.Empty, error)
	// *
	// Teardown is called once after the benchmark ends.
	// Used to clean up resources.
	Teardown(context.Context, *proto.GlobalConfig) (*emptypb.Empty, error)
}

// NewSidecarServiceClient constructs a client for the stroppy.SidecarService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSidecarServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SidecarServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	sidecarServiceMethods := proto.File_stroppy_sidecar_proto.Services().ByName("SidecarService").Methods()
	return &sidecarServiceClient{
		initialize: connect.NewClient[proto.GlobalConfig, emptypb.Empty](
			httpClient,
			baseURL+SidecarServiceInitializeProcedure,
			connect.WithSchema(sidecarServiceMethods.ByName("Initialize")),
			connect.WithClientOptions(opts...),
		),
		onStepStart: connect.NewClient[proto.StepContext, emptypb.Empty](
			httpClient,
			baseURL+SidecarServiceOnStepStartProcedure,
			connect.WithSchema(sidecarServiceMethods.ByName("OnStepStart")),
			connect.WithClientOptions(opts...),
		),
		onStepEnd: connect.NewClient[proto.StepContext, emptypb.Empty](
			httpClient,
			baseURL+SidecarServiceOnStepEndProcedure,
			connect.WithSchema(sidecarServiceMethods.ByName("OnStepEnd")),
			connect.WithClientOptions(opts...),
		),
		teardown: connect.NewClient[proto.GlobalConfig, emptypb.Empty](
			httpClient,
			baseURL+SidecarServiceTeardownProcedure,
			connect.WithSchema(sidecarServiceMethods.ByName("Teardown")),
			connect.WithClientOptions(opts...),
		),
	}
}

// sidecarServiceClient implements SidecarServiceClient.
type sidecarServiceClient struct {
	initialize  *connect.Client[proto.GlobalConfig, emptypb.Empty]
	onStepStart *connect.Client[proto.StepContext, emptypb.Empty]
	onStepEnd   *connect.Client[proto.StepContext, emptypb.Empty]
	teardown    *connect.Client[proto.GlobalConfig, emptypb.Empty]
}

// Initialize calls stroppy.SidecarService.Initialize.
func (c *sidecarServiceClient) Initialize(ctx context.Context, req *proto.GlobalConfig) (*emptypb.Empty, error) {
	response, err := c.initialize.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// OnStepStart calls stroppy.SidecarService.OnStepStart.
func (c *sidecarServiceClient) OnStepStart(ctx context.Context, req *proto.StepContext) (*emptypb.Empty, error) {
	response, err := c.onStepStart.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// OnStepEnd calls stroppy.SidecarService.OnStepEnd.
func (c *sidecarServiceClient) OnStepEnd(ctx context.Context, req *proto.StepContext) (*emptypb.Empty, error) {
	response, err := c.onStepEnd.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// Teardown calls stroppy.SidecarService.Teardown.
func (c *sidecarServiceClient) Teardown(ctx context.Context, req *proto.GlobalConfig) (*emptypb.Empty, error) {
	response, err := c.teardown.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// SidecarServiceHandler is an implementation of the stroppy.SidecarService service.
type SidecarServiceHandler interface {
	// *
	// Initialize is called once before the benchmark starts.
	// Used to initialize resources of SidecarPlugin.
	Initialize(context.Context, *proto.GlobalConfig) (*emptypb.Empty, error)
	// *
	// OnStepStart is called once before each step starts.
	OnStepStart(context.Context, *proto.StepContext) (*emptypb.Empty, error)
	// *
	// OnStepEnd is called once after each step ends.
	OnStepEnd(context.Context, *proto.StepContext) (*emptypb.Empty, error)
	// *
	// Teardown is called once after the benchmark ends.
	// Used to clean up resources.
	Teardown(context.Context, *proto.GlobalConfig) (*emptypb.Empty, error)
}

// NewSidecarServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSidecarServiceHandler(svc SidecarServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sidecarServiceMethods := proto.File_stroppy_sidecar_proto.Services().ByName("SidecarService").Methods()
	sidecarServiceInitializeHandler := connect.NewUnaryHandlerSimple(
		SidecarServiceInitializeProcedure,
		svc.Initialize,
		connect.WithSchema(sidecarServiceMethods.ByName("Initialize")),
		connect.WithHandlerOptions(opts...),
	)
	sidecarServiceOnStepStartHandler := connect.NewUnaryHandlerSimple(
		SidecarServiceOnStepStartProcedure,
		svc.OnStepStart,
		connect.WithSchema(sidecarServiceMethods.ByName("OnStepStart")),
		connect.WithHandlerOptions(opts...),
	)
	sidecarServiceOnStepEndHandler := connect.NewUnaryHandlerSimple(
		SidecarServiceOnStepEndProcedure,
		svc.OnStepEnd,
		connect.WithSchema(sidecarServiceMethods.ByName("OnStepEnd")),
		connect.WithHandlerOptions(opts...),
	)
	sidecarServiceTeardownHandler := connect.NewUnaryHandlerSimple(
		SidecarServiceTeardownProcedure,
		svc.Teardown,
		connect.WithSchema(sidecarServiceMethods.ByName("Teardown")),
		connect.WithHandlerOptions(opts...),
	)
	return "/stroppy.SidecarService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SidecarServiceInitializeProcedure:
			sidecarServiceInitializeHandler.ServeHTTP(w, r)
		case SidecarServiceOnStepStartProcedure:
			sidecarServiceOnStepStartHandler.ServeHTTP(w, r)
		case SidecarServiceOnStepEndProcedure:
			sidecarServiceOnStepEndHandler.ServeHTTP(w, r)
		case SidecarServiceTeardownProcedure:
			sidecarServiceTeardownHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSidecarServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSidecarServiceHandler struct{}

func (UnimplementedSidecarServiceHandler) Initialize(context.Context, *proto.GlobalConfig) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stroppy.SidecarService.Initialize is not implemented"))
}

func (UnimplementedSidecarServiceHandler) OnStepStart(context.Context, *proto.StepContext) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stroppy.SidecarService.OnStepStart is not implemented"))
}

func (UnimplementedSidecarServiceHandler) OnStepEnd(context.Context, *proto.StepContext) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stroppy.SidecarService.OnStepEnd is not implemented"))
}

func (UnimplementedSidecarServiceHandler) Teardown(context.Context, *proto.GlobalConfig) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stroppy.SidecarService.Teardown is not implemented"))
}
