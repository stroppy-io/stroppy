// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: stroppy/cloud.proto

package protoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	proto "github.com/stroppy-io/stroppy/pkg/common/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CloudStatusServiceName is the fully-qualified name of the CloudStatusService service.
	CloudStatusServiceName = "stroppy.CloudStatusService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CloudStatusServiceNotifyRunProcedure is the fully-qualified name of the CloudStatusService's
	// NotifyRun RPC.
	CloudStatusServiceNotifyRunProcedure = "/stroppy.CloudStatusService/NotifyRun"
	// CloudStatusServiceNotifyStepProcedure is the fully-qualified name of the CloudStatusService's
	// NotifyStep RPC.
	CloudStatusServiceNotifyStepProcedure = "/stroppy.CloudStatusService/NotifyStep"
)

// CloudStatusServiceClient is a client for the stroppy.CloudStatusService service.
type CloudStatusServiceClient interface {
	// * Notifies the cloud status of a benchmark run
	NotifyRun(context.Context, *proto.StroppyRun) (*emptypb.Empty, error)
	// * Notifies the cloud status of a benchmark step
	NotifyStep(context.Context, *proto.StroppyStepRun) (*emptypb.Empty, error)
}

// NewCloudStatusServiceClient constructs a client for the stroppy.CloudStatusService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCloudStatusServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CloudStatusServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	cloudStatusServiceMethods := proto.File_stroppy_cloud_proto.Services().ByName("CloudStatusService").Methods()
	return &cloudStatusServiceClient{
		notifyRun: connect.NewClient[proto.StroppyRun, emptypb.Empty](
			httpClient,
			baseURL+CloudStatusServiceNotifyRunProcedure,
			connect.WithSchema(cloudStatusServiceMethods.ByName("NotifyRun")),
			connect.WithClientOptions(opts...),
		),
		notifyStep: connect.NewClient[proto.StroppyStepRun, emptypb.Empty](
			httpClient,
			baseURL+CloudStatusServiceNotifyStepProcedure,
			connect.WithSchema(cloudStatusServiceMethods.ByName("NotifyStep")),
			connect.WithClientOptions(opts...),
		),
	}
}

// cloudStatusServiceClient implements CloudStatusServiceClient.
type cloudStatusServiceClient struct {
	notifyRun  *connect.Client[proto.StroppyRun, emptypb.Empty]
	notifyStep *connect.Client[proto.StroppyStepRun, emptypb.Empty]
}

// NotifyRun calls stroppy.CloudStatusService.NotifyRun.
func (c *cloudStatusServiceClient) NotifyRun(ctx context.Context, req *proto.StroppyRun) (*emptypb.Empty, error) {
	response, err := c.notifyRun.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// NotifyStep calls stroppy.CloudStatusService.NotifyStep.
func (c *cloudStatusServiceClient) NotifyStep(ctx context.Context, req *proto.StroppyStepRun) (*emptypb.Empty, error) {
	response, err := c.notifyStep.CallUnary(ctx, connect.NewRequest(req))
	if response != nil {
		return response.Msg, err
	}
	return nil, err
}

// CloudStatusServiceHandler is an implementation of the stroppy.CloudStatusService service.
type CloudStatusServiceHandler interface {
	// * Notifies the cloud status of a benchmark run
	NotifyRun(context.Context, *proto.StroppyRun) (*emptypb.Empty, error)
	// * Notifies the cloud status of a benchmark step
	NotifyStep(context.Context, *proto.StroppyStepRun) (*emptypb.Empty, error)
}

// NewCloudStatusServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCloudStatusServiceHandler(svc CloudStatusServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cloudStatusServiceMethods := proto.File_stroppy_cloud_proto.Services().ByName("CloudStatusService").Methods()
	cloudStatusServiceNotifyRunHandler := connect.NewUnaryHandlerSimple(
		CloudStatusServiceNotifyRunProcedure,
		svc.NotifyRun,
		connect.WithSchema(cloudStatusServiceMethods.ByName("NotifyRun")),
		connect.WithHandlerOptions(opts...),
	)
	cloudStatusServiceNotifyStepHandler := connect.NewUnaryHandlerSimple(
		CloudStatusServiceNotifyStepProcedure,
		svc.NotifyStep,
		connect.WithSchema(cloudStatusServiceMethods.ByName("NotifyStep")),
		connect.WithHandlerOptions(opts...),
	)
	return "/stroppy.CloudStatusService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CloudStatusServiceNotifyRunProcedure:
			cloudStatusServiceNotifyRunHandler.ServeHTTP(w, r)
		case CloudStatusServiceNotifyStepProcedure:
			cloudStatusServiceNotifyStepHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCloudStatusServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCloudStatusServiceHandler struct{}

func (UnimplementedCloudStatusServiceHandler) NotifyRun(context.Context, *proto.StroppyRun) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stroppy.CloudStatusService.NotifyRun is not implemented"))
}

func (UnimplementedCloudStatusServiceHandler) NotifyStep(context.Context, *proto.StroppyStepRun) (*emptypb.Empty, error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stroppy.CloudStatusService.NotifyStep is not implemented"))
}
