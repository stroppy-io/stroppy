// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: k6.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on K6Options with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *K6Options) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on K6Options with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in K6OptionsMultiError, or nil
// if none found.
func (m *K6Options) ValidateAll() error {
	return m.validate(true)
}

func (m *K6Options) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	_K6Options_K6Args_Unique := make(map[string]struct{}, len(m.GetK6Args()))

	for idx, item := range m.GetK6Args() {
		_, _ = idx, item

		if _, exists := _K6Options_K6Args_Unique[item]; exists {
			err := K6OptionsValidationError{
				field:  fmt.Sprintf("K6Args[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_K6Options_K6Args_Unique[item] = struct{}{}
		}

		// no validation rules for K6Args[idx]
	}

	if m.GetScenario() == nil {
		err := K6OptionsValidationError{
			field:  "Scenario",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetScenario()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, K6OptionsValidationError{
					field:  "Scenario",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, K6OptionsValidationError{
					field:  "Scenario",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetScenario()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return K6OptionsValidationError{
				field:  "Scenario",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.SetupTimeout != nil {

		if all {
			switch v := interface{}(m.GetSetupTimeout()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, K6OptionsValidationError{
						field:  "SetupTimeout",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, K6OptionsValidationError{
						field:  "SetupTimeout",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSetupTimeout()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return K6OptionsValidationError{
					field:  "SetupTimeout",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return K6OptionsMultiError(errors)
	}

	return nil
}

// K6OptionsMultiError is an error wrapping multiple validation errors returned
// by K6Options.ValidateAll() if the designated constraints aren't met.
type K6OptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m K6OptionsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m K6OptionsMultiError) AllErrors() []error { return m }

// K6OptionsValidationError is the validation error returned by
// K6Options.Validate if the designated constraints aren't met.
type K6OptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e K6OptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e K6OptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e K6OptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e K6OptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e K6OptionsValidationError) ErrorName() string { return "K6OptionsValidationError" }

// Error satisfies the builtin error interface
func (e K6OptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sK6Options.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = K6OptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = K6OptionsValidationError{}

// Validate checks the field values on K6Scenario with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *K6Scenario) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on K6Scenario with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in K6ScenarioMultiError, or
// nil if none found.
func (m *K6Scenario) ValidateAll() error {
	return m.validate(true)
}

func (m *K6Scenario) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMaxDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, K6ScenarioValidationError{
					field:  "MaxDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, K6ScenarioValidationError{
					field:  "MaxDuration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMaxDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return K6ScenarioValidationError{
				field:  "MaxDuration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Executor.(type) {
	case *K6Scenario_SharedIterations:
		if v == nil {
			err := K6ScenarioValidationError{
				field:  "Executor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetSharedIterations()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, K6ScenarioValidationError{
						field:  "SharedIterations",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, K6ScenarioValidationError{
						field:  "SharedIterations",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSharedIterations()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return K6ScenarioValidationError{
					field:  "SharedIterations",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *K6Scenario_PerVuIterations:
		if v == nil {
			err := K6ScenarioValidationError{
				field:  "Executor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetPerVuIterations()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, K6ScenarioValidationError{
						field:  "PerVuIterations",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, K6ScenarioValidationError{
						field:  "PerVuIterations",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPerVuIterations()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return K6ScenarioValidationError{
					field:  "PerVuIterations",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *K6Scenario_ConstantVus:
		if v == nil {
			err := K6ScenarioValidationError{
				field:  "Executor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetConstantVus()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, K6ScenarioValidationError{
						field:  "ConstantVus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, K6ScenarioValidationError{
						field:  "ConstantVus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConstantVus()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return K6ScenarioValidationError{
					field:  "ConstantVus",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *K6Scenario_RampingVus:
		if v == nil {
			err := K6ScenarioValidationError{
				field:  "Executor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRampingVus()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, K6ScenarioValidationError{
						field:  "RampingVus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, K6ScenarioValidationError{
						field:  "RampingVus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRampingVus()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return K6ScenarioValidationError{
					field:  "RampingVus",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *K6Scenario_ConstantArrivalRate:
		if v == nil {
			err := K6ScenarioValidationError{
				field:  "Executor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetConstantArrivalRate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, K6ScenarioValidationError{
						field:  "ConstantArrivalRate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, K6ScenarioValidationError{
						field:  "ConstantArrivalRate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetConstantArrivalRate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return K6ScenarioValidationError{
					field:  "ConstantArrivalRate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *K6Scenario_RampingArrivalRate:
		if v == nil {
			err := K6ScenarioValidationError{
				field:  "Executor",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetRampingArrivalRate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, K6ScenarioValidationError{
						field:  "RampingArrivalRate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, K6ScenarioValidationError{
						field:  "RampingArrivalRate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRampingArrivalRate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return K6ScenarioValidationError{
					field:  "RampingArrivalRate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return K6ScenarioMultiError(errors)
	}

	return nil
}

// K6ScenarioMultiError is an error wrapping multiple validation errors
// returned by K6Scenario.ValidateAll() if the designated constraints aren't met.
type K6ScenarioMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m K6ScenarioMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m K6ScenarioMultiError) AllErrors() []error { return m }

// K6ScenarioValidationError is the validation error returned by
// K6Scenario.Validate if the designated constraints aren't met.
type K6ScenarioValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e K6ScenarioValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e K6ScenarioValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e K6ScenarioValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e K6ScenarioValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e K6ScenarioValidationError) ErrorName() string { return "K6ScenarioValidationError" }

// Error satisfies the builtin error interface
func (e K6ScenarioValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sK6Scenario.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = K6ScenarioValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = K6ScenarioValidationError{}

// Validate checks the field values on SharedIterations with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SharedIterations) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SharedIterations with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SharedIterationsMultiError, or nil if none found.
func (m *SharedIterations) ValidateAll() error {
	return m.validate(true)
}

func (m *SharedIterations) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Iterations

	// no validation rules for Vus

	if len(errors) > 0 {
		return SharedIterationsMultiError(errors)
	}

	return nil
}

// SharedIterationsMultiError is an error wrapping multiple validation errors
// returned by SharedIterations.ValidateAll() if the designated constraints
// aren't met.
type SharedIterationsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SharedIterationsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SharedIterationsMultiError) AllErrors() []error { return m }

// SharedIterationsValidationError is the validation error returned by
// SharedIterations.Validate if the designated constraints aren't met.
type SharedIterationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SharedIterationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SharedIterationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SharedIterationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SharedIterationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SharedIterationsValidationError) ErrorName() string { return "SharedIterationsValidationError" }

// Error satisfies the builtin error interface
func (e SharedIterationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSharedIterations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SharedIterationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SharedIterationsValidationError{}

// Validate checks the field values on PerVuIterations with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PerVuIterations) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PerVuIterations with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PerVuIterationsMultiError, or nil if none found.
func (m *PerVuIterations) ValidateAll() error {
	return m.validate(true)
}

func (m *PerVuIterations) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vus

	// no validation rules for Iterations

	if len(errors) > 0 {
		return PerVuIterationsMultiError(errors)
	}

	return nil
}

// PerVuIterationsMultiError is an error wrapping multiple validation errors
// returned by PerVuIterations.ValidateAll() if the designated constraints
// aren't met.
type PerVuIterationsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PerVuIterationsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PerVuIterationsMultiError) AllErrors() []error { return m }

// PerVuIterationsValidationError is the validation error returned by
// PerVuIterations.Validate if the designated constraints aren't met.
type PerVuIterationsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PerVuIterationsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PerVuIterationsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PerVuIterationsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PerVuIterationsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PerVuIterationsValidationError) ErrorName() string { return "PerVuIterationsValidationError" }

// Error satisfies the builtin error interface
func (e PerVuIterationsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPerVuIterations.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PerVuIterationsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PerVuIterationsValidationError{}

// Validate checks the field values on ConstantVUs with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConstantVUs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConstantVUs with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConstantVUsMultiError, or
// nil if none found.
func (m *ConstantVUs) ValidateAll() error {
	return m.validate(true)
}

func (m *ConstantVUs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Vus

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConstantVUsValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConstantVUsValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConstantVUsValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConstantVUsMultiError(errors)
	}

	return nil
}

// ConstantVUsMultiError is an error wrapping multiple validation errors
// returned by ConstantVUs.ValidateAll() if the designated constraints aren't met.
type ConstantVUsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConstantVUsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConstantVUsMultiError) AllErrors() []error { return m }

// ConstantVUsValidationError is the validation error returned by
// ConstantVUs.Validate if the designated constraints aren't met.
type ConstantVUsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConstantVUsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConstantVUsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConstantVUsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConstantVUsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConstantVUsValidationError) ErrorName() string { return "ConstantVUsValidationError" }

// Error satisfies the builtin error interface
func (e ConstantVUsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConstantVUs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConstantVUsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConstantVUsValidationError{}

// Validate checks the field values on RampingVUs with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RampingVUs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RampingVUs with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RampingVUsMultiError, or
// nil if none found.
func (m *RampingVUs) ValidateAll() error {
	return m.validate(true)
}

func (m *RampingVUs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartVus

	for idx, item := range m.GetStages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RampingVUsValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RampingVUsValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RampingVUsValidationError{
					field:  fmt.Sprintf("Stages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PreAllocatedVus

	// no validation rules for MaxVus

	if len(errors) > 0 {
		return RampingVUsMultiError(errors)
	}

	return nil
}

// RampingVUsMultiError is an error wrapping multiple validation errors
// returned by RampingVUs.ValidateAll() if the designated constraints aren't met.
type RampingVUsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RampingVUsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RampingVUsMultiError) AllErrors() []error { return m }

// RampingVUsValidationError is the validation error returned by
// RampingVUs.Validate if the designated constraints aren't met.
type RampingVUsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RampingVUsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RampingVUsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RampingVUsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RampingVUsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RampingVUsValidationError) ErrorName() string { return "RampingVUsValidationError" }

// Error satisfies the builtin error interface
func (e RampingVUsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRampingVUs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RampingVUsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RampingVUsValidationError{}

// Validate checks the field values on ConstantArrivalRate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConstantArrivalRate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConstantArrivalRate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConstantArrivalRateMultiError, or nil if none found.
func (m *ConstantArrivalRate) ValidateAll() error {
	return m.validate(true)
}

func (m *ConstantArrivalRate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rate

	if all {
		switch v := interface{}(m.GetTimeUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConstantArrivalRateValidationError{
					field:  "TimeUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConstantArrivalRateValidationError{
					field:  "TimeUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConstantArrivalRateValidationError{
				field:  "TimeUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConstantArrivalRateValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConstantArrivalRateValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConstantArrivalRateValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PreAllocatedVus

	// no validation rules for MaxVus

	if len(errors) > 0 {
		return ConstantArrivalRateMultiError(errors)
	}

	return nil
}

// ConstantArrivalRateMultiError is an error wrapping multiple validation
// errors returned by ConstantArrivalRate.ValidateAll() if the designated
// constraints aren't met.
type ConstantArrivalRateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConstantArrivalRateMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConstantArrivalRateMultiError) AllErrors() []error { return m }

// ConstantArrivalRateValidationError is the validation error returned by
// ConstantArrivalRate.Validate if the designated constraints aren't met.
type ConstantArrivalRateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConstantArrivalRateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConstantArrivalRateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConstantArrivalRateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConstantArrivalRateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConstantArrivalRateValidationError) ErrorName() string {
	return "ConstantArrivalRateValidationError"
}

// Error satisfies the builtin error interface
func (e ConstantArrivalRateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConstantArrivalRate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConstantArrivalRateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConstantArrivalRateValidationError{}

// Validate checks the field values on RampingArrivalRate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RampingArrivalRate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RampingArrivalRate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RampingArrivalRateMultiError, or nil if none found.
func (m *RampingArrivalRate) ValidateAll() error {
	return m.validate(true)
}

func (m *RampingArrivalRate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StartRate

	if all {
		switch v := interface{}(m.GetTimeUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RampingArrivalRateValidationError{
					field:  "TimeUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RampingArrivalRateValidationError{
					field:  "TimeUnit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RampingArrivalRateValidationError{
				field:  "TimeUnit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetStages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RampingArrivalRateValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RampingArrivalRateValidationError{
						field:  fmt.Sprintf("Stages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RampingArrivalRateValidationError{
					field:  fmt.Sprintf("Stages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PreAllocatedVus

	// no validation rules for MaxVus

	if len(errors) > 0 {
		return RampingArrivalRateMultiError(errors)
	}

	return nil
}

// RampingArrivalRateMultiError is an error wrapping multiple validation errors
// returned by RampingArrivalRate.ValidateAll() if the designated constraints
// aren't met.
type RampingArrivalRateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RampingArrivalRateMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RampingArrivalRateMultiError) AllErrors() []error { return m }

// RampingArrivalRateValidationError is the validation error returned by
// RampingArrivalRate.Validate if the designated constraints aren't met.
type RampingArrivalRateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RampingArrivalRateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RampingArrivalRateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RampingArrivalRateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RampingArrivalRateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RampingArrivalRateValidationError) ErrorName() string {
	return "RampingArrivalRateValidationError"
}

// Error satisfies the builtin error interface
func (e RampingArrivalRateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRampingArrivalRate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RampingArrivalRateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RampingArrivalRateValidationError{}

// Validate checks the field values on RampingVUs_VUStage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RampingVUs_VUStage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RampingVUs_VUStage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RampingVUs_VUStageMultiError, or nil if none found.
func (m *RampingVUs_VUStage) ValidateAll() error {
	return m.validate(true)
}

func (m *RampingVUs_VUStage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RampingVUs_VUStageValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RampingVUs_VUStageValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RampingVUs_VUStageValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Target

	if len(errors) > 0 {
		return RampingVUs_VUStageMultiError(errors)
	}

	return nil
}

// RampingVUs_VUStageMultiError is an error wrapping multiple validation errors
// returned by RampingVUs_VUStage.ValidateAll() if the designated constraints
// aren't met.
type RampingVUs_VUStageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RampingVUs_VUStageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RampingVUs_VUStageMultiError) AllErrors() []error { return m }

// RampingVUs_VUStageValidationError is the validation error returned by
// RampingVUs_VUStage.Validate if the designated constraints aren't met.
type RampingVUs_VUStageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RampingVUs_VUStageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RampingVUs_VUStageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RampingVUs_VUStageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RampingVUs_VUStageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RampingVUs_VUStageValidationError) ErrorName() string {
	return "RampingVUs_VUStageValidationError"
}

// Error satisfies the builtin error interface
func (e RampingVUs_VUStageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRampingVUs_VUStage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RampingVUs_VUStageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RampingVUs_VUStageValidationError{}

// Validate checks the field values on RampingArrivalRate_RateStage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RampingArrivalRate_RateStage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RampingArrivalRate_RateStage with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RampingArrivalRate_RateStageMultiError, or nil if none found.
func (m *RampingArrivalRate_RateStage) ValidateAll() error {
	return m.validate(true)
}

func (m *RampingArrivalRate_RateStage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Target

	if all {
		switch v := interface{}(m.GetDuration()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RampingArrivalRate_RateStageValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RampingArrivalRate_RateStageValidationError{
					field:  "Duration",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDuration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RampingArrivalRate_RateStageValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RampingArrivalRate_RateStageMultiError(errors)
	}

	return nil
}

// RampingArrivalRate_RateStageMultiError is an error wrapping multiple
// validation errors returned by RampingArrivalRate_RateStage.ValidateAll() if
// the designated constraints aren't met.
type RampingArrivalRate_RateStageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RampingArrivalRate_RateStageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RampingArrivalRate_RateStageMultiError) AllErrors() []error { return m }

// RampingArrivalRate_RateStageValidationError is the validation error returned
// by RampingArrivalRate_RateStage.Validate if the designated constraints
// aren't met.
type RampingArrivalRate_RateStageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RampingArrivalRate_RateStageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RampingArrivalRate_RateStageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RampingArrivalRate_RateStageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RampingArrivalRate_RateStageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RampingArrivalRate_RateStageValidationError) ErrorName() string {
	return "RampingArrivalRate_RateStageValidationError"
}

// Error satisfies the builtin error interface
func (e RampingArrivalRate_RateStageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRampingArrivalRate_RateStage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RampingArrivalRate_RateStageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RampingArrivalRate_RateStageValidationError{}
