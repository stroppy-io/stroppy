// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: stroppy/cloud.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StroppyStepRun with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StroppyStepRun) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StroppyStepRun with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StroppyStepRunMultiError,
// or nil if none found.
func (m *StroppyStepRun) ValidateAll() error {
	return m.validate(true)
}

func (m *StroppyStepRun) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() == nil {
		err := StroppyStepRunValidationError{
			field:  "Id",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StroppyStepRunValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StroppyStepRunValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StroppyStepRunValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetStroppyRunId() == nil {
		err := StroppyStepRunValidationError{
			field:  "StroppyRunId",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStroppyRunId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StroppyStepRunValidationError{
					field:  "StroppyRunId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StroppyStepRunValidationError{
					field:  "StroppyRunId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStroppyRunId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StroppyStepRunValidationError{
				field:  "StroppyRunId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetContext() == nil {
		err := StroppyStepRunValidationError{
			field:  "Context",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetContext()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StroppyStepRunValidationError{
					field:  "Context",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StroppyStepRunValidationError{
					field:  "Context",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContext()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StroppyStepRunValidationError{
				field:  "Context",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := Status_name[int32(m.GetStatus())]; !ok {
		err := StroppyStepRunValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StroppyStepRunMultiError(errors)
	}

	return nil
}

// StroppyStepRunMultiError is an error wrapping multiple validation errors
// returned by StroppyStepRun.ValidateAll() if the designated constraints
// aren't met.
type StroppyStepRunMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StroppyStepRunMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StroppyStepRunMultiError) AllErrors() []error { return m }

// StroppyStepRunValidationError is the validation error returned by
// StroppyStepRun.Validate if the designated constraints aren't met.
type StroppyStepRunValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StroppyStepRunValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StroppyStepRunValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StroppyStepRunValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StroppyStepRunValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StroppyStepRunValidationError) ErrorName() string { return "StroppyStepRunValidationError" }

// Error satisfies the builtin error interface
func (e StroppyStepRunValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStroppyStepRun.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StroppyStepRunValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StroppyStepRunValidationError{}

// Validate checks the field values on StroppyRun with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StroppyRun) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StroppyRun with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StroppyRunMultiError, or
// nil if none found.
func (m *StroppyRun) ValidateAll() error {
	return m.validate(true)
}

func (m *StroppyRun) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() == nil {
		err := StroppyRunValidationError{
			field:  "Id",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StroppyRunValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StroppyRunValidationError{
					field:  "Id",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StroppyRunValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := Status_name[int32(m.GetStatus())]; !ok {
		err := StroppyRunValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetConfig() == nil {
		err := StroppyRunValidationError{
			field:  "Config",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StroppyRunValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StroppyRunValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StroppyRunValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetCmd()) < 1 {
		err := StroppyRunValidationError{
			field:  "Cmd",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StroppyRunMultiError(errors)
	}

	return nil
}

// StroppyRunMultiError is an error wrapping multiple validation errors
// returned by StroppyRun.ValidateAll() if the designated constraints aren't met.
type StroppyRunMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StroppyRunMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StroppyRunMultiError) AllErrors() []error { return m }

// StroppyRunValidationError is the validation error returned by
// StroppyRun.Validate if the designated constraints aren't met.
type StroppyRunValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StroppyRunValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StroppyRunValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StroppyRunValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StroppyRunValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StroppyRunValidationError) ErrorName() string { return "StroppyRunValidationError" }

// Error satisfies the builtin error interface
func (e StroppyRunValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStroppyRun.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StroppyRunValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StroppyRunValidationError{}
