{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$ref": "#/$defs/.stroppy.ConfigFile",
  "$defs": {
    ".stroppy.BenchmarkDescriptor": {
      "properties": {
        "name": {
          "$ref": "#/$defs/.stroppy.BenchmarkDescriptor.name"
        },
        "workloads": {
          "$ref": "#/$defs/.stroppy.BenchmarkDescriptor.workloads"
        }
      },
      "type": "object",
      "required": [
        "name"
      ],
      "description": "*\n BenchmarkDescriptor defines a complete benchmark consisting of multiple\n steps."
    },
    ".stroppy.BenchmarkDescriptor.name": {
      "type": "string",
      "description": "* Name of the benchmark"
    },
    ".stroppy.BenchmarkDescriptor.workloads": {
      "items": {
        "$ref": "#/$defs/.stroppy.WorkloadDescriptor",
        "description": "* List of steps to execute in the benchmark"
      },
      "type": "array",
      "description": "* List of steps to execute in the benchmark"
    },
    ".stroppy.ColumnDescriptor": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "nullable"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "nullable"
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "primaryKey"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "primaryKey"
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "unique"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "unique"
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "constraint"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "constraint"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "name": {
          "$ref": "#/$defs/.stroppy.ColumnDescriptor.name"
        },
        "sqlType": {
          "$ref": "#/$defs/.stroppy.ColumnDescriptor.sql_type"
        },
        "nullable": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.ColumnDescriptor.nullable"
            }
          ]
        },
        "primaryKey": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.ColumnDescriptor.primary_key"
            }
          ]
        },
        "unique": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.ColumnDescriptor.unique"
            }
          ]
        },
        "constraint": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.ColumnDescriptor.constraint"
            }
          ]
        }
      },
      "type": "object",
      "required": [
        "name",
        "sqlType"
      ],
      "description": "*\n ColumnDescriptor defines the structure of a database column."
    },
    ".stroppy.ColumnDescriptor.constraint": {
      "type": "string",
      "description": "* SQL constraint definition for the column in free form"
    },
    ".stroppy.ColumnDescriptor.name": {
      "type": "string",
      "description": "* Name of the column"
    },
    ".stroppy.ColumnDescriptor.nullable": {
      "type": "boolean",
      "description": "* Whether the column can be NULL"
    },
    ".stroppy.ColumnDescriptor.primary_key": {
      "type": "boolean",
      "description": "*\n Whether the column is part of the primary key.\n Multiple primary keys creates composite primary key."
    },
    ".stroppy.ColumnDescriptor.sql_type": {
      "type": "string",
      "description": "* SQL data type of the column"
    },
    ".stroppy.ColumnDescriptor.unique": {
      "type": "boolean",
      "description": "* Whether the column has a UNIQUE constraint"
    },
    ".stroppy.ConfigFile": {
      "properties": {
        "global": {
          "$ref": "#/$defs/.stroppy.ConfigFile.global"
        },
        "exporters": {
          "$ref": "#/$defs/.stroppy.ConfigFile.exporters"
        },
        "executors": {
          "$ref": "#/$defs/.stroppy.ConfigFile.executors"
        },
        "steps": {
          "$ref": "#/$defs/.stroppy.ConfigFile.steps"
        },
        "sideCars": {
          "$ref": "#/$defs/.stroppy.ConfigFile.side_cars"
        },
        "benchmark": {
          "$ref": "#/$defs/.stroppy.ConfigFile.benchmark"
        }
      },
      "type": "object",
      "required": [
        "global",
        "benchmark"
      ],
      "description": "*\n ConfigFile contains the complete configuration for a benchmark run in file."
    },
    ".stroppy.ConfigFile.benchmark": {
      "$ref": "#/$defs/.stroppy.BenchmarkDescriptor",
      "description": "* BenchmarkDescriptor defines a complete benchmark consisting of multiple steps."
    },
    ".stroppy.ConfigFile.executors": {
      "items": {
        "$ref": "#/$defs/.stroppy.ExecutorConfig",
        "description": "* Executors configuration"
      },
      "type": "array",
      "description": "* Executors configuration"
    },
    ".stroppy.ConfigFile.exporters": {
      "items": {
        "$ref": "#/$defs/.stroppy.ExporterConfig",
        "description": "* Exporters configuration"
      },
      "type": "array",
      "description": "* Exporters configuration"
    },
    ".stroppy.ConfigFile.global": {
      "$ref": "#/$defs/.stroppy.GlobalConfig",
      "description": "* Global configuration"
    },
    ".stroppy.ConfigFile.side_cars": {
      "items": {
        "$ref": "#/$defs/.stroppy.SideCarConfig",
        "description": "* Plugins configuration"
      },
      "type": "array",
      "description": "* Plugins configuration"
    },
    ".stroppy.ConfigFile.steps": {
      "items": {
        "$ref": "#/$defs/.stroppy.Step",
        "description": "* Step to executor mapping configuration"
      },
      "type": "array",
      "description": "* Step to executor mapping configuration"
    },
    ".stroppy.ConstantArrivalRate": {
      "properties": {
        "rate": {
          "$ref": "#/$defs/.stroppy.ConstantArrivalRate.rate"
        },
        "timeUnit": {
          "$ref": "#/$defs/.stroppy.ConstantArrivalRate.time_unit"
        },
        "duration": {
          "$ref": "#/$defs/.stroppy.ConstantArrivalRate.duration"
        },
        "preAllocatedVus": {
          "$ref": "#/$defs/.stroppy.ConstantArrivalRate.pre_allocated_vus"
        },
        "maxVus": {
          "$ref": "#/$defs/.stroppy.ConstantArrivalRate.max_vus"
        }
      },
      "type": "object",
      "required": [
        "rate",
        "timeUnit",
        "duration",
        "preAllocatedVus",
        "maxVus"
      ],
      "description": "*\n ConstantArrivalRate executor configuration.\n Documentation:\n https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/constant-arrival-rate/"
    },
    ".stroppy.ConstantArrivalRate.duration": {
      "type": "string",
      "format": "duration",
      "description": "* Duration of the scenario"
    },
    ".stroppy.ConstantArrivalRate.max_vus": {
      "type": "integer",
      "description": "* Maximum allowed number of VUs if load increases"
    },
    ".stroppy.ConstantArrivalRate.pre_allocated_vus": {
      "type": "integer",
      "description": "* Number of VUs allocated in advance"
    },
    ".stroppy.ConstantArrivalRate.rate": {
      "type": "integer",
      "description": "* Rate of iteration generation (number per time unit)"
    },
    ".stroppy.ConstantArrivalRate.time_unit": {
      "type": "string",
      "format": "duration",
      "description": "* Time unit for the \"rate\" field (e.g., \"1s\")"
    },
    ".stroppy.ConstantVUs": {
      "properties": {
        "vus": {
          "$ref": "#/$defs/.stroppy.ConstantVUs.vus"
        },
        "duration": {
          "$ref": "#/$defs/.stroppy.ConstantVUs.duration"
        }
      },
      "type": "object",
      "required": [
        "vus",
        "duration"
      ],
      "description": "*\n ConstantVUs executor configuration.\n Documentation:\n https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/constant-vus/"
    },
    ".stroppy.ConstantVUs.duration": {
      "type": "string",
      "format": "duration",
      "description": "* Duration of the scenario execution.\n All VUs will start and execute iterations until this time is completed."
    },
    ".stroppy.ConstantVUs.vus": {
      "type": "integer",
      "description": "* Fixed number of virtual users that will be simultaneously active at all\n times"
    },
    ".stroppy.DateTime": {
      "properties": {
        "value": {
          "$ref": "#/$defs/.stroppy.DateTime.value"
        }
      },
      "type": "object",
      "required": [
        "value"
      ],
      "description": "*\n DateTime represents a point in time, independent of any time zone or\n calendar."
    },
    ".stroppy.DateTime.value": {
      "type": "string",
      "format": "date-time",
      "description": "* Timestamp in UTC"
    },
    ".stroppy.Decimal": {
      "properties": {
        "value": {
          "$ref": "#/$defs/.stroppy.Decimal.value"
        }
      },
      "type": "object",
      "required": [
        "value"
      ],
      "description": "*\n Decimal represents an arbitrary-precision decimal number."
    },
    ".stroppy.Decimal.value": {
      "type": "string",
      "description": "* String representation of the decimal number"
    },
    ".stroppy.DriverConfig": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "dbSpecific"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "dbSpecific"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "url": {
          "$ref": "#/$defs/.stroppy.DriverConfig.url"
        },
        "dbSpecific": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.DriverConfig.db_specific"
            }
          ]
        },
        "driverType": {
          "$ref": "#/$defs/.stroppy.DriverConfig.driver_type"
        }
      },
      "type": "object",
      "required": [
        "url",
        "driverType"
      ],
      "description": "*\n DriverConfig contains configuration for connecting to a database driver.\n It includes the driver plugin path, connection URL, and database-specific settings."
    },
    ".stroppy.DriverConfig.DriverType": {
      "type": "string",
      "enum": [
        "DRIVER_TYPE_UNSPECIFIED",
        "DRIVER_TYPE_POSTGRES"
      ]
    },
    ".stroppy.DriverConfig.db_specific": {
      "$ref": "#/$defs/.stroppy.Value.Struct",
      "description": "* Database-specific configuration options"
    },
    ".stroppy.DriverConfig.driver_type": {
      "$ref": "#/$defs/.stroppy.DriverConfig.DriverType",
      "description": "* Name/Type of chosen driver"
    },
    ".stroppy.DriverConfig.url": {
      "type": "string",
      "description": "* Database connection URL"
    },
    ".stroppy.ExecutorConfig": {
      "properties": {
        "name": {
          "$ref": "#/$defs/.stroppy.ExecutorConfig.name"
        },
        "k6": {
          "$ref": "#/$defs/.stroppy.ExecutorConfig.k6"
        }
      },
      "type": "object",
      "required": [
        "name",
        "k6"
      ],
      "description": "*\n ExecutorConfig contains configuration for an executor."
    },
    ".stroppy.ExecutorConfig.k6": {
      "$ref": "#/$defs/.stroppy.K6Options",
      "description": "* Configuration for the executor"
    },
    ".stroppy.ExecutorConfig.name": {
      "type": "string",
      "description": "* Name of the executor"
    },
    ".stroppy.ExporterConfig": {
      "properties": {
        "name": {
          "$ref": "#/$defs/.stroppy.ExporterConfig.name"
        },
        "otlpExport": {
          "$ref": "#/$defs/.stroppy.ExporterConfig.otlp_export"
        }
      },
      "type": "object",
      "required": [
        "name",
        "otlpExport"
      ],
      "description": "*\n OtlpExporterConfig contains named configuration for an OTLP exporter."
    },
    ".stroppy.ExporterConfig.name": {
      "type": "string",
      "description": "* Name of the OTLP exporter"
    },
    ".stroppy.ExporterConfig.otlp_export": {
      "$ref": "#/$defs/.stroppy.OtlpExport",
      "description": "* Configuration for the OTLP exporter"
    },
    ".stroppy.Generation.Alphabet": {
      "properties": {
        "ranges": {
          "$ref": "#/$defs/.stroppy.Generation.Alphabet.ranges"
        }
      },
      "type": "object",
      "description": "*\n Alphabet defines character ranges for string generation."
    },
    ".stroppy.Generation.Alphabet.ranges": {
      "items": {
        "$ref": "#/$defs/.stroppy.Generation.Range.UInt32",
        "description": "* List of character ranges for this alphabet"
      },
      "type": "array",
      "description": "* List of character ranges for this alphabet"
    },
    ".stroppy.Generation.Distribution": {
      "properties": {
        "type": {
          "$ref": "#/$defs/.stroppy.Generation.Distribution.type"
        },
        "screw": {
          "$ref": "#/$defs/.stroppy.Generation.Distribution.screw"
        }
      },
      "type": "object",
      "required": [
        "type",
        "screw"
      ],
      "description": "*\n Distribution defines the statistical distribution for value generation."
    },
    ".stroppy.Generation.Distribution.DistributionType": {
      "type": "string",
      "enum": [
        "NORMAL",
        "UNIFORM",
        "ZIPF"
      ]
    },
    ".stroppy.Generation.Distribution.screw": {
      "type": "number",
      "description": "* Distribution parameter (e.g., standard deviation for normal\n distribution)"
    },
    ".stroppy.Generation.Distribution.type": {
      "$ref": "#/$defs/.stroppy.Generation.Distribution.DistributionType",
      "description": "* Type of distribution to use"
    },
    ".stroppy.Generation.Range.AnyString": {
      "properties": {
        "min": {
          "$ref": "#/$defs/.stroppy.Generation.Range.AnyString.min"
        },
        "max": {
          "$ref": "#/$defs/.stroppy.Generation.Range.AnyString.max"
        }
      },
      "type": "object",
      "required": [
        "min",
        "max"
      ],
      "description": "* Range for string values that can be parsed into other types"
    },
    ".stroppy.Generation.Range.AnyString.max": {
      "type": "string",
      "description": "* Maximum value (inclusive)"
    },
    ".stroppy.Generation.Range.AnyString.min": {
      "type": "string",
      "description": "* Minimum value (inclusive)"
    },
    ".stroppy.Generation.Range.Bool": {
      "properties": {
        "ratio": {
          "$ref": "#/$defs/.stroppy.Generation.Range.Bool.ratio"
        }
      },
      "type": "object",
      "required": [
        "ratio"
      ]
    },
    ".stroppy.Generation.Range.Bool.ratio": {
      "type": "number"
    },
    ".stroppy.Generation.Range.DateTime": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "string"
              ]
            },
            {
              "required": [
                "timestampPb"
              ]
            },
            {
              "required": [
                "timestamp"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "string"
                    ]
                  },
                  {
                    "required": [
                      "timestampPb"
                    ]
                  },
                  {
                    "required": [
                      "timestamp"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "string": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Range.DateTime.string"
            }
          ]
        },
        "timestampPb": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Range.DateTime.timestamp_pb"
            }
          ]
        },
        "timestamp": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Range.DateTime.timestamp"
            }
          ]
        }
      },
      "type": "object",
      "description": "* Range for date/time values"
    },
    ".stroppy.Generation.Range.DateTime.TimestampPb": {
      "properties": {
        "min": {
          "$ref": "#/$defs/.stroppy.Generation.Range.DateTime.TimestampPb.min"
        },
        "max": {
          "$ref": "#/$defs/.stroppy.Generation.Range.DateTime.TimestampPb.max"
        }
      },
      "type": "object",
      "required": [
        "min",
        "max"
      ],
      "description": "* Protocol Buffers timestamp range"
    },
    ".stroppy.Generation.Range.DateTime.TimestampPb.max": {
      "type": "string",
      "format": "date-time",
      "description": "* Maximum timestamp (inclusive)"
    },
    ".stroppy.Generation.Range.DateTime.TimestampPb.min": {
      "type": "string",
      "format": "date-time",
      "description": "* Minimum timestamp (inclusive)"
    },
    ".stroppy.Generation.Range.DateTime.TimestampUnix": {
      "properties": {
        "min": {
          "$ref": "#/$defs/.stroppy.Generation.Range.DateTime.TimestampUnix.min"
        },
        "max": {
          "$ref": "#/$defs/.stroppy.Generation.Range.DateTime.TimestampUnix.max"
        }
      },
      "type": "object",
      "required": [
        "min",
        "max"
      ],
      "description": "* Unix timestamp range"
    },
    ".stroppy.Generation.Range.DateTime.TimestampUnix.max": {
      "type": "integer",
      "description": "* Maximum Unix timestamp (inclusive)"
    },
    ".stroppy.Generation.Range.DateTime.TimestampUnix.min": {
      "type": "integer",
      "description": "* Minimum Unix timestamp (inclusive)"
    },
    ".stroppy.Generation.Range.DateTime.string": {
      "$ref": "#/$defs/.stroppy.Generation.Range.AnyString",
      "description": "* String-based range (ISO 8601 format)"
    },
    ".stroppy.Generation.Range.DateTime.timestamp": {
      "$ref": "#/$defs/.stroppy.Generation.Range.DateTime.TimestampUnix",
      "description": "* Unix timestamp range"
    },
    ".stroppy.Generation.Range.DateTime.timestamp_pb": {
      "$ref": "#/$defs/.stroppy.Generation.Range.DateTime.TimestampPb",
      "description": "* Protocol Buffers timestamp range"
    },
    ".stroppy.Generation.Range.DecimalRange": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "float"
              ]
            },
            {
              "required": [
                "double"
              ]
            },
            {
              "required": [
                "string"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "float"
                    ]
                  },
                  {
                    "required": [
                      "double"
                    ]
                  },
                  {
                    "required": [
                      "string"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "float": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Range.DecimalRange.float"
            }
          ]
        },
        "double": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Range.DecimalRange.double"
            }
          ]
        },
        "string": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Range.DecimalRange.string"
            }
          ]
        }
      },
      "type": "object",
      "description": "* Range for decimal numbers"
    },
    ".stroppy.Generation.Range.DecimalRange.double": {
      "$ref": "#/$defs/.stroppy.Generation.Range.Double",
      "description": "* Double-based range"
    },
    ".stroppy.Generation.Range.DecimalRange.float": {
      "$ref": "#/$defs/.stroppy.Generation.Range.Float",
      "description": "* Float-based range"
    },
    ".stroppy.Generation.Range.DecimalRange.string": {
      "$ref": "#/$defs/.stroppy.Generation.Range.AnyString",
      "description": "* String-bsed range (supports scientific notation)"
    },
    ".stroppy.Generation.Range.Double": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "min"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "min"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "min": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Range.Double.min"
            }
          ]
        },
        "max": {
          "$ref": "#/$defs/.stroppy.Generation.Range.Double.max"
        }
      },
      "type": "object",
      "required": [
        "max"
      ],
      "description": "* Range for 64-bit floating point numbers"
    },
    ".stroppy.Generation.Range.Double.max": {
      "type": "number",
      "description": "* Maximum value (inclusive)"
    },
    ".stroppy.Generation.Range.Double.min": {
      "type": "number",
      "description": "* Minimum value (inclusive)"
    },
    ".stroppy.Generation.Range.Float": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "min"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "min"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "min": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Range.Float.min"
            }
          ]
        },
        "max": {
          "$ref": "#/$defs/.stroppy.Generation.Range.Float.max"
        }
      },
      "type": "object",
      "required": [
        "max"
      ],
      "description": "* Range for 32-bit floating point numbers"
    },
    ".stroppy.Generation.Range.Float.max": {
      "type": "number",
      "description": "* Maximum value (inclusive)"
    },
    ".stroppy.Generation.Range.Float.min": {
      "type": "number",
      "description": "* Minimum value (inclusive)"
    },
    ".stroppy.Generation.Range.Int32": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "min"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "min"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "min": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Range.Int32.min"
            }
          ]
        },
        "max": {
          "$ref": "#/$defs/.stroppy.Generation.Range.Int32.max"
        }
      },
      "type": "object",
      "required": [
        "max"
      ],
      "description": "* Range for 32-bit signed integers"
    },
    ".stroppy.Generation.Range.Int32.max": {
      "type": "integer",
      "description": "* Maximum value (inclusive)"
    },
    ".stroppy.Generation.Range.Int32.min": {
      "type": "integer",
      "description": "* Minimum value (inclusive)"
    },
    ".stroppy.Generation.Range.Int64": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "min"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "min"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "min": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Range.Int64.min"
            }
          ]
        },
        "max": {
          "$ref": "#/$defs/.stroppy.Generation.Range.Int64.max"
        }
      },
      "type": "object",
      "required": [
        "max"
      ],
      "description": "* Range for 64-bit signed integers"
    },
    ".stroppy.Generation.Range.Int64.max": {
      "type": "string",
      "format": "int64",
      "description": "* Maximum value (inclusive)"
    },
    ".stroppy.Generation.Range.Int64.min": {
      "type": "string",
      "format": "int64",
      "description": "* Minimum value (inclusive)"
    },
    ".stroppy.Generation.Range.String": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "alphabet"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "alphabet"
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "minLen"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "minLen"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "alphabet": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Range.String.alphabet"
            }
          ]
        },
        "minLen": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Range.String.min_len"
            }
          ]
        },
        "maxLen": {
          "$ref": "#/$defs/.stroppy.Generation.Range.String.max_len"
        }
      },
      "type": "object",
      "required": [
        "maxLen"
      ]
    },
    ".stroppy.Generation.Range.String.alphabet": {
      "$ref": "#/$defs/.stroppy.Generation.Alphabet",
      "description": "* Character set to use for generation"
    },
    ".stroppy.Generation.Range.String.max_len": {
      "type": "string",
      "format": "int64"
    },
    ".stroppy.Generation.Range.String.min_len": {
      "type": "string",
      "format": "int64"
    },
    ".stroppy.Generation.Range.UInt32": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "min"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "min"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "min": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Range.UInt32.min"
            }
          ]
        },
        "max": {
          "$ref": "#/$defs/.stroppy.Generation.Range.UInt32.max"
        }
      },
      "type": "object",
      "required": [
        "max"
      ],
      "description": "* Range for 32-bit unsigned integers"
    },
    ".stroppy.Generation.Range.UInt32.max": {
      "type": "integer",
      "description": "* Maximum value (inclusive)"
    },
    ".stroppy.Generation.Range.UInt32.min": {
      "type": "integer",
      "description": "* Minimum value (inclusive)"
    },
    ".stroppy.Generation.Range.UInt64": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "min"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "min"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "min": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Range.UInt64.min"
            }
          ]
        },
        "max": {
          "$ref": "#/$defs/.stroppy.Generation.Range.UInt64.max"
        }
      },
      "type": "object",
      "required": [
        "max"
      ],
      "description": "* Range for 64-bit unsigned integers"
    },
    ".stroppy.Generation.Range.UInt64.max": {
      "type": "string",
      "format": "int64",
      "description": "* Maximum value (inclusive)"
    },
    ".stroppy.Generation.Range.UInt64.min": {
      "type": "string",
      "format": "int64",
      "description": "* Minimum value (inclusive)"
    },
    ".stroppy.Generation.Rule": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "int32Range"
              ]
            },
            {
              "required": [
                "int64Range"
              ]
            },
            {
              "required": [
                "uint32Range"
              ]
            },
            {
              "required": [
                "uint64Range"
              ]
            },
            {
              "required": [
                "floatRange"
              ]
            },
            {
              "required": [
                "doubleRange"
              ]
            },
            {
              "required": [
                "decimalRange"
              ]
            },
            {
              "required": [
                "stringRange"
              ]
            },
            {
              "required": [
                "boolRange"
              ]
            },
            {
              "required": [
                "datetimeRange"
              ]
            },
            {
              "required": [
                "int32Const"
              ]
            },
            {
              "required": [
                "int64Const"
              ]
            },
            {
              "required": [
                "uint32Const"
              ]
            },
            {
              "required": [
                "uint64Const"
              ]
            },
            {
              "required": [
                "floatConst"
              ]
            },
            {
              "required": [
                "doubleConst"
              ]
            },
            {
              "required": [
                "decimalConst"
              ]
            },
            {
              "required": [
                "stringConst"
              ]
            },
            {
              "required": [
                "boolConst"
              ]
            },
            {
              "required": [
                "datetimeConst"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "int32Range"
                    ]
                  },
                  {
                    "required": [
                      "int64Range"
                    ]
                  },
                  {
                    "required": [
                      "uint32Range"
                    ]
                  },
                  {
                    "required": [
                      "uint64Range"
                    ]
                  },
                  {
                    "required": [
                      "floatRange"
                    ]
                  },
                  {
                    "required": [
                      "doubleRange"
                    ]
                  },
                  {
                    "required": [
                      "decimalRange"
                    ]
                  },
                  {
                    "required": [
                      "stringRange"
                    ]
                  },
                  {
                    "required": [
                      "boolRange"
                    ]
                  },
                  {
                    "required": [
                      "datetimeRange"
                    ]
                  },
                  {
                    "required": [
                      "int32Const"
                    ]
                  },
                  {
                    "required": [
                      "int64Const"
                    ]
                  },
                  {
                    "required": [
                      "uint32Const"
                    ]
                  },
                  {
                    "required": [
                      "uint64Const"
                    ]
                  },
                  {
                    "required": [
                      "floatConst"
                    ]
                  },
                  {
                    "required": [
                      "doubleConst"
                    ]
                  },
                  {
                    "required": [
                      "decimalConst"
                    ]
                  },
                  {
                    "required": [
                      "stringConst"
                    ]
                  },
                  {
                    "required": [
                      "boolConst"
                    ]
                  },
                  {
                    "required": [
                      "datetimeConst"
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "distribution"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "distribution"
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "nullPercentage"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "nullPercentage"
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "unique"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "unique"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "int32Range": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Rule.int32_range"
            }
          ]
        },
        "int64Range": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Rule.int64_range"
            }
          ]
        },
        "uint32Range": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Rule.uint32_range"
            }
          ]
        },
        "uint64Range": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Rule.uint64_range"
            }
          ]
        },
        "floatRange": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Rule.float_range"
            }
          ]
        },
        "doubleRange": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Rule.double_range"
            }
          ]
        },
        "decimalRange": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Rule.decimal_range"
            }
          ]
        },
        "stringRange": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Rule.string_range"
            }
          ]
        },
        "boolRange": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Rule.bool_range"
            }
          ]
        },
        "datetimeRange": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Rule.datetime_range"
            }
          ]
        },
        "int32Const": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Rule.int32_const"
            }
          ]
        },
        "int64Const": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Rule.int64_const"
            }
          ]
        },
        "uint32Const": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Rule.uint32_const"
            }
          ]
        },
        "uint64Const": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Rule.uint64_const"
            }
          ]
        },
        "floatConst": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Rule.float_const"
            }
          ]
        },
        "doubleConst": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Rule.double_const"
            }
          ]
        },
        "decimalConst": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Rule.decimal_const"
            }
          ]
        },
        "stringConst": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Rule.string_const"
            }
          ]
        },
        "boolConst": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Rule.bool_const"
            }
          ]
        },
        "datetimeConst": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Rule.datetime_const"
            }
          ]
        },
        "distribution": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Rule.distribution"
            }
          ]
        },
        "nullPercentage": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Rule.null_percentage"
            }
          ]
        },
        "unique": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Generation.Rule.unique"
            }
          ]
        }
      },
      "type": "object",
      "description": "TODO: Add range rule to limit amount of random value.\n       So limit 5 will generate randoms (2, 1, 3, 3, 5) and then stops.\n TODO: Add limit continuation politics.\n       If generator stopped it can behave differently after it.\n       repeat - strart itself from again.\n       bounce - start itself in backward direction.\n       max - produce max value.\n       min - produce min value.\n       null - nulls if allowed.\n TODO: add control over random repeatability.\n       Now every generator with the same params will generate an identical\n       sequence. Two gens with (min: 1, max: 10) will generate\n       1, 5, 9, 5... parallely as seed is common for every gen. It's do a\n       random data with the same gen definitions not so random\n       occasionally.\n*\n Rule defines generation rules for a specific data type."
    },
    ".stroppy.Generation.Rule.bool_const": {
      "type": "boolean",
      "description": "* Fixed boolean value."
    },
    ".stroppy.Generation.Rule.bool_range": {
      "$ref": "#/$defs/.stroppy.Generation.Range.Bool",
      "description": "* Boolean constraints (e.g., force true/false)."
    },
    ".stroppy.Generation.Rule.datetime_const": {
      "$ref": "#/$defs/.stroppy.DateTime",
      "description": "* Fixed date/time value."
    },
    ".stroppy.Generation.Rule.datetime_range": {
      "$ref": "#/$defs/.stroppy.Generation.Range.DateTime",
      "description": "* Date/time window (e.g., not before/after)."
    },
    ".stroppy.Generation.Rule.decimal_const": {
      "$ref": "#/$defs/.stroppy.Decimal",
      "description": "* Fixed decimal value."
    },
    ".stroppy.Generation.Rule.decimal_range": {
      "$ref": "#/$defs/.stroppy.Generation.Range.DecimalRange",
      "description": "* Arbitrary‑precision decimal bounds for money/ratios."
    },
    ".stroppy.Generation.Rule.distribution": {
      "$ref": "#/$defs/.stroppy.Generation.Distribution",
      "description": "* Shape of randomness; Normal by default"
    },
    ".stroppy.Generation.Rule.double_const": {
      "type": "number",
      "description": "* Fixed 64‑bit float value."
    },
    ".stroppy.Generation.Rule.double_range": {
      "$ref": "#/$defs/.stroppy.Generation.Range.Double",
      "description": "* 64‑bit float bounds for high‑precision numeric data."
    },
    ".stroppy.Generation.Rule.float_const": {
      "type": "number",
      "description": "* Fixed 32‑bit float value."
    },
    ".stroppy.Generation.Rule.float_range": {
      "$ref": "#/$defs/.stroppy.Generation.Range.Float",
      "description": "* 32‑bit float bounds; beware precision for currency."
    },
    ".stroppy.Generation.Rule.int32_const": {
      "type": "integer",
      "description": "Constants\n* Fixed 32‑bit integer value."
    },
    ".stroppy.Generation.Rule.int32_range": {
      "$ref": "#/$defs/.stroppy.Generation.Range.Int32",
      "description": "Numeric ranges (frequent)\n* Signed 32‑bit integer range (inclusive). Example: 1..100 for\n IDs."
    },
    ".stroppy.Generation.Rule.int64_const": {
      "type": "string",
      "format": "int64",
      "description": "* Fixed 64‑bit integer value."
    },
    ".stroppy.Generation.Rule.int64_range": {
      "$ref": "#/$defs/.stroppy.Generation.Range.Int64",
      "description": "* Signed 64‑bit integer range for large counters or timestamps."
    },
    ".stroppy.Generation.Rule.null_percentage": {
      "type": "integer",
      "description": "* Percentage of nulls to inject [0..100]; 0 by default"
    },
    ".stroppy.Generation.Rule.string_const": {
      "type": "string",
      "description": "* Fixed string value."
    },
    ".stroppy.Generation.Rule.string_range": {
      "$ref": "#/$defs/.stroppy.Generation.Range.String",
      "description": "Non‑numeric ranges\n* String constraints (length, alphabet)."
    },
    ".stroppy.Generation.Rule.uint32_const": {
      "type": "integer",
      "description": "* Fixed unsigned 32‑bit integer value."
    },
    ".stroppy.Generation.Rule.uint32_range": {
      "$ref": "#/$defs/.stroppy.Generation.Range.UInt32",
      "description": "* Unsigned 32‑bit integer range; use for sizes/indices."
    },
    ".stroppy.Generation.Rule.uint64_const": {
      "type": "string",
      "format": "int64",
      "description": "* Fixed unsigned 64‑bit integer value."
    },
    ".stroppy.Generation.Rule.uint64_range": {
      "$ref": "#/$defs/.stroppy.Generation.Range.UInt64",
      "description": "* Unsigned 64‑bit integer range; use for large sizes."
    },
    ".stroppy.Generation.Rule.unique": {
      "type": "boolean",
      "description": "* Enforce uniqueness across generated values;\n Linear sequence for ranges"
    },
    ".stroppy.GlobalConfig": {
      "properties": {
        "version": {
          "$ref": "#/$defs/.stroppy.GlobalConfig.version"
        },
        "runId": {
          "$ref": "#/$defs/.stroppy.GlobalConfig.run_id"
        },
        "seed": {
          "$ref": "#/$defs/.stroppy.GlobalConfig.seed"
        },
        "metadata": {
          "$ref": "#/$defs/.stroppy.GlobalConfig.metadata"
        },
        "driver": {
          "$ref": "#/$defs/.stroppy.GlobalConfig.driver"
        },
        "logger": {
          "$ref": "#/$defs/.stroppy.GlobalConfig.logger"
        }
      },
      "type": "object",
      "required": [
        "version",
        "runId",
        "seed",
        "driver",
        "logger"
      ]
    },
    ".stroppy.GlobalConfig.driver": {
      "$ref": "#/$defs/.stroppy.DriverConfig",
      "description": "* Database driver configuration"
    },
    ".stroppy.GlobalConfig.logger": {
      "$ref": "#/$defs/.stroppy.LoggerConfig",
      "description": "* Logging configuration"
    },
    ".stroppy.GlobalConfig.metadata": {
      "additionalProperties": {
        "type": "string"
      },
      "type": "object",
      "description": "* Arbitrary metadata, may be passed to result labels and json output"
    },
    ".stroppy.GlobalConfig.run_id": {
      "type": "string",
      "description": "*\n Run identifier for reproducible test runs or debugging\n If set to \"generate()\" stroppy eval ulid for run_id"
    },
    ".stroppy.GlobalConfig.seed": {
      "type": "string",
      "format": "int64",
      "description": "* Random seed for reproducible test runs"
    },
    ".stroppy.GlobalConfig.version": {
      "type": "string",
      "description": "*\n Version of the configuration format e.g. proto files version.\n This is used for backward compatibility of configs\n and will be set automatically from binary run if not present."
    },
    ".stroppy.IndexDescriptor": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "dbSpecific"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "dbSpecific"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "name": {
          "$ref": "#/$defs/.stroppy.IndexDescriptor.name"
        },
        "columns": {
          "$ref": "#/$defs/.stroppy.IndexDescriptor.columns"
        },
        "type": {
          "$ref": "#/$defs/.stroppy.IndexDescriptor.type"
        },
        "unique": {
          "$ref": "#/$defs/.stroppy.IndexDescriptor.unique"
        },
        "dbSpecific": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.IndexDescriptor.db_specific"
            }
          ]
        }
      },
      "type": "object",
      "required": [
        "name",
        "type",
        "unique"
      ],
      "description": "*\n IndexDescriptor defines the structure of a database index."
    },
    ".stroppy.IndexDescriptor.columns": {
      "items": {
        "type": "string",
        "description": "* List of column names that are part of this index"
      },
      "type": "array",
      "description": "* List of column names that are part of this index"
    },
    ".stroppy.IndexDescriptor.db_specific": {
      "$ref": "#/$defs/.stroppy.Value.Struct",
      "description": "* Database-specific index properties"
    },
    ".stroppy.IndexDescriptor.name": {
      "type": "string",
      "description": "* Name of the index"
    },
    ".stroppy.IndexDescriptor.type": {
      "type": "string",
      "description": "* Type of index (e.g., BTREE, HASH, etc.)"
    },
    ".stroppy.IndexDescriptor.unique": {
      "type": "boolean",
      "description": "* Whether this is a unique index"
    },
    ".stroppy.InsertDescriptor": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "method"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "method"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "name": {
          "$ref": "#/$defs/.stroppy.InsertDescriptor.name"
        },
        "tableName": {
          "$ref": "#/$defs/.stroppy.InsertDescriptor.table_name"
        },
        "method": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.InsertDescriptor.method"
            }
          ]
        },
        "params": {
          "$ref": "#/$defs/.stroppy.InsertDescriptor.params"
        },
        "groups": {
          "$ref": "#/$defs/.stroppy.InsertDescriptor.groups"
        }
      },
      "type": "object",
      "required": [
        "name",
        "tableName"
      ],
      "description": "*\n InsertDescription defines data to fill database."
    },
    ".stroppy.InsertDescriptor.groups": {
      "items": {
        "$ref": "#/$defs/.stroppy.QueryParamGroup",
        "description": "* Groups of the columns"
      },
      "type": "array",
      "description": "* Groups of the columns"
    },
    ".stroppy.InsertDescriptor.method": {
      "$ref": "#/$defs/.stroppy.InsertMethod",
      "description": "* Allows to use a percise method of data insertion"
    },
    ".stroppy.InsertDescriptor.name": {
      "type": "string",
      "description": "* Name of the Insert query"
    },
    ".stroppy.InsertDescriptor.params": {
      "items": {
        "$ref": "#/$defs/.stroppy.QueryParamDescriptor",
        "description": "*\n Parameters used in the insert.\n Names threated as db columns names, regexp is ignored."
      },
      "type": "array",
      "description": "*\n Parameters used in the insert.\n Names threated as db columns names, regexp is ignored."
    },
    ".stroppy.InsertDescriptor.table_name": {
      "type": "string",
      "description": "* Which table to insert the values"
    },
    ".stroppy.InsertMethod": {
      "type": "string",
      "enum": [
        "PLAIN_QUERY",
        "COPY_FROM"
      ],
      "description": "* Data insertion method"
    },
    ".stroppy.K6Options": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "setupTimeout"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "setupTimeout"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "k6Args": {
          "$ref": "#/$defs/.stroppy.K6Options.k6_args"
        },
        "setupTimeout": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.K6Options.setup_timeout"
            }
          ]
        },
        "scenario": {
          "$ref": "#/$defs/.stroppy.K6Options.scenario"
        }
      },
      "type": "object",
      "required": [
        "scenario"
      ],
      "description": "*\n K6Executor contains configuration for k6 load testing tool integration.\n It contains paths to the k6 binary and the k6 test script, as well as\n additional arguments to pass to the k6 binary."
    },
    ".stroppy.K6Options.k6_args": {
      "items": {
        "type": "string",
        "description": "* Additional arguments to pass to the k6 binary"
      },
      "type": "array",
      "description": "* Additional arguments to pass to the k6 binary"
    },
    ".stroppy.K6Options.scenario": {
      "$ref": "#/$defs/.stroppy.K6Scenario",
      "description": "* Scenario configuration"
    },
    ".stroppy.K6Options.setup_timeout": {
      "type": "string",
      "format": "duration",
      "description": "* Timeout for k6 setup phase"
    },
    ".stroppy.K6Scenario": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "sharedIterations"
              ]
            },
            {
              "required": [
                "perVuIterations"
              ]
            },
            {
              "required": [
                "constantVus"
              ]
            },
            {
              "required": [
                "rampingVus"
              ]
            },
            {
              "required": [
                "constantArrivalRate"
              ]
            },
            {
              "required": [
                "rampingArrivalRate"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "sharedIterations"
                    ]
                  },
                  {
                    "required": [
                      "perVuIterations"
                    ]
                  },
                  {
                    "required": [
                      "constantVus"
                    ]
                  },
                  {
                    "required": [
                      "rampingVus"
                    ]
                  },
                  {
                    "required": [
                      "constantArrivalRate"
                    ]
                  },
                  {
                    "required": [
                      "rampingArrivalRate"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "maxDuration": {
          "$ref": "#/$defs/.stroppy.K6Scenario.max_duration"
        },
        "sharedIterations": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.K6Scenario.shared_iterations"
            }
          ]
        },
        "perVuIterations": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.K6Scenario.per_vu_iterations"
            }
          ]
        },
        "constantVus": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.K6Scenario.constant_vus"
            }
          ]
        },
        "rampingVus": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.K6Scenario.ramping_vus"
            }
          ]
        },
        "constantArrivalRate": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.K6Scenario.constant_arrival_rate"
            }
          ]
        },
        "rampingArrivalRate": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.K6Scenario.ramping_arrival_rate"
            }
          ]
        }
      },
      "type": "object",
      "required": [
        "maxDuration"
      ],
      "description": "*\n Scenario defines the overall test scenario configuration.\n It contains user tags, maximum duration, and executor configuration.\n Documentation: https://grafana.com/docs/k6/latest/using-k6/scenarios/"
    },
    ".stroppy.K6Scenario.constant_arrival_rate": {
      "$ref": "#/$defs/.stroppy.ConstantArrivalRate",
      "description": "* Constant arrival rate executor"
    },
    ".stroppy.K6Scenario.constant_vus": {
      "$ref": "#/$defs/.stroppy.ConstantVUs",
      "description": "* Constant VUs executor"
    },
    ".stroppy.K6Scenario.max_duration": {
      "type": "string",
      "format": "duration",
      "description": "* Maximum duration for scenario execution.\n Used as a time limiter if main parameters (iterations, stages, duration)\n do not complete in time."
    },
    ".stroppy.K6Scenario.per_vu_iterations": {
      "$ref": "#/$defs/.stroppy.PerVuIterations",
      "description": "* Per-VU iterations executor"
    },
    ".stroppy.K6Scenario.ramping_arrival_rate": {
      "$ref": "#/$defs/.stroppy.RampingArrivalRate",
      "description": "* Ramping arrival rate executor"
    },
    ".stroppy.K6Scenario.ramping_vus": {
      "$ref": "#/$defs/.stroppy.RampingVUs",
      "description": "* Ramping VUs executor"
    },
    ".stroppy.K6Scenario.shared_iterations": {
      "$ref": "#/$defs/.stroppy.SharedIterations",
      "description": "* Shared iterations executor"
    },
    ".stroppy.LoggerConfig": {
      "properties": {
        "logLevel": {
          "$ref": "#/$defs/.stroppy.LoggerConfig.log_level"
        },
        "logMode": {
          "$ref": "#/$defs/.stroppy.LoggerConfig.log_mode"
        }
      },
      "type": "object",
      "required": [
        "logLevel",
        "logMode"
      ],
      "description": "*\n LoggerConfig contains configuration for the logging system.\n It controls log levels and output formatting."
    },
    ".stroppy.LoggerConfig.LogLevel": {
      "type": "string",
      "enum": [
        "LOG_LEVEL_DEBUG",
        "LOG_LEVEL_INFO",
        "LOG_LEVEL_WARN",
        "LOG_LEVEL_ERROR",
        "LOG_LEVEL_FATAL"
      ]
    },
    ".stroppy.LoggerConfig.LogMode": {
      "type": "string",
      "enum": [
        "LOG_MODE_DEVELOPMENT",
        "LOG_MODE_PRODUCTION"
      ]
    },
    ".stroppy.LoggerConfig.log_level": {
      "$ref": "#/$defs/.stroppy.LoggerConfig.LogLevel",
      "description": "* Minimum log level to output"
    },
    ".stroppy.LoggerConfig.log_mode": {
      "$ref": "#/$defs/.stroppy.LoggerConfig.LogMode",
      "description": "* Logging mode (development or production)"
    },
    ".stroppy.OtlpExport": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "otlpGrpcEndpoint"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "otlpGrpcEndpoint"
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "otlpHttpEndpoint"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "otlpHttpEndpoint"
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "otlpHttpExporterUrlPath"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "otlpHttpExporterUrlPath"
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "otlpEndpointInsecure"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "otlpEndpointInsecure"
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "otlpHeaders"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "otlpHeaders"
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "otlpMetricsPrefix"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "otlpMetricsPrefix"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "otlpGrpcEndpoint": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.OtlpExport.otlp_grpc_endpoint"
            }
          ]
        },
        "otlpHttpEndpoint": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.OtlpExport.otlp_http_endpoint"
            }
          ]
        },
        "otlpHttpExporterUrlPath": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.OtlpExport.otlp_http_exporter_url_path"
            }
          ]
        },
        "otlpEndpointInsecure": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.OtlpExport.otlp_endpoint_insecure"
            }
          ]
        },
        "otlpHeaders": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.OtlpExport.otlp_headers"
            }
          ]
        },
        "otlpMetricsPrefix": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.OtlpExport.otlp_metrics_prefix"
            }
          ]
        }
      },
      "type": "object",
      "description": "*\n OtlpExport contains configuration for exporting metrics via OpenTelemetry\n Protocol (OTLP). It specifies the endpoint and metrics prefix for telemetry\n data export."
    },
    ".stroppy.OtlpExport.otlp_endpoint_insecure": {
      "type": "boolean",
      "description": "* Disable transport security for the exporter"
    },
    ".stroppy.OtlpExport.otlp_grpc_endpoint": {
      "type": "string",
      "description": "* gRPC endpoint for OpenTelemetry collector"
    },
    ".stroppy.OtlpExport.otlp_headers": {
      "type": "string",
      "description": "* Headers for otlp requests e.g. Authorization=..."
    },
    ".stroppy.OtlpExport.otlp_http_endpoint": {
      "type": "string",
      "description": "* HTTP endpoint for the OpenTelemetry collector"
    },
    ".stroppy.OtlpExport.otlp_http_exporter_url_path": {
      "type": "string",
      "description": "* HTTP exporter path. Default is '/v1/metrics'"
    },
    ".stroppy.OtlpExport.otlp_metrics_prefix": {
      "type": "string",
      "description": "* Prefix to be added to all exported metrics"
    },
    ".stroppy.PerVuIterations": {
      "properties": {
        "vus": {
          "$ref": "#/$defs/.stroppy.PerVuIterations.vus"
        },
        "iterations": {
          "$ref": "#/$defs/.stroppy.PerVuIterations.iterations"
        }
      },
      "type": "object",
      "required": [
        "vus",
        "iterations"
      ],
      "description": "*\n PerVuIterations executor configuration.\n Documentation:\n https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/per-vu-iterations/"
    },
    ".stroppy.PerVuIterations.iterations": {
      "type": "string",
      "format": "int64",
      "description": "* Number of iterations that each VU should execute\n \"-1\" is a special value to run all the units from by every vu."
    },
    ".stroppy.PerVuIterations.vus": {
      "type": "integer",
      "description": "* Number of virtual users"
    },
    ".stroppy.QueryDescriptor": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "dbSpecific"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "dbSpecific"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "name": {
          "$ref": "#/$defs/.stroppy.QueryDescriptor.name"
        },
        "sql": {
          "$ref": "#/$defs/.stroppy.QueryDescriptor.sql"
        },
        "params": {
          "$ref": "#/$defs/.stroppy.QueryDescriptor.params"
        },
        "groups": {
          "$ref": "#/$defs/.stroppy.QueryDescriptor.groups"
        },
        "dbSpecific": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.QueryDescriptor.db_specific"
            }
          ]
        }
      },
      "type": "object",
      "required": [
        "name",
        "sql"
      ],
      "description": "*\n QueryDescriptor defines a database query with its parameters and execution\n count."
    },
    ".stroppy.QueryDescriptor.db_specific": {
      "$ref": "#/$defs/.stroppy.Value.Struct",
      "description": "* Database-specific query properties"
    },
    ".stroppy.QueryDescriptor.groups": {
      "items": {
        "$ref": "#/$defs/.stroppy.QueryParamGroup",
        "description": "* Groups of the parameters"
      },
      "type": "array",
      "description": "* Groups of the parameters"
    },
    ".stroppy.QueryDescriptor.name": {
      "type": "string",
      "description": "* Name of the query"
    },
    ".stroppy.QueryDescriptor.params": {
      "items": {
        "$ref": "#/$defs/.stroppy.QueryParamDescriptor",
        "description": "* Parameters used in the query"
      },
      "type": "array",
      "description": "* Parameters used in the query"
    },
    ".stroppy.QueryDescriptor.sql": {
      "type": "string",
      "description": "* SQL query text"
    },
    ".stroppy.QueryParamDescriptor": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "replaceRegex"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "replaceRegex"
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "dbSpecific"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "dbSpecific"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "name": {
          "$ref": "#/$defs/.stroppy.QueryParamDescriptor.name"
        },
        "replaceRegex": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.QueryParamDescriptor.replace_regex"
            }
          ]
        },
        "generationRule": {
          "$ref": "#/$defs/.stroppy.QueryParamDescriptor.generation_rule"
        },
        "dbSpecific": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.QueryParamDescriptor.db_specific"
            }
          ]
        }
      },
      "type": "object",
      "required": [
        "name",
        "generationRule"
      ],
      "description": "*\n QueryParamDescriptor defines a parameter that can be used in a query."
    },
    ".stroppy.QueryParamDescriptor.db_specific": {
      "$ref": "#/$defs/.stroppy.Value.Struct",
      "description": "* Database-specific parameter properties"
    },
    ".stroppy.QueryParamDescriptor.generation_rule": {
      "$ref": "#/$defs/.stroppy.Generation.Rule",
      "description": "* Rule for generating parameter values"
    },
    ".stroppy.QueryParamDescriptor.name": {
      "type": "string",
      "description": "* Name of the parameter"
    },
    ".stroppy.QueryParamDescriptor.replace_regex": {
      "type": "string",
      "description": "* Regular expression pattern to replace with the parameter value default\n is \"${\u003cparam_name\u003e}\""
    },
    ".stroppy.QueryParamGroup": {
      "properties": {
        "name": {
          "$ref": "#/$defs/.stroppy.QueryParamGroup.name"
        },
        "params": {
          "$ref": "#/$defs/.stroppy.QueryParamGroup.params"
        }
      },
      "type": "object",
      "required": [
        "name"
      ],
      "description": "*\n QueryParamGroup defines a group of dependent parameters.\n New values generated in Carthesian product manner.\n It's useful to define composite primary keys.\n Every evaluation step only one param changes."
    },
    ".stroppy.QueryParamGroup.name": {
      "type": "string",
      "description": "* Group name"
    },
    ".stroppy.QueryParamGroup.params": {
      "items": {
        "$ref": "#/$defs/.stroppy.QueryParamDescriptor",
        "description": "* Grouped dependent parameters"
      },
      "type": "array",
      "description": "* Grouped dependent parameters"
    },
    ".stroppy.RampingArrivalRate": {
      "properties": {
        "startRate": {
          "$ref": "#/$defs/.stroppy.RampingArrivalRate.start_rate"
        },
        "timeUnit": {
          "$ref": "#/$defs/.stroppy.RampingArrivalRate.time_unit"
        },
        "stages": {
          "$ref": "#/$defs/.stroppy.RampingArrivalRate.stages"
        },
        "preAllocatedVus": {
          "$ref": "#/$defs/.stroppy.RampingArrivalRate.pre_allocated_vus"
        },
        "maxVus": {
          "$ref": "#/$defs/.stroppy.RampingArrivalRate.max_vus"
        }
      },
      "type": "object",
      "required": [
        "startRate",
        "timeUnit",
        "preAllocatedVus",
        "maxVus"
      ],
      "description": "*\n RampingArrivalRate executor configuration.\n Documentation:\n https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/ramping-arrival-rate/"
    },
    ".stroppy.RampingArrivalRate.RateStage": {
      "properties": {
        "target": {
          "$ref": "#/$defs/.stroppy.RampingArrivalRate.RateStage.target"
        },
        "duration": {
          "$ref": "#/$defs/.stroppy.RampingArrivalRate.RateStage.duration"
        }
      },
      "type": "object",
      "required": [
        "target",
        "duration"
      ],
      "description": "* Rate stage configuration for ramping arrival rate"
    },
    ".stroppy.RampingArrivalRate.RateStage.duration": {
      "type": "string",
      "format": "duration",
      "description": "* Duration of the stage"
    },
    ".stroppy.RampingArrivalRate.RateStage.target": {
      "type": "integer",
      "description": "* Target rate (iterations per time_unit) at the end of the stage"
    },
    ".stroppy.RampingArrivalRate.max_vus": {
      "type": "integer",
      "description": "* Maximum number of VUs available for pool expansion"
    },
    ".stroppy.RampingArrivalRate.pre_allocated_vus": {
      "type": "integer",
      "description": "* Number of VUs allocated in advance"
    },
    ".stroppy.RampingArrivalRate.stages": {
      "items": {
        "$ref": "#/$defs/.stroppy.RampingArrivalRate.RateStage",
        "description": "* List of rate change stages"
      },
      "type": "array",
      "description": "* List of rate change stages"
    },
    ".stroppy.RampingArrivalRate.start_rate": {
      "type": "integer",
      "description": "* Initial rate (iterations per time_unit)"
    },
    ".stroppy.RampingArrivalRate.time_unit": {
      "type": "string",
      "format": "duration",
      "description": "* Time unit for the rate (e.g., \"1s\")"
    },
    ".stroppy.RampingVUs": {
      "properties": {
        "startVus": {
          "$ref": "#/$defs/.stroppy.RampingVUs.start_vus"
        },
        "stages": {
          "$ref": "#/$defs/.stroppy.RampingVUs.stages"
        },
        "preAllocatedVus": {
          "$ref": "#/$defs/.stroppy.RampingVUs.pre_allocated_vus"
        },
        "maxVus": {
          "$ref": "#/$defs/.stroppy.RampingVUs.max_vus"
        }
      },
      "type": "object",
      "required": [
        "startVus",
        "preAllocatedVus",
        "maxVus"
      ],
      "description": "*\n RampingVUs executor configuration.\n Documentation:\n https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/ramping-vus/"
    },
    ".stroppy.RampingVUs.VUStage": {
      "properties": {
        "duration": {
          "$ref": "#/$defs/.stroppy.RampingVUs.VUStage.duration"
        },
        "target": {
          "$ref": "#/$defs/.stroppy.RampingVUs.VUStage.target"
        }
      },
      "type": "object",
      "required": [
        "duration",
        "target"
      ],
      "description": "* VU stage configuration for ramping"
    },
    ".stroppy.RampingVUs.VUStage.duration": {
      "type": "string",
      "format": "duration",
      "description": "* Duration of the stage (e.g., \"30s\")"
    },
    ".stroppy.RampingVUs.VUStage.target": {
      "type": "integer",
      "description": "* Target number of VUs at the end of the stage"
    },
    ".stroppy.RampingVUs.max_vus": {
      "type": "integer",
      "description": "* Maximum number of VUs available for pool expansion"
    },
    ".stroppy.RampingVUs.pre_allocated_vus": {
      "type": "integer",
      "description": "* Number of VUs allocated in advance.\n Helps avoid delays when creating new VUs during the test."
    },
    ".stroppy.RampingVUs.stages": {
      "items": {
        "$ref": "#/$defs/.stroppy.RampingVUs.VUStage",
        "description": "* List of stages where VU count changes to target value over specified\n time"
      },
      "type": "array",
      "description": "* List of stages where VU count changes to target value over specified\n time"
    },
    ".stroppy.RampingVUs.start_vus": {
      "type": "integer",
      "description": "* Initial number of virtual users"
    },
    ".stroppy.SharedIterations": {
      "properties": {
        "iterations": {
          "$ref": "#/$defs/.stroppy.SharedIterations.iterations"
        },
        "vus": {
          "$ref": "#/$defs/.stroppy.SharedIterations.vus"
        }
      },
      "type": "object",
      "required": [
        "iterations",
        "vus"
      ],
      "description": "*\n SharedIterations executor configuration.\n Documentation:\n https://grafana.com/docs/k6/latest/using-k6/scenarios/executors/shared-iterations/"
    },
    ".stroppy.SharedIterations.iterations": {
      "type": "string",
      "format": "int64",
      "description": "*\n Total number of iterations to be executed by all VUs together.\n Iterations are distributed dynamically among available VUs.\n \"-1\" is a special value to run all the units from step."
    },
    ".stroppy.SharedIterations.vus": {
      "type": "integer",
      "description": "*\n Number of virtual users that will execute these iterations in parallel"
    },
    ".stroppy.SideCarConfig": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "settings"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "settings"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "url": {
          "$ref": "#/$defs/.stroppy.SideCarConfig.url"
        },
        "settings": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.SideCarConfig.settings"
            }
          ]
        }
      },
      "type": "object",
      "required": [
        "url"
      ],
      "description": "*\n SideCar contains configuration for plugins."
    },
    ".stroppy.SideCarConfig.settings": {
      "$ref": "#/$defs/.stroppy.Value.Struct",
      "description": "* Additional plugin settings"
    },
    ".stroppy.SideCarConfig.url": {
      "type": "string",
      "description": "* Url to connect the plugin instance"
    },
    ".stroppy.Step": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "exporter"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "exporter"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "name": {
          "$ref": "#/$defs/.stroppy.Step.name"
        },
        "workload": {
          "$ref": "#/$defs/.stroppy.Step.workload"
        },
        "executor": {
          "$ref": "#/$defs/.stroppy.Step.executor"
        },
        "exporter": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Step.exporter"
            }
          ]
        }
      },
      "type": "object",
      "required": [
        "name",
        "workload",
        "executor"
      ],
      "description": "*\n StepExecutorMappingConfig contains configuration for mapping steps to executors."
    },
    ".stroppy.Step.executor": {
      "type": "string",
      "description": "* Name of the executor"
    },
    ".stroppy.Step.exporter": {
      "type": "string",
      "description": "* Name of the exporter"
    },
    ".stroppy.Step.name": {
      "type": "string",
      "description": "* Name of the step"
    },
    ".stroppy.Step.workload": {
      "type": "string",
      "description": "* Name of the step"
    },
    ".stroppy.TableDescriptor": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "constraint"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "constraint"
                    ]
                  }
                ]
              }
            }
          ]
        },
        {
          "oneOf": [
            {
              "required": [
                "dbSpecific"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "dbSpecific"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "name": {
          "$ref": "#/$defs/.stroppy.TableDescriptor.name"
        },
        "tableIndexes": {
          "$ref": "#/$defs/.stroppy.TableDescriptor.table_indexes"
        },
        "constraint": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.TableDescriptor.constraint"
            }
          ]
        },
        "dbSpecific": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.TableDescriptor.db_specific"
            }
          ]
        },
        "columns": {
          "$ref": "#/$defs/.stroppy.TableDescriptor.columns"
        }
      },
      "type": "object",
      "required": [
        "name"
      ],
      "description": "*\n TableDescriptor defines the structure of a database table."
    },
    ".stroppy.TableDescriptor.columns": {
      "items": {
        "$ref": "#/$defs/.stroppy.ColumnDescriptor",
        "description": "* Columns defined in this table"
      },
      "type": "array",
      "description": "* Columns defined in this table"
    },
    ".stroppy.TableDescriptor.constraint": {
      "type": "string",
      "description": "* Table-level constraints"
    },
    ".stroppy.TableDescriptor.db_specific": {
      "$ref": "#/$defs/.stroppy.Value.Struct",
      "description": "* Database-specific table properties"
    },
    ".stroppy.TableDescriptor.name": {
      "type": "string",
      "description": "* Name of the table"
    },
    ".stroppy.TableDescriptor.table_indexes": {
      "items": {
        "$ref": "#/$defs/.stroppy.IndexDescriptor",
        "description": "* List of indexes defined on this table"
      },
      "type": "array",
      "description": "* List of indexes defined on this table"
    },
    ".stroppy.TransactionDescriptor": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "dbSpecific"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "dbSpecific"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "name": {
          "$ref": "#/$defs/.stroppy.TransactionDescriptor.name"
        },
        "isolationLevel": {
          "$ref": "#/$defs/.stroppy.TransactionDescriptor.isolation_level"
        },
        "queries": {
          "$ref": "#/$defs/.stroppy.TransactionDescriptor.queries"
        },
        "dbSpecific": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.TransactionDescriptor.db_specific"
            }
          ]
        }
      },
      "type": "object",
      "required": [
        "name",
        "isolationLevel"
      ],
      "description": "*\n TransactionDescriptor defines a database transaction with its queries and\n execution count."
    },
    ".stroppy.TransactionDescriptor.db_specific": {
      "$ref": "#/$defs/.stroppy.Value.Struct",
      "description": "* Database-specific transaction properties"
    },
    ".stroppy.TransactionDescriptor.isolation_level": {
      "$ref": "#/$defs/.stroppy.TxIsolationLevel",
      "description": "* Transaction isolation level"
    },
    ".stroppy.TransactionDescriptor.name": {
      "type": "string",
      "description": "* Name of the transaction"
    },
    ".stroppy.TransactionDescriptor.queries": {
      "items": {
        "$ref": "#/$defs/.stroppy.QueryDescriptor",
        "description": "* List of queries to execute in this transaction"
      },
      "type": "array",
      "description": "* List of queries to execute in this transaction"
    },
    ".stroppy.TxIsolationLevel": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "READ_UNCOMMITTED",
        "READ_COMMITTED",
        "REPEATABLE_READ",
        "SERIALIZABLE"
      ],
      "description": "*\n TransactionIsolationLevel defines the isolation level for a database\n transaction."
    },
    ".stroppy.UnitDescriptor": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "createTable"
              ]
            },
            {
              "required": [
                "insert"
              ]
            },
            {
              "required": [
                "query"
              ]
            },
            {
              "required": [
                "transaction"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "createTable"
                    ]
                  },
                  {
                    "required": [
                      "insert"
                    ]
                  },
                  {
                    "required": [
                      "query"
                    ]
                  },
                  {
                    "required": [
                      "transaction"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "createTable": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.UnitDescriptor.create_table"
            }
          ]
        },
        "insert": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.UnitDescriptor.insert"
            }
          ]
        },
        "query": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.UnitDescriptor.query"
            }
          ]
        },
        "transaction": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.UnitDescriptor.transaction"
            }
          ]
        }
      },
      "type": "object",
      "description": "*\n UnitDescriptor represents a single workload.\n It can be a table creation operation, a query execution operation, or a\n transaction execution operation."
    },
    ".stroppy.UnitDescriptor.create_table": {
      "$ref": "#/$defs/.stroppy.TableDescriptor",
      "description": "* Table creation operation"
    },
    ".stroppy.UnitDescriptor.insert": {
      "$ref": "#/$defs/.stroppy.InsertDescriptor",
      "description": "* Data insertion operation"
    },
    ".stroppy.UnitDescriptor.query": {
      "$ref": "#/$defs/.stroppy.QueryDescriptor",
      "description": "* Query execution operation"
    },
    ".stroppy.UnitDescriptor.transaction": {
      "$ref": "#/$defs/.stroppy.TransactionDescriptor",
      "description": "* Transaction execution operation"
    },
    ".stroppy.Uuid": {
      "properties": {
        "value": {
          "$ref": "#/$defs/.stroppy.Uuid.value"
        }
      },
      "type": "object",
      "required": [
        "value"
      ],
      "description": "*\n Uuid represents a universally unique identifier (UUID)."
    },
    ".stroppy.Uuid.value": {
      "type": "string",
      "description": "* String representation of UUID (e.g.,\n \"123e4567-e89b-12d3-a456-426614174000\")"
    },
    ".stroppy.Value": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "null"
              ]
            },
            {
              "required": [
                "int32"
              ]
            },
            {
              "required": [
                "uint32"
              ]
            },
            {
              "required": [
                "int64"
              ]
            },
            {
              "required": [
                "uint64"
              ]
            },
            {
              "required": [
                "float"
              ]
            },
            {
              "required": [
                "double"
              ]
            },
            {
              "required": [
                "string"
              ]
            },
            {
              "required": [
                "bool"
              ]
            },
            {
              "required": [
                "decimal"
              ]
            },
            {
              "required": [
                "uuid"
              ]
            },
            {
              "required": [
                "datetime"
              ]
            },
            {
              "required": [
                "struct"
              ]
            },
            {
              "required": [
                "list"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "null"
                    ]
                  },
                  {
                    "required": [
                      "int32"
                    ]
                  },
                  {
                    "required": [
                      "uint32"
                    ]
                  },
                  {
                    "required": [
                      "int64"
                    ]
                  },
                  {
                    "required": [
                      "uint64"
                    ]
                  },
                  {
                    "required": [
                      "float"
                    ]
                  },
                  {
                    "required": [
                      "double"
                    ]
                  },
                  {
                    "required": [
                      "string"
                    ]
                  },
                  {
                    "required": [
                      "bool"
                    ]
                  },
                  {
                    "required": [
                      "decimal"
                    ]
                  },
                  {
                    "required": [
                      "uuid"
                    ]
                  },
                  {
                    "required": [
                      "datetime"
                    ]
                  },
                  {
                    "required": [
                      "struct"
                    ]
                  },
                  {
                    "required": [
                      "list"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "null": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Value.null"
            }
          ]
        },
        "int32": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Value.int32"
            }
          ]
        },
        "uint32": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Value.uint32"
            }
          ]
        },
        "int64": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Value.int64"
            }
          ]
        },
        "uint64": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Value.uint64"
            }
          ]
        },
        "float": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Value.float"
            }
          ]
        },
        "double": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Value.double"
            }
          ]
        },
        "string": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Value.string"
            }
          ]
        },
        "bool": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Value.bool"
            }
          ]
        },
        "decimal": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Value.decimal"
            }
          ]
        },
        "uuid": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Value.uuid"
            }
          ]
        },
        "datetime": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Value.datetime"
            }
          ]
        },
        "struct": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Value.struct"
            }
          ]
        },
        "list": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.Value.list"
            }
          ]
        },
        "key": {
          "$ref": "#/$defs/.stroppy.Value.key"
        }
      },
      "type": "object",
      "required": [
        "key"
      ],
      "description": "*\n Value is a variant type that can represent different types of values.\n It's used to represent values that can be of multiple types in a type-safe\n way."
    },
    ".stroppy.Value.List": {
      "properties": {
        "values": {
          "$ref": "#/$defs/.stroppy.Value.List.values"
        }
      },
      "type": "object"
    },
    ".stroppy.Value.List.values": {
      "items": {
        "$ref": "#/$defs/.stroppy.Value",
        "description": "* List of values"
      },
      "type": "array",
      "description": "* List of values"
    },
    ".stroppy.Value.NullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ]
    },
    ".stroppy.Value.Struct": {
      "properties": {
        "fields": {
          "$ref": "#/$defs/.stroppy.Value.Struct.fields"
        }
      },
      "type": "object"
    },
    ".stroppy.Value.Struct.fields": {
      "items": {
        "$ref": "#/$defs/.stroppy.Value",
        "description": "* Map of field names to values"
      },
      "type": "array",
      "description": "* Map of field names to values"
    },
    ".stroppy.Value.bool": {
      "type": "boolean",
      "description": "* Boolean value"
    },
    ".stroppy.Value.datetime": {
      "$ref": "#/$defs/.stroppy.DateTime",
      "description": "* Date and time"
    },
    ".stroppy.Value.decimal": {
      "$ref": "#/$defs/.stroppy.Decimal",
      "description": "* Arbitrary-precision decimal"
    },
    ".stroppy.Value.double": {
      "type": "number",
      "description": "* 64-bit floating point number"
    },
    ".stroppy.Value.float": {
      "type": "number",
      "description": "* 32-bit floating point number"
    },
    ".stroppy.Value.int32": {
      "type": "integer",
      "description": "* 32-bit signed integer"
    },
    ".stroppy.Value.int64": {
      "type": "string",
      "format": "int64",
      "description": "* 64-bit signed integer"
    },
    ".stroppy.Value.key": {
      "type": "string",
      "description": "* Field name (used in structs)"
    },
    ".stroppy.Value.list": {
      "$ref": "#/$defs/.stroppy.Value.List",
      "description": "* List of values"
    },
    ".stroppy.Value.null": {
      "$ref": "#/$defs/.stroppy.Value.NullValue",
      "description": "* Null value"
    },
    ".stroppy.Value.string": {
      "type": "string",
      "description": "* UTF-8 encoded string"
    },
    ".stroppy.Value.struct": {
      "$ref": "#/$defs/.stroppy.Value.Struct",
      "description": "* Nested structure"
    },
    ".stroppy.Value.uint32": {
      "type": "integer",
      "description": "* 32-bit unsigned integer"
    },
    ".stroppy.Value.uint64": {
      "type": "string",
      "format": "int64",
      "description": "* 64-bit unsigned integer"
    },
    ".stroppy.Value.uuid": {
      "$ref": "#/$defs/.stroppy.Uuid",
      "description": "* Universally unique identifier"
    },
    ".stroppy.WorkloadDescriptor": {
      "allOf": [
        {
          "oneOf": [
            {
              "required": [
                "async"
              ]
            },
            {
              "not": {
                "anyOf": [
                  {
                    "required": [
                      "async"
                    ]
                  }
                ]
              }
            }
          ]
        }
      ],
      "properties": {
        "name": {
          "$ref": "#/$defs/.stroppy.WorkloadDescriptor.name"
        },
        "async": {
          "oneOf": [
            {
              "type": "null"
            },
            {
              "$ref": "#/$defs/.stroppy.WorkloadDescriptor.async"
            }
          ]
        },
        "units": {
          "$ref": "#/$defs/.stroppy.WorkloadDescriptor.units"
        }
      },
      "type": "object",
      "required": [
        "name"
      ],
      "description": "*\n WorkloadDescriptor represents a logical step in a benchmark.\n It contains a list of operations to perform in this step."
    },
    ".stroppy.WorkloadDescriptor.async": {
      "type": "boolean",
      "description": "* Whether to execute all operations in this workload asynchronously"
    },
    ".stroppy.WorkloadDescriptor.name": {
      "type": "string",
      "description": "* Name of the step"
    },
    ".stroppy.WorkloadDescriptor.units": {
      "items": {
        "$ref": "#/$defs/.stroppy.WorkloadUnitDescriptor",
        "description": "* List of operations to perform in this step"
      },
      "type": "array",
      "description": "* List of operations to perform in this step"
    },
    ".stroppy.WorkloadUnitDescriptor": {
      "properties": {
        "descriptor": {
          "$ref": "#/$defs/.stroppy.WorkloadUnitDescriptor.descriptor"
        },
        "count": {
          "$ref": "#/$defs/.stroppy.WorkloadUnitDescriptor.count"
        }
      },
      "type": "object",
      "required": [
        "descriptor",
        "count"
      ],
      "description": "*\n WorkloadUnitDescriptor represents a single unit of work.\n It can be a table creation operation, a query execution operation, or a\n transaction execution operation."
    },
    ".stroppy.WorkloadUnitDescriptor.count": {
      "type": "string",
      "format": "int64",
      "description": "* Number of times to execute this unit"
    },
    ".stroppy.WorkloadUnitDescriptor.descriptor": {
      "$ref": "#/$defs/.stroppy.UnitDescriptor"
    }
  },
  "type": "object"
}